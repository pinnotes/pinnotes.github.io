<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PinNotes – Chart.js</title><link>/categories/chart.js/</link><description>Recent content in Chart.js on PinNotes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/categories/chart.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Add Chart.js in HUGO 📈</title><link>/exercises/graded-assignments/mathematics-1/q1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/exercises/graded-assignments/mathematics-1/q1/</guid><description>
$$F(\omega) = \int_{-\infty}^{\infty} f(t) e^{-j\omega t} \, dt$$&lt;p>description: &amp;ldquo;This is an inline equation: $E = mc^2$ and a block equation: &lt;/p>
$$a^2 + b^2 = c^2$$&lt;p>&amp;rdquo;&lt;/p>
&lt;p>$\displaystyle \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }$
$\displaystyle \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)$
$\displaystyle {1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots }= \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \quad\quad \text{for }\lvert q\rvert&amp;lt;1.$&lt;/p>
&lt;div class="border-card border-card-question">
&lt;div class="border-card-header">
&lt;h3 class="header-title">Question&lt;/h3>
&lt;/div>
&lt;div class="border-card-content">What is the capital of France?&lt;/div>
&lt;/div>
&lt;style>
.border-card {
border-radius: 8px;
padding: 16px;
margin: 16px 0;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
.border-card-content {
overflow-x: auto;
overflow-y: hidden;
padding: 0;
margin: 0;
scrollbar-width: none;
-ms-overflow-style: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
margin-top: 0;
}
p {
margin-top: 1rem;
}
ol {
margin-top: 0;
}
ul {
margin-left: 0;
list-style: none;
}
table {
margin-bottom: 1.5rem;
}
.katex-display {
margin: 0;
margin-top: 0.5rem;
}
}
.border-card-content::-webkit-scrollbar {
display: none;
}
.border-card-header {
font-weight: bold;
}
.header-title {
font-size: 1.25rem;
margin: 0;
color: inherit;
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #fff3e0;
}
.border-card-tip {
border: 2px dashed #8bc34a;
.border-card-header {
background-color: #e8f5e9;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #fff8e1;
}
details.border-card {
border: 2px dashed #8bc34a;
padding: 0;
overflow: hidden;
}
details.border-card summary {
list-style: none;
padding: 16px;
margin: 0;
cursor: pointer;
display: flex;
justify-content: space-between;
align-items: center;
}
details.border-card summary::-webkit-details-marker {
display: none;
}
details.border-card[open] {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
details.border-card .border-card-content {
padding: 16px;
}
.dropdown-toggle {
width: 24px;
height: 24px;
border-radius: 50%;
background-color: #8bc34a;
display: flex;
justify-content: center;
align-items: center;
transition: transform 0.3s ease;
}
.dropdown-toggle::before {
content: "";
display: block;
width: 8px;
height: 8px;
border-right: 2px solid white;
border-bottom: 2px solid white;
transform: rotate(45deg);
transition: transform 0.3s ease;
}
details[open] .dropdown-toggle::before {
transform: rotate(-135deg);
}
html:is([class~="dark"]) {
.border-card {
color: #e0e0e0;
border-color: rgba(255, 255, 255, 0.2);
}
.border-card {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #3e2723;
}
.border-card-tip {
border: 2px dashed #8bc34a;
background-color: #212521;
.border-card-header {
background-color: #405f42;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
background-color: #4a148c33;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #ffbb0027;
}
}
&lt;/style>
&lt;div class="border-card border-card-answer">
&lt;div class="border-card-header">
&lt;h3 class="header-title">Answer&lt;/h3>
&lt;/div>
&lt;div class="border-card-content">The capital of France is Paris.&lt;/div>
&lt;/div>
&lt;style>
.border-card {
border-radius: 8px;
padding: 16px;
margin: 16px 0;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
.border-card-content {
overflow-x: auto;
overflow-y: hidden;
padding: 0;
margin: 0;
scrollbar-width: none;
-ms-overflow-style: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
margin-top: 0;
}
p {
margin-top: 1rem;
}
ol {
margin-top: 0;
}
ul {
margin-left: 0;
list-style: none;
}
table {
margin-bottom: 1.5rem;
}
.katex-display {
margin: 0;
margin-top: 0.5rem;
}
}
.border-card-content::-webkit-scrollbar {
display: none;
}
.border-card-header {
font-weight: bold;
}
.header-title {
font-size: 1.25rem;
margin: 0;
color: inherit;
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #fff3e0;
}
.border-card-tip {
border: 2px dashed #8bc34a;
.border-card-header {
background-color: #e8f5e9;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #fff8e1;
}
details.border-card {
border: 2px dashed #8bc34a;
padding: 0;
overflow: hidden;
}
details.border-card summary {
list-style: none;
padding: 16px;
margin: 0;
cursor: pointer;
display: flex;
justify-content: space-between;
align-items: center;
}
details.border-card summary::-webkit-details-marker {
display: none;
}
details.border-card[open] {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
details.border-card .border-card-content {
padding: 16px;
}
.dropdown-toggle {
width: 24px;
height: 24px;
border-radius: 50%;
background-color: #8bc34a;
display: flex;
justify-content: center;
align-items: center;
transition: transform 0.3s ease;
}
.dropdown-toggle::before {
content: "";
display: block;
width: 8px;
height: 8px;
border-right: 2px solid white;
border-bottom: 2px solid white;
transform: rotate(45deg);
transition: transform 0.3s ease;
}
details[open] .dropdown-toggle::before {
transform: rotate(-135deg);
}
html:is([class~="dark"]) {
.border-card {
color: #e0e0e0;
border-color: rgba(255, 255, 255, 0.2);
}
.border-card {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #3e2723;
}
.border-card-tip {
border: 2px dashed #8bc34a;
background-color: #212521;
.border-card-header {
background-color: #405f42;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
background-color: #4a148c33;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #ffbb0027;
}
}
&lt;/style>
&lt;details class="border-card border-card-tip">
&lt;summary class="border-card-header">
&lt;h3 class="header-title">Tip&lt;/h3>
&lt;span class="dropdown-toggle" aria-expanded="true"> &lt;/span>
&lt;/summary>
&lt;div class="border-card-content">Remember to stay hydrated while studying!&lt;/div>
&lt;/details>
&lt;style>
.border-card {
border-radius: 8px;
padding: 16px;
margin: 16px 0;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
.border-card-content {
overflow-x: auto;
overflow-y: hidden;
padding: 0;
margin: 0;
scrollbar-width: none;
-ms-overflow-style: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
margin-top: 0;
}
p {
margin-top: 1rem;
}
ol {
margin-top: 0;
}
ul {
margin-left: 0;
list-style: none;
}
table {
margin-bottom: 1.5rem;
}
.katex-display {
margin: 0;
margin-top: 0.5rem;
}
}
.border-card-content::-webkit-scrollbar {
display: none;
}
.border-card-header {
font-weight: bold;
}
.header-title {
font-size: 1.25rem;
margin: 0;
color: inherit;
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #fff3e0;
}
.border-card-tip {
border: 2px dashed #8bc34a;
.border-card-header {
background-color: #e8f5e9;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #fff8e1;
}
details.border-card {
border: 2px dashed #8bc34a;
padding: 0;
overflow: hidden;
}
details.border-card summary {
list-style: none;
padding: 16px;
margin: 0;
cursor: pointer;
display: flex;
justify-content: space-between;
align-items: center;
}
details.border-card summary::-webkit-details-marker {
display: none;
}
details.border-card[open] {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
details.border-card .border-card-content {
padding: 16px;
}
.dropdown-toggle {
width: 24px;
height: 24px;
border-radius: 50%;
background-color: #8bc34a;
display: flex;
justify-content: center;
align-items: center;
transition: transform 0.3s ease;
}
.dropdown-toggle::before {
content: "";
display: block;
width: 8px;
height: 8px;
border-right: 2px solid white;
border-bottom: 2px solid white;
transform: rotate(45deg);
transition: transform 0.3s ease;
}
details[open] .dropdown-toggle::before {
transform: rotate(-135deg);
}
html:is([class~="dark"]) {
.border-card {
color: #e0e0e0;
border-color: rgba(255, 255, 255, 0.2);
}
.border-card {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #3e2723;
}
.border-card-tip {
border: 2px dashed #8bc34a;
background-color: #212521;
.border-card-header {
background-color: #405f42;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
background-color: #4a148c33;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #ffbb0027;
}
}
&lt;/style>
&lt;div class="border-card border-card-conclusion">
&lt;div class="border-card-header">
&lt;h3 class="header-title">Conclusion&lt;/h3>
&lt;/div>
&lt;div class="border-card-content">This concludes our discussion on the topic.&lt;/div>
&lt;/div>
&lt;style>
.border-card {
border-radius: 8px;
padding: 16px;
margin: 16px 0;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
.border-card-content {
overflow-x: auto;
overflow-y: hidden;
padding: 0;
margin: 0;
scrollbar-width: none;
-ms-overflow-style: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
margin-top: 0;
}
p {
margin-top: 1rem;
}
ol {
margin-top: 0;
}
ul {
margin-left: 0;
list-style: none;
}
table {
margin-bottom: 1.5rem;
}
.katex-display {
margin: 0;
margin-top: 0.5rem;
}
}
.border-card-content::-webkit-scrollbar {
display: none;
}
.border-card-header {
font-weight: bold;
}
.header-title {
font-size: 1.25rem;
margin: 0;
color: inherit;
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #fff3e0;
}
.border-card-tip {
border: 2px dashed #8bc34a;
.border-card-header {
background-color: #e8f5e9;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #fff8e1;
}
details.border-card {
border: 2px dashed #8bc34a;
padding: 0;
overflow: hidden;
}
details.border-card summary {
list-style: none;
padding: 16px;
margin: 0;
cursor: pointer;
display: flex;
justify-content: space-between;
align-items: center;
}
details.border-card summary::-webkit-details-marker {
display: none;
}
details.border-card[open] {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
details.border-card .border-card-content {
padding: 16px;
}
.dropdown-toggle {
width: 24px;
height: 24px;
border-radius: 50%;
background-color: #8bc34a;
display: flex;
justify-content: center;
align-items: center;
transition: transform 0.3s ease;
}
.dropdown-toggle::before {
content: "";
display: block;
width: 8px;
height: 8px;
border-right: 2px solid white;
border-bottom: 2px solid white;
transform: rotate(45deg);
transition: transform 0.3s ease;
}
details[open] .dropdown-toggle::before {
transform: rotate(-135deg);
}
html:is([class~="dark"]) {
.border-card {
color: #e0e0e0;
border-color: rgba(255, 255, 255, 0.2);
}
.border-card {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #3e2723;
}
.border-card-tip {
border: 2px dashed #8bc34a;
background-color: #212521;
.border-card-header {
background-color: #405f42;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
background-color: #4a148c33;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #ffbb0027;
}
}
&lt;/style>
&lt;div class="border-card border-card-bonus">
&lt;div class="border-card-header">
&lt;h3 class="header-title">Bonus&lt;/h3>
&lt;/div>
&lt;div class="border-card-content">Here’s an extra tip: Practice makes perfect!&lt;/div>
&lt;/div>
&lt;style>
.border-card {
border-radius: 8px;
padding: 16px;
margin: 16px 0;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
.border-card-content {
overflow-x: auto;
overflow-y: hidden;
padding: 0;
margin: 0;
scrollbar-width: none;
-ms-overflow-style: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
margin-top: 0;
}
p {
margin-top: 1rem;
}
ol {
margin-top: 0;
}
ul {
margin-left: 0;
list-style: none;
}
table {
margin-bottom: 1.5rem;
}
.katex-display {
margin: 0;
margin-top: 0.5rem;
}
}
.border-card-content::-webkit-scrollbar {
display: none;
}
.border-card-header {
font-weight: bold;
}
.header-title {
font-size: 1.25rem;
margin: 0;
color: inherit;
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #fff3e0;
}
.border-card-tip {
border: 2px dashed #8bc34a;
.border-card-header {
background-color: #e8f5e9;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #fff8e1;
}
details.border-card {
border: 2px dashed #8bc34a;
padding: 0;
overflow: hidden;
}
details.border-card summary {
list-style: none;
padding: 16px;
margin: 0;
cursor: pointer;
display: flex;
justify-content: space-between;
align-items: center;
}
details.border-card summary::-webkit-details-marker {
display: none;
}
details.border-card[open] {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
details.border-card .border-card-content {
padding: 16px;
}
.dropdown-toggle {
width: 24px;
height: 24px;
border-radius: 50%;
background-color: #8bc34a;
display: flex;
justify-content: center;
align-items: center;
transition: transform 0.3s ease;
}
.dropdown-toggle::before {
content: "";
display: block;
width: 8px;
height: 8px;
border-right: 2px solid white;
border-bottom: 2px solid white;
transform: rotate(45deg);
transition: transform 0.3s ease;
}
details[open] .dropdown-toggle::before {
transform: rotate(-135deg);
}
html:is([class~="dark"]) {
.border-card {
color: #e0e0e0;
border-color: rgba(255, 255, 255, 0.2);
}
.border-card {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #3e2723;
}
.border-card-tip {
border: 2px dashed #8bc34a;
background-color: #212521;
.border-card-header {
background-color: #405f42;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
background-color: #4a148c33;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #ffbb0027;
}
}
&lt;/style>
&lt;h2>More Charts&lt;span class="hx-absolute -hx-mt-20" id="more-charts">&lt;/span>
&lt;a href="#more-charts" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h4>Line Chart&lt;span class="hx-absolute -hx-mt-20" id="line-chart">&lt;/span>
&lt;a href="#line-chart" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>
&lt;div class="chart">
&lt;canvas id="chart-35428a507217e51f12a9d2e28013529f">&lt;/canvas>
&lt;script type="text/javascript">
window.addEventListener("DOMContentLoaded", (event) => {
const ctx = document.getElementById("chart-35428a507217e51f12a9d2e28013529f");
const chart = new Chart(ctx, {
type: 'line',
data: {
labels: [
'Jan',
'Feb',
'Mar',
'Apr',
'May',
'June',
'July'
],
datasets: [{
label: 'My First Dataset',
data: [65, 59, 80, 81, 56, 55, 40],
fill: false,
borderColor: 'rgb(192, 75, 143)',
tension: 0.1
}]
},
});
});
&lt;/script>
&lt;/div>
&lt;hr>
&lt;h4>Bar Chart&lt;span class="hx-absolute -hx-mt-20" id="bar-chart">&lt;/span>
&lt;a href="#bar-chart" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>
&lt;div class="chart">
&lt;canvas id="chart-dcf84e6135be9de8cb30c95fa015e53d">&lt;/canvas>
&lt;script type="text/javascript">
window.addEventListener("DOMContentLoaded", (event) => {
const ctx = document.getElementById("chart-dcf84e6135be9de8cb30c95fa015e53d");
const chart = new Chart(ctx, {
type: 'bar',
data: {
labels: ['Tomato', 'Blueberry', 'Banana', 'Lime', 'Orange'],
datasets: [{
label: '# of votes',
data: [12, 19, 3, 5, 3],
}]
}
});
});
&lt;/script>
&lt;/div>
$$
\begin{aligned}
\nabla \cdot \mathbf{E} &amp;= \frac{\rho}{\varepsilon_0} \\
\nabla \cdot \mathbf{B} &amp;= 0 \\
\nabla \times \mathbf{E} &amp;= -\frac{\partial \mathbf{B}}{\partial t} \\
\nabla \times \mathbf{B} &amp;= \mu_0 \left( \mathbf{J} + \varepsilon_0 \frac{\partial \mathbf{E}}{\partial t} \right)
\end{aligned}
$$</description></item><item><title>Add Chart.js in HUGO 📈</title><link>/exercises/graded-assignments/statistics-1/q1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/exercises/graded-assignments/statistics-1/q1/</guid><description>
&lt;p>This is an inline equation: $E = mc^2$ and a block equation: &lt;/p>
$$a^2 + b^2 = c^2$$&lt;p> Find $x^2$. % KaTeX inline notation Inline notation: % KaTeX inline notation
Inline notation: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)&lt;/p>
&lt;h3>Quiestion 1:&lt;span class="hx-absolute -hx-mt-20" id="quiestion-1">&lt;/span>
&lt;a href="#quiestion-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>This is an inline equation: $E = mc^2$ and a block equation: &lt;/p>
$$a^2 + b^2 = c^2$$&lt;p> Find $x^2$. % KaTeX inline notation Inline notation: % KaTeX inline notation
Inline notation: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)&lt;/p>
&lt;div class="border-card border-card-basic">
&lt;div class="border-card-content">&lt;p>This is an inline equation: $E = mc^2$ and a block equation: &lt;/p>
$$a^2 + b^2 = c^2$$&lt;p> Find $x^2$.&lt;/p>
&lt;p>% KaTeX inline notation Inline notation: % KaTeX inline notation Inline notation: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)&lt;/p>
&lt;/div>
&lt;/div>
&lt;style>
.border-card {
border-radius: 8px;
padding: 16px;
margin: 16px 0;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
.border-card-content {
overflow-x: auto;
overflow-y: hidden;
padding: 0;
margin: 0;
scrollbar-width: none;
-ms-overflow-style: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
margin-top: 0;
}
p {
margin-top: 1rem;
}
ol {
margin-top: 0;
}
ul {
margin-left: 0;
list-style: none;
}
table {
margin-bottom: 1.5rem;
}
.katex-display {
margin: 0;
margin-top: 0.5rem;
}
}
.border-card-content::-webkit-scrollbar {
display: none;
}
.border-card-header {
font-weight: bold;
}
.header-title {
font-size: 1.25rem;
margin: 0;
color: inherit;
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #fff3e0;
}
.border-card-tip {
border: 2px dashed #8bc34a;
.border-card-header {
background-color: #e8f5e9;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #fff8e1;
}
details.border-card {
border: 2px dashed #8bc34a;
padding: 0;
overflow: hidden;
}
details.border-card summary {
list-style: none;
padding: 16px;
margin: 0;
cursor: pointer;
display: flex;
justify-content: space-between;
align-items: center;
}
details.border-card summary::-webkit-details-marker {
display: none;
}
details.border-card[open] {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
details.border-card .border-card-content {
padding: 16px;
}
.dropdown-toggle {
width: 24px;
height: 24px;
border-radius: 50%;
background-color: #8bc34a;
display: flex;
justify-content: center;
align-items: center;
transition: transform 0.3s ease;
}
.dropdown-toggle::before {
content: "";
display: block;
width: 8px;
height: 8px;
border-right: 2px solid white;
border-bottom: 2px solid white;
transform: rotate(45deg);
transition: transform 0.3s ease;
}
details[open] .dropdown-toggle::before {
transform: rotate(-135deg);
}
html:is([class~="dark"]) {
.border-card {
color: #e0e0e0;
border-color: rgba(255, 255, 255, 0.2);
}
.border-card {
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
}
.border-card-basic {
border: 2px solid #4caf50;
}
.border-card-question {
border: 2px solid #2196f3;
}
.border-card-answer {
border: 2px solid #ff9800;
background-color: #3e2723;
}
.border-card-tip {
border: 2px dashed #8bc34a;
background-color: #212521;
.border-card-header {
background-color: #405f42;
}
}
.border-card-conclusion {
border: 2px solid #9c27b0;
background-color: #4a148c33;
}
.border-card-bonus {
border: 2px dotted #ffc107;
background-color: #ffbb0027;
}
}
&lt;/style>
&lt;p>This shortcode allows you to solve a quadratic equation of the form $ax^2 + bx + c = 0$ by just entering the coefficients.&lt;/p>
&lt;h3>Example 1: Two Real Roots&lt;span class="hx-absolute -hx-mt-20" id="example-1-two-real-roots">&lt;/span>
&lt;a href="#example-1-two-real-roots" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>This solves the equation $x^2 - 5x + 6 = 0$.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.quadratic-solver-container {
max-width: 600px;
margin: 2rem auto;
padding: 2rem;
background-color: #f8f9fa;
border: 1px solid #dee2e6;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
font-family: sans-serif;
}
.calc-title {
font-size: 1.35rem;
font-weight: 700;
text-align: center;
margin-bottom: 1.2rem;
letter-spacing: 0.01em;
color: #007bff;
text-shadow: 0 1px 2px rgba(0,0,0,0.04);
}
.equation-display {
font-size: 1.5rem;
font-weight: bold;
text-align: center;
margin-bottom: 1.5rem;
color: #333;
}
.input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 1.5rem 2rem;
margin-bottom: 1.5rem;
}
.input-group {
display: flex;
flex-direction: column;
}
.input-group label {
font-weight: bold;
margin-bottom: 0.5rem;
color: #495057;
}
.input-group input[type="number"], .input-group input[type="text"] {
padding: 0.75rem;
border: 1px solid #ced4da;
border-radius: 4px;
font-size: 1rem;
transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}
.solver-button-container {
text-align: center;
margin-top: 1rem;
}
.solver-button {
padding: 0.75rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 4px;
font-size: 1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.2s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #e9ecef;
border-radius: 6px;
border: 1px solid #ced4da;
font-size: 1.1rem;
font-family: monospace;
color: #212529;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
.solution-highlight {
font-weight: bold;
color: green;
}
html:is(.dark) {
.quadratic-solver-container {
background-color: #23272f;
border-color: #343a40;
box-shadow: 0 4px 12px rgba(0,0,0,0.32);
color: #f1f3f5;
}
.equation-display {
color: #e9ecef;
}
.input-group label {
color: #ced4da;
}
.input-group input[type="number"], .input-group input[type="text"] {
background-color: #181a1b;
border-color: #495057;
color: #f1f3f5;
}
.input-group input:focus {
border-color: #66b2ff;
box-shadow: 0 0 5px rgba(102, 178, 255, 0.5);
}
.solver-button {
background-color: #339af0;
color: #fff;
}
.solver-button:hover {
background-color: #1971c2;
}
.solver-result {
background-color: #2b3035;
border-color: #495057;
color: #f1f3f5;
}
.solver-error {
color: #ff6b6b;
}
.solution-highlight {
color: #51cf66;
}
}
@media (max-width: 600px) {
.quadratic-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.1rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem 0;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
.solver-button {
width: 100%;
padding: 0.75rem 0;
}
}
&lt;/style>
&lt;div class="quadratic-solver-container mona-sans">
&lt;h3 class="calc-title">Quadratic Equation Solver&lt;/h3>
&lt;div class="equation-display">
&lt;span id="a-display-1">a&lt;/span>x² +
&lt;span id="b-display-1">b&lt;/span>x +
&lt;span id="c-display-1">c&lt;/span> = 0
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-1">a (coefficient of x²):&lt;/label>
&lt;input type="number" id="a-input-1" value="1" oninput="updateDisplay('a', this.value, '1')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-1">b (coefficient of x):&lt;/label>
&lt;input type="number" id="b-input-1" value="-5" oninput="updateDisplay('b', this.value, '1')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-1">c (constant):&lt;/label>
&lt;input type="number" id="c-input-1" value="6" oninput="updateDisplay('c', this.value, '1')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="var-input-1">Variable:&lt;/label>
&lt;input type="text" id="var-input-1" value="x" oninput="updateDisplay('var', this.value, '1')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="solveQuadraticEquation('1')">Solve Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-1">
Solutions will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateDisplay = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
window.solveQuadraticEquation = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const varInput = document.getElementById('var-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
const variable = varInput.value || 'x';
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
if (b === 0) {
if (c === 0) {
solutionOutput.innerHTML = `Solution: &lt;span class="solution-highlight">Infinite solutions.&lt;/span>`;
} else {
solutionOutput.innerHTML = `Solution: &lt;span class="solver-error">No solution.&lt;/span>`;
}
return;
}
const linearSolution = -c / b;
solutionOutput.innerHTML = `This is a linear equation. Solution for ${variable}: &lt;span class="solution-highlight">${math.format(linearSolution, {precision: 5})}&lt;/span>`;
return;
}
const expression = `${a}*${variable}^2 + ${b}*${variable} + ${c}`;
const discriminant = b * b - 4 * a * c;
if (discriminant > 0) {
const root1 = (-b + math.sqrt(discriminant)) / (2 * a);
const root2 = (-b - math.sqrt(discriminant)) / (2 * a);
solutionOutput.innerHTML = `Solutions for ${variable}: &lt;span class="solution-highlight">${math.format(root1, {precision: 5})}, ${math.format(root2, {precision: 5})}&lt;/span>`;
} else if (discriminant === 0) {
const root = -b / (2 * a);
solutionOutput.innerHTML = `Single solution for ${variable}: &lt;span class="solution-highlight">${math.format(root, {precision: 5})}&lt;/span>`;
} else {
const realPart = -b / (2 * a);
const imagPart = math.sqrt(-discriminant) / (2 * a);
solutionOutput.innerHTML = `Complex solutions for ${variable}: &lt;span class="solution-highlight">${math.format(math.complex(realPart, imagPart), {precision: 5})}, ${math.format(math.complex(realPart, -imagPart), {precision: 5})}&lt;/span>`;
}
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '1';
updateDisplay('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateDisplay('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateDisplay('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: One Real Root&lt;span class="hx-absolute -hx-mt-20" id="example-2-one-real-root">&lt;/span>
&lt;a href="#example-2-one-real-root" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>This solves the equation $y^2 + 2y + 1 = 0$.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.quadratic-solver-container {
max-width: 600px;
margin: 2rem auto;
padding: 2rem;
background-color: #f8f9fa;
border: 1px solid #dee2e6;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
font-family: sans-serif;
}
.calc-title {
font-size: 1.35rem;
font-weight: 700;
text-align: center;
margin-bottom: 1.2rem;
letter-spacing: 0.01em;
color: #007bff;
text-shadow: 0 1px 2px rgba(0,0,0,0.04);
}
.equation-display {
font-size: 1.5rem;
font-weight: bold;
text-align: center;
margin-bottom: 1.5rem;
color: #333;
}
.input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 1.5rem 2rem;
margin-bottom: 1.5rem;
}
.input-group {
display: flex;
flex-direction: column;
}
.input-group label {
font-weight: bold;
margin-bottom: 0.5rem;
color: #495057;
}
.input-group input[type="number"], .input-group input[type="text"] {
padding: 0.75rem;
border: 1px solid #ced4da;
border-radius: 4px;
font-size: 1rem;
transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}
.solver-button-container {
text-align: center;
margin-top: 1rem;
}
.solver-button {
padding: 0.75rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 4px;
font-size: 1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.2s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #e9ecef;
border-radius: 6px;
border: 1px solid #ced4da;
font-size: 1.1rem;
font-family: monospace;
color: #212529;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
.solution-highlight {
font-weight: bold;
color: green;
}
html:is(.dark) {
.quadratic-solver-container {
background-color: #23272f;
border-color: #343a40;
box-shadow: 0 4px 12px rgba(0,0,0,0.32);
color: #f1f3f5;
}
.equation-display {
color: #e9ecef;
}
.input-group label {
color: #ced4da;
}
.input-group input[type="number"], .input-group input[type="text"] {
background-color: #181a1b;
border-color: #495057;
color: #f1f3f5;
}
.input-group input:focus {
border-color: #66b2ff;
box-shadow: 0 0 5px rgba(102, 178, 255, 0.5);
}
.solver-button {
background-color: #339af0;
color: #fff;
}
.solver-button:hover {
background-color: #1971c2;
}
.solver-result {
background-color: #2b3035;
border-color: #495057;
color: #f1f3f5;
}
.solver-error {
color: #ff6b6b;
}
.solution-highlight {
color: #51cf66;
}
}
@media (max-width: 600px) {
.quadratic-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.1rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem 0;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
.solver-button {
width: 100%;
padding: 0.75rem 0;
}
}
&lt;/style>
&lt;div class="quadratic-solver-container mona-sans">
&lt;h3 class="calc-title">Quadratic Equation Solver&lt;/h3>
&lt;div class="equation-display">
&lt;span id="a-display-2">a&lt;/span>x² +
&lt;span id="b-display-2">b&lt;/span>x +
&lt;span id="c-display-2">c&lt;/span> = 0
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-2">a (coefficient of x²):&lt;/label>
&lt;input type="number" id="a-input-2" value="1" oninput="updateDisplay('a', this.value, '2')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-2">b (coefficient of x):&lt;/label>
&lt;input type="number" id="b-input-2" value="2" oninput="updateDisplay('b', this.value, '2')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-2">c (constant):&lt;/label>
&lt;input type="number" id="c-input-2" value="1" oninput="updateDisplay('c', this.value, '2')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="var-input-2">Variable:&lt;/label>
&lt;input type="text" id="var-input-2" value="y" oninput="updateDisplay('var', this.value, '2')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="solveQuadraticEquation('2')">Solve Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-2">
Solutions will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateDisplay = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
window.solveQuadraticEquation = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const varInput = document.getElementById('var-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
const variable = varInput.value || 'x';
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
if (b === 0) {
if (c === 0) {
solutionOutput.innerHTML = `Solution: &lt;span class="solution-highlight">Infinite solutions.&lt;/span>`;
} else {
solutionOutput.innerHTML = `Solution: &lt;span class="solver-error">No solution.&lt;/span>`;
}
return;
}
const linearSolution = -c / b;
solutionOutput.innerHTML = `This is a linear equation. Solution for ${variable}: &lt;span class="solution-highlight">${math.format(linearSolution, {precision: 5})}&lt;/span>`;
return;
}
const expression = `${a}*${variable}^2 + ${b}*${variable} + ${c}`;
const discriminant = b * b - 4 * a * c;
if (discriminant > 0) {
const root1 = (-b + math.sqrt(discriminant)) / (2 * a);
const root2 = (-b - math.sqrt(discriminant)) / (2 * a);
solutionOutput.innerHTML = `Solutions for ${variable}: &lt;span class="solution-highlight">${math.format(root1, {precision: 5})}, ${math.format(root2, {precision: 5})}&lt;/span>`;
} else if (discriminant === 0) {
const root = -b / (2 * a);
solutionOutput.innerHTML = `Single solution for ${variable}: &lt;span class="solution-highlight">${math.format(root, {precision: 5})}&lt;/span>`;
} else {
const realPart = -b / (2 * a);
const imagPart = math.sqrt(-discriminant) / (2 * a);
solutionOutput.innerHTML = `Complex solutions for ${variable}: &lt;span class="solution-highlight">${math.format(math.complex(realPart, imagPart), {precision: 5})}, ${math.format(math.complex(realPart, -imagPart), {precision: 5})}&lt;/span>`;
}
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '2';
updateDisplay('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateDisplay('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateDisplay('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 3: Complex Roots&lt;span class="hx-absolute -hx-mt-20" id="example-3-complex-roots">&lt;/span>
&lt;a href="#example-3-complex-roots" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>This solves the equation $x^2 + x + 1 = 0$.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.quadratic-solver-container {
max-width: 600px;
margin: 2rem auto;
padding: 2rem;
background-color: #f8f9fa;
border: 1px solid #dee2e6;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
font-family: sans-serif;
}
.calc-title {
font-size: 1.35rem;
font-weight: 700;
text-align: center;
margin-bottom: 1.2rem;
letter-spacing: 0.01em;
color: #007bff;
text-shadow: 0 1px 2px rgba(0,0,0,0.04);
}
.equation-display {
font-size: 1.5rem;
font-weight: bold;
text-align: center;
margin-bottom: 1.5rem;
color: #333;
}
.input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 1.5rem 2rem;
margin-bottom: 1.5rem;
}
.input-group {
display: flex;
flex-direction: column;
}
.input-group label {
font-weight: bold;
margin-bottom: 0.5rem;
color: #495057;
}
.input-group input[type="number"], .input-group input[type="text"] {
padding: 0.75rem;
border: 1px solid #ced4da;
border-radius: 4px;
font-size: 1rem;
transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}
.solver-button-container {
text-align: center;
margin-top: 1rem;
}
.solver-button {
padding: 0.75rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 4px;
font-size: 1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.2s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #e9ecef;
border-radius: 6px;
border: 1px solid #ced4da;
font-size: 1.1rem;
font-family: monospace;
color: #212529;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
.solution-highlight {
font-weight: bold;
color: green;
}
html:is(.dark) {
.quadratic-solver-container {
background-color: #23272f;
border-color: #343a40;
box-shadow: 0 4px 12px rgba(0,0,0,0.32);
color: #f1f3f5;
}
.equation-display {
color: #e9ecef;
}
.input-group label {
color: #ced4da;
}
.input-group input[type="number"], .input-group input[type="text"] {
background-color: #181a1b;
border-color: #495057;
color: #f1f3f5;
}
.input-group input:focus {
border-color: #66b2ff;
box-shadow: 0 0 5px rgba(102, 178, 255, 0.5);
}
.solver-button {
background-color: #339af0;
color: #fff;
}
.solver-button:hover {
background-color: #1971c2;
}
.solver-result {
background-color: #2b3035;
border-color: #495057;
color: #f1f3f5;
}
.solver-error {
color: #ff6b6b;
}
.solution-highlight {
color: #51cf66;
}
}
@media (max-width: 600px) {
.quadratic-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.1rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem 0;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
.solver-button {
width: 100%;
padding: 0.75rem 0;
}
}
&lt;/style>
&lt;div class="quadratic-solver-container mona-sans">
&lt;h3 class="calc-title">Quadratic Equation Solver&lt;/h3>
&lt;div class="equation-display">
&lt;span id="a-display-3">a&lt;/span>x² +
&lt;span id="b-display-3">b&lt;/span>x +
&lt;span id="c-display-3">c&lt;/span> = 0
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-3">a (coefficient of x²):&lt;/label>
&lt;input type="number" id="a-input-3" value="1" oninput="updateDisplay('a', this.value, '3')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-3">b (coefficient of x):&lt;/label>
&lt;input type="number" id="b-input-3" value="1" oninput="updateDisplay('b', this.value, '3')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-3">c (constant):&lt;/label>
&lt;input type="number" id="c-input-3" value="1" oninput="updateDisplay('c', this.value, '3')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="var-input-3">Variable:&lt;/label>
&lt;input type="text" id="var-input-3" value="x" oninput="updateDisplay('var', this.value, '3')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="solveQuadraticEquation('3')">Solve Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-3">
Solutions will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateDisplay = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
window.solveQuadraticEquation = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const varInput = document.getElementById('var-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
const variable = varInput.value || 'x';
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
if (b === 0) {
if (c === 0) {
solutionOutput.innerHTML = `Solution: &lt;span class="solution-highlight">Infinite solutions.&lt;/span>`;
} else {
solutionOutput.innerHTML = `Solution: &lt;span class="solver-error">No solution.&lt;/span>`;
}
return;
}
const linearSolution = -c / b;
solutionOutput.innerHTML = `This is a linear equation. Solution for ${variable}: &lt;span class="solution-highlight">${math.format(linearSolution, {precision: 5})}&lt;/span>`;
return;
}
const expression = `${a}*${variable}^2 + ${b}*${variable} + ${c}`;
const discriminant = b * b - 4 * a * c;
if (discriminant > 0) {
const root1 = (-b + math.sqrt(discriminant)) / (2 * a);
const root2 = (-b - math.sqrt(discriminant)) / (2 * a);
solutionOutput.innerHTML = `Solutions for ${variable}: &lt;span class="solution-highlight">${math.format(root1, {precision: 5})}, ${math.format(root2, {precision: 5})}&lt;/span>`;
} else if (discriminant === 0) {
const root = -b / (2 * a);
solutionOutput.innerHTML = `Single solution for ${variable}: &lt;span class="solution-highlight">${math.format(root, {precision: 5})}&lt;/span>`;
} else {
const realPart = -b / (2 * a);
const imagPart = math.sqrt(-discriminant) / (2 * a);
solutionOutput.innerHTML = `Complex solutions for ${variable}: &lt;span class="solution-highlight">${math.format(math.complex(realPart, imagPart), {precision: 5})}, ${math.format(math.complex(realPart, -imagPart), {precision: 5})}&lt;/span>`;
}
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '3';
updateDisplay('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateDisplay('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateDisplay('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 4: A Blank Solver&lt;span class="hx-absolute -hx-mt-20" id="example-4-a-blank-solver">&lt;/span>
&lt;a href="#example-4-a-blank-solver" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Try your own coefficients below.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.quadratic-solver-container {
max-width: 600px;
margin: 2rem auto;
padding: 2rem;
background-color: #f8f9fa;
border: 1px solid #dee2e6;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
font-family: sans-serif;
}
.calc-title {
font-size: 1.35rem;
font-weight: 700;
text-align: center;
margin-bottom: 1.2rem;
letter-spacing: 0.01em;
color: #007bff;
text-shadow: 0 1px 2px rgba(0,0,0,0.04);
}
.equation-display {
font-size: 1.5rem;
font-weight: bold;
text-align: center;
margin-bottom: 1.5rem;
color: #333;
}
.input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 1.5rem 2rem;
margin-bottom: 1.5rem;
}
.input-group {
display: flex;
flex-direction: column;
}
.input-group label {
font-weight: bold;
margin-bottom: 0.5rem;
color: #495057;
}
.input-group input[type="number"], .input-group input[type="text"] {
padding: 0.75rem;
border: 1px solid #ced4da;
border-radius: 4px;
font-size: 1rem;
transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}
.solver-button-container {
text-align: center;
margin-top: 1rem;
}
.solver-button {
padding: 0.75rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 4px;
font-size: 1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.2s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #e9ecef;
border-radius: 6px;
border: 1px solid #ced4da;
font-size: 1.1rem;
font-family: monospace;
color: #212529;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
.solution-highlight {
font-weight: bold;
color: green;
}
html:is(.dark) {
.quadratic-solver-container {
background-color: #23272f;
border-color: #343a40;
box-shadow: 0 4px 12px rgba(0,0,0,0.32);
color: #f1f3f5;
}
.equation-display {
color: #e9ecef;
}
.input-group label {
color: #ced4da;
}
.input-group input[type="number"], .input-group input[type="text"] {
background-color: #181a1b;
border-color: #495057;
color: #f1f3f5;
}
.input-group input:focus {
border-color: #66b2ff;
box-shadow: 0 0 5px rgba(102, 178, 255, 0.5);
}
.solver-button {
background-color: #339af0;
color: #fff;
}
.solver-button:hover {
background-color: #1971c2;
}
.solver-result {
background-color: #2b3035;
border-color: #495057;
color: #f1f3f5;
}
.solver-error {
color: #ff6b6b;
}
.solution-highlight {
color: #51cf66;
}
}
@media (max-width: 600px) {
.quadratic-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.1rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem 0;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
.solver-button {
width: 100%;
padding: 0.75rem 0;
}
}
&lt;/style>
&lt;div class="quadratic-solver-container mona-sans">
&lt;h3 class="calc-title">Quadratic Equation Solver&lt;/h3>
&lt;div class="equation-display">
&lt;span id="a-display-4">a&lt;/span>x² +
&lt;span id="b-display-4">b&lt;/span>x +
&lt;span id="c-display-4">c&lt;/span> = 0
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-4">a (coefficient of x²):&lt;/label>
&lt;input type="number" id="a-input-4" value="1" oninput="updateDisplay('a', this.value, '4')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-4">b (coefficient of x):&lt;/label>
&lt;input type="number" id="b-input-4" value="0" oninput="updateDisplay('b', this.value, '4')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-4">c (constant):&lt;/label>
&lt;input type="number" id="c-input-4" value="0" oninput="updateDisplay('c', this.value, '4')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="var-input-4">Variable:&lt;/label>
&lt;input type="text" id="var-input-4" value="x" oninput="updateDisplay('var', this.value, '4')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="solveQuadraticEquation('4')">Solve Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-4">
Solutions will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateDisplay = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
window.solveQuadraticEquation = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const varInput = document.getElementById('var-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
const variable = varInput.value || 'x';
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
if (b === 0) {
if (c === 0) {
solutionOutput.innerHTML = `Solution: &lt;span class="solution-highlight">Infinite solutions.&lt;/span>`;
} else {
solutionOutput.innerHTML = `Solution: &lt;span class="solver-error">No solution.&lt;/span>`;
}
return;
}
const linearSolution = -c / b;
solutionOutput.innerHTML = `This is a linear equation. Solution for ${variable}: &lt;span class="solution-highlight">${math.format(linearSolution, {precision: 5})}&lt;/span>`;
return;
}
const expression = `${a}*${variable}^2 + ${b}*${variable} + ${c}`;
const discriminant = b * b - 4 * a * c;
if (discriminant > 0) {
const root1 = (-b + math.sqrt(discriminant)) / (2 * a);
const root2 = (-b - math.sqrt(discriminant)) / (2 * a);
solutionOutput.innerHTML = `Solutions for ${variable}: &lt;span class="solution-highlight">${math.format(root1, {precision: 5})}, ${math.format(root2, {precision: 5})}&lt;/span>`;
} else if (discriminant === 0) {
const root = -b / (2 * a);
solutionOutput.innerHTML = `Single solution for ${variable}: &lt;span class="solution-highlight">${math.format(root, {precision: 5})}&lt;/span>`;
} else {
const realPart = -b / (2 * a);
const imagPart = math.sqrt(-discriminant) / (2 * a);
solutionOutput.innerHTML = `Complex solutions for ${variable}: &lt;span class="solution-highlight">${math.format(math.complex(realPart, imagPart), {precision: 5})}, ${math.format(math.complex(realPart, -imagPart), {precision: 5})}&lt;/span>`;
}
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '4';
updateDisplay('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateDisplay('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateDisplay('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;p>This interactive tool uses pure JavaScript to find the vertex, focus, and directrix for any parabola in the form $y = ax^2 + bx + c$.&lt;/p>
&lt;h3>Example 1: A simple parabola&lt;span class="hx-absolute -hx-mt-20" id="example-1-a-simple-parabola">&lt;/span>
&lt;a href="#example-1-a-simple-parabola" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Solve for the properties of $y = 0.5x^2 + 2x - 3$.
&lt;style>
.parabola-solver-container {
max-width: 650px;
margin: 2rem auto;
padding: 2rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-solver-container h3 {
text-align: center;
color: #0056b3;
margin-bottom: 1.5rem;
font-size: 1.8rem;
}
.equation-display {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
}
.input-group input[type="number"] {
width: 100%;
max-width: 120px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.32);
}
.parabola-solver-container h3 {
color: #7bb6ff;
}
.equation-display {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.input-group label {
color: #b3c7e6;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.input-group input:focus {
border-color: #339cff;
box-shadow: 0 0 8px rgba(51, 156, 255, 0.4);
}
.solver-button {
background-color: #339cff;
color: #fff;
}
.solver-button:hover {
background-color: #1976d2;
}
.solver-result {
background-color: #1a273a;
border-color: #35507a;
color: #e0e6ef;
}
.result-label {
color: #7bb6ff;
}
.result-value {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.2rem;
padding: 0.6rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-solver-container">
&lt;h3>Parabola Properties Calculator (JS Only)&lt;/h3>
&lt;div class="equation-display">
y = &lt;span id="a-display-5">a&lt;/span>x² + &lt;span id="b-display-5">b&lt;/span>x + &lt;span id="c-display-5">c&lt;/span>
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-5">a:&lt;/label>
&lt;input type="number" id="a-input-5" value="0.5" oninput="updateParabolaDisplayJS('a', this.value, '5')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-5">b:&lt;/label>
&lt;input type="number" id="b-input-5" value="2" oninput="updateParabolaDisplayJS('b', this.value, '5')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-5">c:&lt;/label>
&lt;input type="number" id="c-input-5" value="-3" oninput="updateParabolaDisplayJS('c', this.value, '5')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateParabolaPropertiesJS('5')">Calculate Properties&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="results-output-5">
Results will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateParabolaDisplayJS = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
function formatNumber(num, precision = 6) {
if (typeof num !== 'number' || isNaN(num)) {
return 'N/A';
}
return num.toFixed(precision);
}
window.calculateParabolaPropertiesJS = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const resultsOutput = document.getElementById('results-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
resultsOutput.innerHTML = '&lt;span class="solver-error">Error: "a" cannot be 0. This is a linear equation, not a parabola.&lt;/span>';
return;
}
const vertexX = -b / (2 * a);
const vertexY = (a * Math.pow(vertexX, 2)) + (b * vertexX) + c;
const focusY = (4 * a * c - Math.pow(b, 2) + 1) / (4 * a);
const directrixY = (4 * a * c - Math.pow(b, 2) - 1) / (4 * a);
const vertexXFormatted = formatNumber(vertexX);
const vertexYFormatted = formatNumber(vertexY);
const focusYFormatted = formatNumber(focusY);
const directrixYFormatted = formatNumber(directrixY);
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Vertex:&lt;/span> &lt;span class="result-value">(${vertexXFormatted}, ${vertexYFormatted})&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Focus:&lt;/span> &lt;span class="result-value">(${vertexXFormatted}, ${focusYFormatted})&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Directrix:&lt;/span> &lt;span class="result-value">y = ${directrixYFormatted}&lt;/span>&lt;/div>
`;
resultsOutput.innerHTML = resultHTML;
} catch (error) {
resultsOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Parabola solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '5';
updateParabolaDisplayJS('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateParabolaDisplayJS('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateParabolaDisplayJS('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: Another example&lt;span class="hx-absolute -hx-mt-20" id="example-2-another-example">&lt;/span>
&lt;a href="#example-2-another-example" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Solve for the properties of $y = -x^2 + 6x - 8$.
&lt;style>
.parabola-solver-container {
max-width: 650px;
margin: 2rem auto;
padding: 2rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-solver-container h3 {
text-align: center;
color: #0056b3;
margin-bottom: 1.5rem;
font-size: 1.8rem;
}
.equation-display {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
}
.input-group input[type="number"] {
width: 100%;
max-width: 120px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.32);
}
.parabola-solver-container h3 {
color: #7bb6ff;
}
.equation-display {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.input-group label {
color: #b3c7e6;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.input-group input:focus {
border-color: #339cff;
box-shadow: 0 0 8px rgba(51, 156, 255, 0.4);
}
.solver-button {
background-color: #339cff;
color: #fff;
}
.solver-button:hover {
background-color: #1976d2;
}
.solver-result {
background-color: #1a273a;
border-color: #35507a;
color: #e0e6ef;
}
.result-label {
color: #7bb6ff;
}
.result-value {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.2rem;
padding: 0.6rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-solver-container">
&lt;h3>Parabola Properties Calculator (JS Only)&lt;/h3>
&lt;div class="equation-display">
y = &lt;span id="a-display-6">a&lt;/span>x² + &lt;span id="b-display-6">b&lt;/span>x + &lt;span id="c-display-6">c&lt;/span>
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-6">a:&lt;/label>
&lt;input type="number" id="a-input-6" value="-1" oninput="updateParabolaDisplayJS('a', this.value, '6')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-6">b:&lt;/label>
&lt;input type="number" id="b-input-6" value="6" oninput="updateParabolaDisplayJS('b', this.value, '6')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-6">c:&lt;/label>
&lt;input type="number" id="c-input-6" value="-8" oninput="updateParabolaDisplayJS('c', this.value, '6')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateParabolaPropertiesJS('6')">Calculate Properties&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="results-output-6">
Results will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateParabolaDisplayJS = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
function formatNumber(num, precision = 6) {
if (typeof num !== 'number' || isNaN(num)) {
return 'N/A';
}
return num.toFixed(precision);
}
window.calculateParabolaPropertiesJS = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const resultsOutput = document.getElementById('results-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
resultsOutput.innerHTML = '&lt;span class="solver-error">Error: "a" cannot be 0. This is a linear equation, not a parabola.&lt;/span>';
return;
}
const vertexX = -b / (2 * a);
const vertexY = (a * Math.pow(vertexX, 2)) + (b * vertexX) + c;
const focusY = (4 * a * c - Math.pow(b, 2) + 1) / (4 * a);
const directrixY = (4 * a * c - Math.pow(b, 2) - 1) / (4 * a);
const vertexXFormatted = formatNumber(vertexX);
const vertexYFormatted = formatNumber(vertexY);
const focusYFormatted = formatNumber(focusY);
const directrixYFormatted = formatNumber(directrixY);
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Vertex:&lt;/span> &lt;span class="result-value">(${vertexXFormatted}, ${vertexYFormatted})&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Focus:&lt;/span> &lt;span class="result-value">(${vertexXFormatted}, ${focusYFormatted})&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Directrix:&lt;/span> &lt;span class="result-value">y = ${directrixYFormatted}&lt;/span>&lt;/div>
`;
resultsOutput.innerHTML = resultHTML;
} catch (error) {
resultsOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Parabola solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '6';
updateParabolaDisplayJS('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateParabolaDisplayJS('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateParabolaDisplayJS('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Try your own&lt;span class="hx-absolute -hx-mt-20" id="try-your-own">&lt;/span>
&lt;a href="#try-your-own" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Enter your own coefficients below.
&lt;style>
.parabola-solver-container {
max-width: 650px;
margin: 2rem auto;
padding: 2rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-solver-container h3 {
text-align: center;
color: #0056b3;
margin-bottom: 1.5rem;
font-size: 1.8rem;
}
.equation-display {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
}
.input-group input[type="number"] {
width: 100%;
max-width: 120px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.32);
}
.parabola-solver-container h3 {
color: #7bb6ff;
}
.equation-display {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.input-group label {
color: #b3c7e6;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.input-group input:focus {
border-color: #339cff;
box-shadow: 0 0 8px rgba(51, 156, 255, 0.4);
}
.solver-button {
background-color: #339cff;
color: #fff;
}
.solver-button:hover {
background-color: #1976d2;
}
.solver-result {
background-color: #1a273a;
border-color: #35507a;
color: #e0e6ef;
}
.result-label {
color: #7bb6ff;
}
.result-value {
background-color: #232a36;
color: #e0e6ef;
border-color: #35507a;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-solver-container {
padding: 1rem;
max-width: 98vw;
}
.equation-display {
font-size: 1.2rem;
padding: 0.6rem;
}
.input-grid {
grid-template-columns: 1fr;
gap: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-solver-container">
&lt;h3>Parabola Properties Calculator (JS Only)&lt;/h3>
&lt;div class="equation-display">
y = &lt;span id="a-display-7">a&lt;/span>x² + &lt;span id="b-display-7">b&lt;/span>x + &lt;span id="c-display-7">c&lt;/span>
&lt;/div>
&lt;div class="input-grid">
&lt;div class="input-group">
&lt;label for="a-input-7">a:&lt;/label>
&lt;input type="number" id="a-input-7" value="1" oninput="updateParabolaDisplayJS('a', this.value, '7')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="b-input-7">b:&lt;/label>
&lt;input type="number" id="b-input-7" value="0" oninput="updateParabolaDisplayJS('b', this.value, '7')">
&lt;/div>
&lt;div class="input-group">
&lt;label for="c-input-7">c:&lt;/label>
&lt;input type="number" id="c-input-7" value="0" oninput="updateParabolaDisplayJS('c', this.value, '7')">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateParabolaPropertiesJS('7')">Calculate Properties&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="results-output-7">
Results will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.updateParabolaDisplayJS = function(param, value, ordinal) {
const displayElement = document.getElementById(param + '-display-' + ordinal);
if (displayElement) {
displayElement.textContent = value;
}
}
function formatNumber(num, precision = 6) {
if (typeof num !== 'number' || isNaN(num)) {
return 'N/A';
}
return num.toFixed(precision);
}
window.calculateParabolaPropertiesJS = function(ordinal) {
const aInput = document.getElementById('a-input-' + ordinal);
const bInput = document.getElementById('b-input-' + ordinal);
const cInput = document.getElementById('c-input-' + ordinal);
const resultsOutput = document.getElementById('results-output-' + ordinal);
const a = parseFloat(aInput.value);
const b = parseFloat(bInput.value);
const c = parseFloat(cInput.value);
try {
if (isNaN(a) || isNaN(b) || isNaN(c)) {
throw new Error("Please enter valid numbers for a, b, and c.");
}
if (a === 0) {
resultsOutput.innerHTML = '&lt;span class="solver-error">Error: "a" cannot be 0. This is a linear equation, not a parabola.&lt;/span>';
return;
}
const vertexX = -b / (2 * a);
const vertexY = (a * Math.pow(vertexX, 2)) + (b * vertexX) + c;
const focusY = (4 * a * c - Math.pow(b, 2) + 1) / (4 * a);
const directrixY = (4 * a * c - Math.pow(b, 2) - 1) / (4 * a);
const vertexXFormatted = formatNumber(vertexX);
const vertexYFormatted = formatNumber(vertexY);
const focusYFormatted = formatNumber(focusY);
const directrixYFormatted = formatNumber(directrixY);
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Vertex:&lt;/span> &lt;span class="result-value">(${vertexXFormatted}, ${vertexYFormatted})&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Focus:&lt;/span> &lt;span class="result-value">(${vertexXFormatted}, ${focusYFormatted})&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Directrix:&lt;/span> &lt;span class="result-value">y = ${directrixYFormatted}&lt;/span>&lt;/div>
`;
resultsOutput.innerHTML = resultHTML;
} catch (error) {
resultsOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Parabola solver error:", error);
}
}
document.addEventListener('DOMContentLoaded', () => {
setTimeout(() => {
const ordinal = '7';
updateParabolaDisplayJS('a', document.getElementById('a-input-' + ordinal).value, ordinal);
updateParabolaDisplayJS('b', document.getElementById('b-input-' + ordinal).value, ordinal);
updateParabolaDisplayJS('c', document.getElementById('c-input-' + ordinal).value, ordinal);
}, 100);
});
&lt;/script>&lt;/p>
&lt;p>This tool finds the unique parabola equation ($y = ax^2 + bx + c$) that passes through two given points and has a specific slope at the first point.&lt;/p>
&lt;h3>Example 1: Finding a Simple Parabola&lt;span class="hx-absolute -hx-mt-20" id="example-1-finding-a-simple-parabola">&lt;/span>
&lt;a href="#example-1-finding-a-simple-parabola" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Let&amp;rsquo;s find the equation for the parabola passing through (0, 1) and (2, 5) with a slope of 2 at x=0.
(The answer should be y = x² + 2x + 1)
&lt;script src="/js/math.min.js">&lt;/script>
&lt;style>
.parabola-eq-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-eq-solver-container h3 {
text-align: center;
color: #0056b3;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.parabola-equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
}
.input-group input[type="number"] {
width: 100%;
max-width: 120px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-eq-solver-container {
background-color: #181c24;
border: 1px solid #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0,0,0,0.32);
}
.parabola-eq-solver-container h3 {
color: #7ec3ff;
}
.parabola-equation-formula {
background-color: #1a2230;
color: #e0e6ef;
border: 1px dashed #3a6ea8;
}
.input-group label {
color: #b3c9e7;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border: 1px solid #3a6ea8;
}
.input-group input:focus {
border-color: #7ec3ff;
box-shadow: 0 0 8px rgba(126,195,255,0.25);
}
.solver-button {
background-color: #3a6ea8;
color: #fff;
}
.solver-button:hover {
background-color: #7ec3ff;
color: #181c24;
}
.solver-result {
background-color: #232a36;
border: 1px solid #3a6ea8;
color: #e0e6ef;
}
.result-label {
color: #7ec3ff;
}
.result-value {
background-color: #181c24;
color: #e0e6ef;
border: 1px solid #3a6ea8;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-eq-solver-container {
padding: 1rem;
max-width: 98vw;
}
.parabola-eq-solver-container h3 {
font-size: 1.2rem;
margin-bottom: 1rem;
}
.parabola-equation-formula {
font-size: 1.1rem;
padding: 0.6rem;
margin-bottom: 1rem;
}
.input-row {
flex-direction: column;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.6rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-eq-solver-container">
&lt;h3>Parabola Equation from Two Points and Slope&lt;/h3>
&lt;div class="parabola-equation-formula">
y = ax² + bx + c
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-8" value="0">
&lt;input type="number" id="y1-input-8" value="1">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-8" value="2">
&lt;input type="number" id="y2-input-8" value="5">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope (m) at x₁:&lt;/label>
&lt;input type="number" id="slope-input-8" value="2">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findParabolaEquation('8')">Find Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="equation-output-8">
Equation coefficients will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findParabolaEquation = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m = parseFloat(document.getElementById('slope-input-' + ordinal).value);
const output = document.getElementById('equation-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(m)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different.");
}
const A_matrix = [
[x1*x1, x1, 1],
[x2*x2, x2, 1],
[2 * x1, 1, 0]
];
const B_vector = [y1, y2, m];
const solution = math.lusolve(A_matrix, B_vector);
if (!solution || solution.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution. Please check the input values.&lt;/span>';
return;
}
const a = math.format(solution[0][0], { precision: 6 });
const b = math.format(solution[1][0], { precision: 6 });
const c = math.format(solution[2][0], { precision: 6 });
const equation = `y = ${a}x² ${b >= 0 ? '+' : ''} ${b}x ${c >= 0 ? '+' : ''} ${c}`;
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Coefficient a:&lt;/span> &lt;span class="result-value">${a}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient b:&lt;/span> &lt;span class="result-value">${b}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient c:&lt;/span> &lt;span class="result-value">${c}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">&lt;span class="result-label">Parabola Equation:&lt;/span> &lt;span class="result-value">${equation}&lt;/span>&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Parabola equation solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: Another Case&lt;span class="hx-absolute -hx-mt-20" id="example-2-another-case">&lt;/span>
&lt;a href="#example-2-another-case" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Find the parabola passing through (1, 6) and (3, 2) with a slope of 5 at x=1.
&lt;script src="/js/math.min.js">&lt;/script>
&lt;style>
.parabola-eq-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-eq-solver-container h3 {
text-align: center;
color: #0056b3;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.parabola-equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
}
.input-group input[type="number"] {
width: 100%;
max-width: 120px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-eq-solver-container {
background-color: #181c24;
border: 1px solid #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0,0,0,0.32);
}
.parabola-eq-solver-container h3 {
color: #7ec3ff;
}
.parabola-equation-formula {
background-color: #1a2230;
color: #e0e6ef;
border: 1px dashed #3a6ea8;
}
.input-group label {
color: #b3c9e7;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border: 1px solid #3a6ea8;
}
.input-group input:focus {
border-color: #7ec3ff;
box-shadow: 0 0 8px rgba(126,195,255,0.25);
}
.solver-button {
background-color: #3a6ea8;
color: #fff;
}
.solver-button:hover {
background-color: #7ec3ff;
color: #181c24;
}
.solver-result {
background-color: #232a36;
border: 1px solid #3a6ea8;
color: #e0e6ef;
}
.result-label {
color: #7ec3ff;
}
.result-value {
background-color: #181c24;
color: #e0e6ef;
border: 1px solid #3a6ea8;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-eq-solver-container {
padding: 1rem;
max-width: 98vw;
}
.parabola-eq-solver-container h3 {
font-size: 1.2rem;
margin-bottom: 1rem;
}
.parabola-equation-formula {
font-size: 1.1rem;
padding: 0.6rem;
margin-bottom: 1rem;
}
.input-row {
flex-direction: column;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.6rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-eq-solver-container">
&lt;h3>Parabola Equation from Two Points and Slope&lt;/h3>
&lt;div class="parabola-equation-formula">
y = ax² + bx + c
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-9" value="1">
&lt;input type="number" id="y1-input-9" value="6">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-9" value="3">
&lt;input type="number" id="y2-input-9" value="2">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope (m) at x₁:&lt;/label>
&lt;input type="number" id="slope-input-9" value="5">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findParabolaEquation('9')">Find Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="equation-output-9">
Equation coefficients will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findParabolaEquation = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m = parseFloat(document.getElementById('slope-input-' + ordinal).value);
const output = document.getElementById('equation-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(m)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different.");
}
const A_matrix = [
[x1*x1, x1, 1],
[x2*x2, x2, 1],
[2 * x1, 1, 0]
];
const B_vector = [y1, y2, m];
const solution = math.lusolve(A_matrix, B_vector);
if (!solution || solution.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution. Please check the input values.&lt;/span>';
return;
}
const a = math.format(solution[0][0], { precision: 6 });
const b = math.format(solution[1][0], { precision: 6 });
const c = math.format(solution[2][0], { precision: 6 });
const equation = `y = ${a}x² ${b >= 0 ? '+' : ''} ${b}x ${c >= 0 ? '+' : ''} ${c}`;
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Coefficient a:&lt;/span> &lt;span class="result-value">${a}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient b:&lt;/span> &lt;span class="result-value">${b}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient c:&lt;/span> &lt;span class="result-value">${c}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">&lt;span class="result-label">Parabola Equation:&lt;/span> &lt;span class="result-value">${equation}&lt;/span>&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Parabola equation solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Your Own Points&lt;span class="hx-absolute -hx-mt-20" id="your-own-points">&lt;/span>
&lt;a href="#your-own-points" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Enter your own points and slope to find the equation.
&lt;script src="/js/math.min.js">&lt;/script>
&lt;style>
.parabola-eq-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-eq-solver-container h3 {
text-align: center;
color: #0056b3;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.parabola-equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
}
.input-group input[type="number"] {
width: 100%;
max-width: 120px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-eq-solver-container {
background-color: #181c24;
border: 1px solid #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0,0,0,0.32);
}
.parabola-eq-solver-container h3 {
color: #7ec3ff;
}
.parabola-equation-formula {
background-color: #1a2230;
color: #e0e6ef;
border: 1px dashed #3a6ea8;
}
.input-group label {
color: #b3c9e7;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border: 1px solid #3a6ea8;
}
.input-group input:focus {
border-color: #7ec3ff;
box-shadow: 0 0 8px rgba(126,195,255,0.25);
}
.solver-button {
background-color: #3a6ea8;
color: #fff;
}
.solver-button:hover {
background-color: #7ec3ff;
color: #181c24;
}
.solver-result {
background-color: #232a36;
border: 1px solid #3a6ea8;
color: #e0e6ef;
}
.result-label {
color: #7ec3ff;
}
.result-value {
background-color: #181c24;
color: #e0e6ef;
border: 1px solid #3a6ea8;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-eq-solver-container {
padding: 1rem;
max-width: 98vw;
}
.parabola-eq-solver-container h3 {
font-size: 1.2rem;
margin-bottom: 1rem;
}
.parabola-equation-formula {
font-size: 1.1rem;
padding: 0.6rem;
margin-bottom: 1rem;
}
.input-row {
flex-direction: column;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.6rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-eq-solver-container">
&lt;h3>Parabola Equation from Two Points and Slope&lt;/h3>
&lt;div class="parabola-equation-formula">
y = ax² + bx + c
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-10" value="0">
&lt;input type="number" id="y1-input-10" value="1">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-10" value="2">
&lt;input type="number" id="y2-input-10" value="5">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope (m) at x₁:&lt;/label>
&lt;input type="number" id="slope-input-10" value="2">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findParabolaEquation('10')">Find Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="equation-output-10">
Equation coefficients will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findParabolaEquation = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m = parseFloat(document.getElementById('slope-input-' + ordinal).value);
const output = document.getElementById('equation-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(m)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different.");
}
const A_matrix = [
[x1*x1, x1, 1],
[x2*x2, x2, 1],
[2 * x1, 1, 0]
];
const B_vector = [y1, y2, m];
const solution = math.lusolve(A_matrix, B_vector);
if (!solution || solution.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution. Please check the input values.&lt;/span>';
return;
}
const a = math.format(solution[0][0], { precision: 6 });
const b = math.format(solution[1][0], { precision: 6 });
const c = math.format(solution[2][0], { precision: 6 });
const equation = `y = ${a}x² ${b >= 0 ? '+' : ''} ${b}x ${c >= 0 ? '+' : ''} ${c}`;
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Coefficient a:&lt;/span> &lt;span class="result-value">${a}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient b:&lt;/span> &lt;span class="result-value">${b}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient c:&lt;/span> &lt;span class="result-value">${c}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">&lt;span class="result-label">Parabola Equation:&lt;/span> &lt;span class="result-value">${equation}&lt;/span>&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Parabola equation solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;p>This tool finds the unique cubic equation ($y = ax^3 + bx^2 + cx + d$) that passes through two given points and has a specific slope at each of those points.&lt;/p>
&lt;h3>Example 1: Finding a Simple Cubic&lt;span class="hx-absolute -hx-mt-20" id="example-1-finding-a-simple-cubic">&lt;/span>
&lt;a href="#example-1-finding-a-simple-cubic" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Find the equation for the cubic passing through (0, 1) and (2, 9) with slopes of 0 and 12 at those points.
(The answer should be y = x³ + 1)
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.cubic-eq-solver-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fefefe;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.cubic-eq-solver-container h3 {
text-align: center;
color: #8c00b3;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.cubic-equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f7e6ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #e0c2ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-group input[type="number"] {
width: 100%;
max-width: 150px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #8c00b3;
box-shadow: 0 0 8px rgba(140, 0, 179, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #8c00b3;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #6a008c;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #f3e6ff;
border-radius: 10px;
border: 1px solid #c299e6;
line-height: 1.8;
font-size: 1.1rem;
color: #2e003a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #8c00b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #e0c2ff;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.cubic-eq-solver-container {
background-color: #1a1622;
border-color: #32284a;
color: #e6e1f7;
box-shadow: 0 6px 20px rgba(0,0,0,0.35);
}
.cubic-eq-solver-container h3 {
color: #e08cff;
}
.cubic-equation-formula {
background-color: #2d1e3a;
color: #f3e6ff;
border-color: #6a3fa7;
}
.input-group label {
color: #bfa7e6;
}
.input-group input[type="number"] {
background-color: #221b2e;
color: #f3e6ff;
border-color: #4a3570;
}
.input-group input:focus {
border-color: #e08cff;
box-shadow: 0 0 8px rgba(224, 140, 255, 0.3);
}
.solver-button {
background-color: #e08cff;
color: #1a1622;
}
.solver-button:hover {
background-color: #b366d6;
}
.solver-result {
background-color: #2d1e3a;
border-color: #6a3fa7;
color: #f3e6ff;
}
.result-label {
color: #e08cff;
}
.result-value {
background-color: #1a1622;
border-color: #6a3fa7;
color: #f3e6ff;
}
.solver-error {
color: #ff6b8a;
}
}
@media (max-width: 600px) {
.cubic-eq-solver-container {
padding: 1rem;
max-width: 98vw;
}
.cubic-equation-formula {
font-size: 1.2rem;
padding: 0.5rem;
}
.input-row {
flex-direction: column;
gap: 0.8rem;
margin-bottom: 1.2rem;
}
.input-group {
flex: 1 1 100%;
align-items: stretch;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.6rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="cubic-eq-solver-container">
&lt;h3>Cubic Equation from Two Points and Two Slopes&lt;/h3>
&lt;div class="parabola-equation-formula">
y = ax³ + bx² + cx + d
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-11" value="0">
&lt;input type="number" id="y1-input-11" value="1">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₁ (m₁):&lt;/label>
&lt;input type="number" id="m1-input-11" value="0">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-11" value="2">
&lt;input type="number" id="y2-input-11" value="9">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₂ (m₂):&lt;/label>
&lt;input type="number" id="m2-input-11" value="12">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findCubicEquation('11')">Find Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="equation-output-11">
Equation coefficients will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findCubicEquation = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const m1 = parseFloat(document.getElementById('m1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m2 = parseFloat(document.getElementById('m2-input-' + ordinal).value);
const output = document.getElementById('equation-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(m1) || isNaN(x2) || isNaN(y2) || isNaN(m2)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different.");
}
const A_matrix = [
[x1*x1*x1, x1*x1, x1, 1],
[x2*x2*x2, x2*x2, x2, 1],
[3*x1*x1, 2*x1, 1, 0],
[3*x2*x2, 2*x2, 1, 0]
];
const B_vector = [y1, y2, m1, m2];
const solution = math.lusolve(A_matrix, B_vector);
if (!solution || solution.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution. Please check the input values.&lt;/span>';
return;
}
const a = math.format(solution[0][0], { precision: 6 });
const b = math.format(solution[1][0], { precision: 6 });
const c = math.format(solution[2][0], { precision: 6 });
const d = math.format(solution[3][0], { precision: 6 });
const equation = `y = ${a}x³ ${b >= 0 ? '+' : ''} ${b}x² ${c >= 0 ? '+' : ''} ${c}x ${d >= 0 ? '+' : ''} ${d}`;
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Coefficient a:&lt;/span> &lt;span class="result-value">${a}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient b:&lt;/span> &lt;span class="result-value">${b}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient c:&lt;/span> &lt;span class="result-value">${c}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient d:&lt;/span> &lt;span class="result-value">${d}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #c299e6;">
&lt;div class="result-item">&lt;span class="result-label">Cubic Equation:&lt;/span> &lt;span class="result-value">${equation}&lt;/span>&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Cubic equation solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: Another Case&lt;span class="hx-absolute -hx-mt-20" id="example-2-another-case-1">&lt;/span>
&lt;a href="#example-2-another-case-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Find the cubic passing through (-1, 0) and (1, 4) with slopes of 3 and 15 at those points.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.cubic-eq-solver-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fefefe;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.cubic-eq-solver-container h3 {
text-align: center;
color: #8c00b3;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.cubic-equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f7e6ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #e0c2ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-group input[type="number"] {
width: 100%;
max-width: 150px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #8c00b3;
box-shadow: 0 0 8px rgba(140, 0, 179, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #8c00b3;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #6a008c;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #f3e6ff;
border-radius: 10px;
border: 1px solid #c299e6;
line-height: 1.8;
font-size: 1.1rem;
color: #2e003a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #8c00b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #e0c2ff;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.cubic-eq-solver-container {
background-color: #1a1622;
border-color: #32284a;
color: #e6e1f7;
box-shadow: 0 6px 20px rgba(0,0,0,0.35);
}
.cubic-eq-solver-container h3 {
color: #e08cff;
}
.cubic-equation-formula {
background-color: #2d1e3a;
color: #f3e6ff;
border-color: #6a3fa7;
}
.input-group label {
color: #bfa7e6;
}
.input-group input[type="number"] {
background-color: #221b2e;
color: #f3e6ff;
border-color: #4a3570;
}
.input-group input:focus {
border-color: #e08cff;
box-shadow: 0 0 8px rgba(224, 140, 255, 0.3);
}
.solver-button {
background-color: #e08cff;
color: #1a1622;
}
.solver-button:hover {
background-color: #b366d6;
}
.solver-result {
background-color: #2d1e3a;
border-color: #6a3fa7;
color: #f3e6ff;
}
.result-label {
color: #e08cff;
}
.result-value {
background-color: #1a1622;
border-color: #6a3fa7;
color: #f3e6ff;
}
.solver-error {
color: #ff6b8a;
}
}
@media (max-width: 600px) {
.cubic-eq-solver-container {
padding: 1rem;
max-width: 98vw;
}
.cubic-equation-formula {
font-size: 1.2rem;
padding: 0.5rem;
}
.input-row {
flex-direction: column;
gap: 0.8rem;
margin-bottom: 1.2rem;
}
.input-group {
flex: 1 1 100%;
align-items: stretch;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.6rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="cubic-eq-solver-container">
&lt;h3>Cubic Equation from Two Points and Two Slopes&lt;/h3>
&lt;div class="parabola-equation-formula">
y = ax³ + bx² + cx + d
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-12" value="-1">
&lt;input type="number" id="y1-input-12" value="0">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₁ (m₁):&lt;/label>
&lt;input type="number" id="m1-input-12" value="3">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-12" value="1">
&lt;input type="number" id="y2-input-12" value="4">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₂ (m₂):&lt;/label>
&lt;input type="number" id="m2-input-12" value="15">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findCubicEquation('12')">Find Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="equation-output-12">
Equation coefficients will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findCubicEquation = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const m1 = parseFloat(document.getElementById('m1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m2 = parseFloat(document.getElementById('m2-input-' + ordinal).value);
const output = document.getElementById('equation-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(m1) || isNaN(x2) || isNaN(y2) || isNaN(m2)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different.");
}
const A_matrix = [
[x1*x1*x1, x1*x1, x1, 1],
[x2*x2*x2, x2*x2, x2, 1],
[3*x1*x1, 2*x1, 1, 0],
[3*x2*x2, 2*x2, 1, 0]
];
const B_vector = [y1, y2, m1, m2];
const solution = math.lusolve(A_matrix, B_vector);
if (!solution || solution.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution. Please check the input values.&lt;/span>';
return;
}
const a = math.format(solution[0][0], { precision: 6 });
const b = math.format(solution[1][0], { precision: 6 });
const c = math.format(solution[2][0], { precision: 6 });
const d = math.format(solution[3][0], { precision: 6 });
const equation = `y = ${a}x³ ${b >= 0 ? '+' : ''} ${b}x² ${c >= 0 ? '+' : ''} ${c}x ${d >= 0 ? '+' : ''} ${d}`;
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Coefficient a:&lt;/span> &lt;span class="result-value">${a}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient b:&lt;/span> &lt;span class="result-value">${b}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient c:&lt;/span> &lt;span class="result-value">${c}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient d:&lt;/span> &lt;span class="result-value">${d}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #c299e6;">
&lt;div class="result-item">&lt;span class="result-label">Cubic Equation:&lt;/span> &lt;span class="result-value">${equation}&lt;/span>&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Cubic equation solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Your Own Points and Slopes&lt;span class="hx-absolute -hx-mt-20" id="your-own-points-and-slopes">&lt;/span>
&lt;a href="#your-own-points-and-slopes" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Enter your own values to find the equation.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.cubic-eq-solver-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fefefe;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.cubic-eq-solver-container h3 {
text-align: center;
color: #8c00b3;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.cubic-equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f7e6ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #e0c2ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-group input[type="number"] {
width: 100%;
max-width: 150px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #8c00b3;
box-shadow: 0 0 8px rgba(140, 0, 179, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #8c00b3;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #6a008c;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #f3e6ff;
border-radius: 10px;
border: 1px solid #c299e6;
line-height: 1.8;
font-size: 1.1rem;
color: #2e003a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #8c00b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #e0c2ff;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.cubic-eq-solver-container {
background-color: #1a1622;
border-color: #32284a;
color: #e6e1f7;
box-shadow: 0 6px 20px rgba(0,0,0,0.35);
}
.cubic-eq-solver-container h3 {
color: #e08cff;
}
.cubic-equation-formula {
background-color: #2d1e3a;
color: #f3e6ff;
border-color: #6a3fa7;
}
.input-group label {
color: #bfa7e6;
}
.input-group input[type="number"] {
background-color: #221b2e;
color: #f3e6ff;
border-color: #4a3570;
}
.input-group input:focus {
border-color: #e08cff;
box-shadow: 0 0 8px rgba(224, 140, 255, 0.3);
}
.solver-button {
background-color: #e08cff;
color: #1a1622;
}
.solver-button:hover {
background-color: #b366d6;
}
.solver-result {
background-color: #2d1e3a;
border-color: #6a3fa7;
color: #f3e6ff;
}
.result-label {
color: #e08cff;
}
.result-value {
background-color: #1a1622;
border-color: #6a3fa7;
color: #f3e6ff;
}
.solver-error {
color: #ff6b8a;
}
}
@media (max-width: 600px) {
.cubic-eq-solver-container {
padding: 1rem;
max-width: 98vw;
}
.cubic-equation-formula {
font-size: 1.2rem;
padding: 0.5rem;
}
.input-row {
flex-direction: column;
gap: 0.8rem;
margin-bottom: 1.2rem;
}
.input-group {
flex: 1 1 100%;
align-items: stretch;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.6rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="cubic-eq-solver-container">
&lt;h3>Cubic Equation from Two Points and Two Slopes&lt;/h3>
&lt;div class="parabola-equation-formula">
y = ax³ + bx² + cx + d
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-13" value="0">
&lt;input type="number" id="y1-input-13" value="1">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₁ (m₁):&lt;/label>
&lt;input type="number" id="m1-input-13" value="0">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-13" value="2">
&lt;input type="number" id="y2-input-13" value="9">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₂ (m₂):&lt;/label>
&lt;input type="number" id="m2-input-13" value="12">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findCubicEquation('13')">Find Equation&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="equation-output-13">
Equation coefficients will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findCubicEquation = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const m1 = parseFloat(document.getElementById('m1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m2 = parseFloat(document.getElementById('m2-input-' + ordinal).value);
const output = document.getElementById('equation-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(m1) || isNaN(x2) || isNaN(y2) || isNaN(m2)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different.");
}
const A_matrix = [
[x1*x1*x1, x1*x1, x1, 1],
[x2*x2*x2, x2*x2, x2, 1],
[3*x1*x1, 2*x1, 1, 0],
[3*x2*x2, 2*x2, 1, 0]
];
const B_vector = [y1, y2, m1, m2];
const solution = math.lusolve(A_matrix, B_vector);
if (!solution || solution.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution. Please check the input values.&lt;/span>';
return;
}
const a = math.format(solution[0][0], { precision: 6 });
const b = math.format(solution[1][0], { precision: 6 });
const c = math.format(solution[2][0], { precision: 6 });
const d = math.format(solution[3][0], { precision: 6 });
const equation = `y = ${a}x³ ${b >= 0 ? '+' : ''} ${b}x² ${c >= 0 ? '+' : ''} ${c}x ${d >= 0 ? '+' : ''} ${d}`;
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Coefficient a:&lt;/span> &lt;span class="result-value">${a}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient b:&lt;/span> &lt;span class="result-value">${b}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient c:&lt;/span> &lt;span class="result-value">${c}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Coefficient d:&lt;/span> &lt;span class="result-value">${d}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #c299e6;">
&lt;div class="result-item">&lt;span class="result-label">Cubic Equation:&lt;/span> &lt;span class="result-value">${equation}&lt;/span>&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Cubic equation solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;p>Let&amp;rsquo;s find the value of &lt;code>a&lt;/code> for the parabola equation $y=ax^2 + bx + c$ that passes through points (3, 2) and (2, 3), with slopes 31 at x=3 and 14 at x=2.&lt;/p>
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.parabola-slopes-solver-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fefefe;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-slopes-solver-container h3 {
text-align: center;
color: #007bff;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.equation-display {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-group input[type="number"] {
width: 100%;
max-width: 150px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-slopes-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0,0,0,0.32);
}
.parabola-slopes-solver-container h3 {
color: #6cb6ff;
}
.equation-display {
background-color: #232a36;
color: #e0e6ef;
border-color: #2d3a4d;
}
.input-group label {
color: #b3c6e0;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border-color: #2d3a4d;
}
.input-group input:focus {
border-color: #6cb6ff;
box-shadow: 0 0 8px rgba(108,182,255,0.4);
}
.solver-button {
background-color: #2563eb;
color: #fff;
}
.solver-button:hover {
background-color: #174ea6;
}
.solver-result {
background-color: #232a36;
border-color: #2d3a4d;
color: #e0e6ef;
}
.result-label {
color: #6cb6ff;
}
.result-value {
background-color: #181c24;
color: #e0e6ef;
border-color: #2d3a4d;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-slopes-solver-container {
padding: 1rem;
max-width: 100vw;
border-radius: 0;
box-shadow: none;
}
.equation-display {
font-size: 1.2rem;
padding: 0.5rem;
}
.input-row {
flex-direction: column;
gap: 0.8rem;
margin-bottom: 1rem;
}
.input-group {
flex: 1 1 100%;
align-items: stretch;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.5rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-slopes-solver-container">
&lt;h3>Find Parabola Equation from Two Points and Slopes&lt;/h3>
&lt;div class="equation-display">
y = ax² + bx + c
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-14" value="3">
&lt;input type="number" id="y1-input-14" value="2">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₁ (m₁):&lt;/label>
&lt;input type="number" id="m1-input-14" value="31">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-14" value="2">
&lt;input type="number" id="y2-input-14" value="3">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₂ (m₂):&lt;/label>
&lt;input type="number" id="m2-input-14" value="14">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findCoefficientsFromSlopes('14')">Find Coefficients&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="results-output-14">
Results will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findCoefficientsFromSlopes = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const m1 = parseFloat(document.getElementById('m1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m2 = parseFloat(document.getElementById('m2-input-' + ordinal).value);
const output = document.getElementById('results-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(m1) || isNaN(x2) || isNaN(y2) || isNaN(m2)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different to find a unique solution.");
}
const A_matrix = [
[2 * x1, 1],
[2 * x2, 1]
];
const B_vector = [m1, m2];
const solution_ab = math.lusolve(A_matrix, B_vector);
if (!solution_ab || solution_ab.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution for a and b from the slopes.&lt;/span>';
return;
}
const a_solution = solution_ab[0][0];
const b_solution = solution_ab[1][0];
const c_solution = y1 - a_solution * Math.pow(x1, 2) - b_solution * x1;
const y2_calculated = a_solution * Math.pow(x2, 2) + b_solution * x2 + c_solution;
const isConsistent = math.abs(y2_calculated - y2) &lt; 1e-9;
const a_formatted = Number(a_solution).toLocaleString(undefined, { maximumFractionDigits: 6 });
const b_formatted = Number(b_solution).toLocaleString(undefined, { maximumFractionDigits: 6 });
const c_formatted = Number(c_solution).toLocaleString(undefined, { maximumFractionDigits: 6 });
const y2_calculated_formatted = Number(y2_calculated).toLocaleString(undefined, { maximumFractionDigits: 6 });
let consistencyMessage = '';
if (isConsistent) {
consistencyMessage = `&lt;span style="color: green; font-weight: bold;">The inputs are consistent. A unique parabola exists.&lt;/span>`;
} else {
consistencyMessage = `&lt;span style="color: #dc3545; font-weight: bold;">The inputs are inconsistent. No single parabola can pass through both points with the given slopes.&lt;/span>`;
}
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Result from Slopes:&lt;/span> &lt;span class="result-value">a = ${a_formatted}&lt;/span>, &lt;span class="result-value">b = ${b_formatted}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Calculated 'c' from Point 1:&lt;/span> &lt;span class="result-value">c = ${c_formatted}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">&lt;span class="result-label">Calculated Equation:&lt;/span> &lt;span class="result-value">y = ${a_formatted}x² ${b_formatted >= 0 ? '+' : ''} ${b_formatted}x ${c_formatted >= 0 ? '+' : ''} ${c_formatted}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Checking with Point 2 (${x2}, ${y2}):&lt;/span>&lt;br>
If x = ${x2}, the calculated y is &lt;span class="result-value">${y2_calculated_formatted}&lt;/span> (expected y is &lt;span class="result-value">${y2}&lt;/span>).&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">${consistencyMessage}&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
&lt;/script>
&lt;hr>
&lt;h3>A Consistent Example&lt;span class="hx-absolute -hx-mt-20" id="a-consistent-example">&lt;/span>
&lt;a href="#a-consistent-example" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Let&amp;rsquo;s find the parabola for two points and slopes that are consistent. For a parabola with the equation $y = x^2 + 2x + 1$:&lt;/p>
&lt;ul>
&lt;li>Passes through (0, 1), with slope 2.&lt;/li>
&lt;li>Passes through (2, 9), with slope 6.
&lt;script src="https://cdn.jsdelivr.net/npm/mathjs@11.11.2/lib/browser/math.min.js">&lt;/script>
&lt;style>
.parabola-slopes-solver-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fefefe;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.parabola-slopes-solver-container h3 {
text-align: center;
color: #007bff;
margin-bottom: 2rem;
font-size: 1.8rem;
}
.equation-display {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.8rem;
text-align: center;
margin-bottom: 2rem;
color: #1a1a1a;
background-color: #f0f8ff;
padding: 1rem;
border-radius: 8px;
border: 1px dashed #cce5ff;
}
.input-row {
display: flex;
flex-wrap: wrap;
gap: 1.5rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-group input[type="number"] {
width: 100%;
max-width: 150px;
padding: 0.8rem;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}
.input-group input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 8px rgba(0, 123, 255, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.8rem;
background-color: #eaf6ff;
border-radius: 10px;
border: 1px solid #b3d9ff;
line-height: 1.8;
font-size: 1.1rem;
color: #1a2a3a;
word-wrap: break-word;
}
.result-item {
margin-bottom: 0.8rem;
}
.result-label {
font-weight: 700;
color: #0056b3;
}
.result-value {
font-family: 'Courier New', Courier, monospace;
background-color: #fff;
padding: 0.2em 0.5em;
border-radius: 4px;
border: 1px solid #d4e3f1;
}
.solver-error {
color: #dc3545;
font-weight: bold;
}
html:is(.dark) {
.parabola-slopes-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e0e6ef;
box-shadow: 0 6px 20px rgba(0,0,0,0.32);
}
.parabola-slopes-solver-container h3 {
color: #6cb6ff;
}
.equation-display {
background-color: #232a36;
color: #e0e6ef;
border-color: #2d3a4d;
}
.input-group label {
color: #b3c6e0;
}
.input-group input[type="number"] {
background-color: #232a36;
color: #e0e6ef;
border-color: #2d3a4d;
}
.input-group input:focus {
border-color: #6cb6ff;
box-shadow: 0 0 8px rgba(108,182,255,0.4);
}
.solver-button {
background-color: #2563eb;
color: #fff;
}
.solver-button:hover {
background-color: #174ea6;
}
.solver-result {
background-color: #232a36;
border-color: #2d3a4d;
color: #e0e6ef;
}
.result-label {
color: #6cb6ff;
}
.result-value {
background-color: #181c24;
color: #e0e6ef;
border-color: #2d3a4d;
}
.solver-error {
color: #ff6b6b;
}
}
@media (max-width: 600px) {
.parabola-slopes-solver-container {
padding: 1rem;
max-width: 100vw;
border-radius: 0;
box-shadow: none;
}
.equation-display {
font-size: 1.2rem;
padding: 0.5rem;
}
.input-row {
flex-direction: column;
gap: 0.8rem;
margin-bottom: 1rem;
}
.input-group {
flex: 1 1 100%;
align-items: stretch;
}
.input-group input[type="number"] {
max-width: 100%;
font-size: 1rem;
padding: 0.5rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
padding: 1rem;
font-size: 1rem;
}
}
&lt;/style>
&lt;div class="parabola-slopes-solver-container">
&lt;h3>Find Parabola Equation from Two Points and Slopes&lt;/h3>
&lt;div class="equation-display">
y = ax² + bx + c
&lt;/div>
&lt;div class="input-row">
&lt;div class="input-group">
&lt;label>Point 1 (x₁, y₁):&lt;/label>
&lt;input type="number" id="x1-input-15" value="0">
&lt;input type="number" id="y1-input-15" value="1">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₁ (m₁):&lt;/label>
&lt;input type="number" id="m1-input-15" value="2">
&lt;/div>
&lt;div class="input-group">
&lt;label>Point 2 (x₂, y₂):&lt;/label>
&lt;input type="number" id="x2-input-15" value="2">
&lt;input type="number" id="y2-input-15" value="9">
&lt;/div>
&lt;div class="input-group">
&lt;label>Slope at x₂ (m₂):&lt;/label>
&lt;input type="number" id="m2-input-15" value="6">
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="findCoefficientsFromSlopes('15')">Find Coefficients&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="results-output-15">
Results will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.findCoefficientsFromSlopes = function(ordinal) {
const x1 = parseFloat(document.getElementById('x1-input-' + ordinal).value);
const y1 = parseFloat(document.getElementById('y1-input-' + ordinal).value);
const m1 = parseFloat(document.getElementById('m1-input-' + ordinal).value);
const x2 = parseFloat(document.getElementById('x2-input-' + ordinal).value);
const y2 = parseFloat(document.getElementById('y2-input-' + ordinal).value);
const m2 = parseFloat(document.getElementById('m2-input-' + ordinal).value);
const output = document.getElementById('results-output-' + ordinal);
if (typeof math === 'undefined') {
output.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded.&lt;/span>';
return;
}
try {
if (isNaN(x1) || isNaN(y1) || isNaN(m1) || isNaN(x2) || isNaN(y2) || isNaN(m2)) {
throw new Error("Please enter valid numbers for all inputs.");
}
if (x1 === x2) {
throw new Error("The x-coordinates of the two points must be different to find a unique solution.");
}
const A_matrix = [
[2 * x1, 1],
[2 * x2, 1]
];
const B_vector = [m1, m2];
const solution_ab = math.lusolve(A_matrix, B_vector);
if (!solution_ab || solution_ab.length === 0) {
output.innerHTML = '&lt;span class="solver-error">Could not find a unique solution for a and b from the slopes.&lt;/span>';
return;
}
const a_solution = solution_ab[0][0];
const b_solution = solution_ab[1][0];
const c_solution = y1 - a_solution * Math.pow(x1, 2) - b_solution * x1;
const y2_calculated = a_solution * Math.pow(x2, 2) + b_solution * x2 + c_solution;
const isConsistent = math.abs(y2_calculated - y2) &lt; 1e-9;
const a_formatted = Number(a_solution).toLocaleString(undefined, { maximumFractionDigits: 6 });
const b_formatted = Number(b_solution).toLocaleString(undefined, { maximumFractionDigits: 6 });
const c_formatted = Number(c_solution).toLocaleString(undefined, { maximumFractionDigits: 6 });
const y2_calculated_formatted = Number(y2_calculated).toLocaleString(undefined, { maximumFractionDigits: 6 });
let consistencyMessage = '';
if (isConsistent) {
consistencyMessage = `&lt;span style="color: green; font-weight: bold;">The inputs are consistent. A unique parabola exists.&lt;/span>`;
} else {
consistencyMessage = `&lt;span style="color: #dc3545; font-weight: bold;">The inputs are inconsistent. No single parabola can pass through both points with the given slopes.&lt;/span>`;
}
const resultHTML = `
&lt;div class="result-item">&lt;span class="result-label">Result from Slopes:&lt;/span> &lt;span class="result-value">a = ${a_formatted}&lt;/span>, &lt;span class="result-value">b = ${b_formatted}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Calculated 'c' from Point 1:&lt;/span> &lt;span class="result-value">c = ${c_formatted}&lt;/span>&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">&lt;span class="result-label">Calculated Equation:&lt;/span> &lt;span class="result-value">y = ${a_formatted}x² ${b_formatted >= 0 ? '+' : ''} ${b_formatted}x ${c_formatted >= 0 ? '+' : ''} ${c_formatted}&lt;/span>&lt;/div>
&lt;div class="result-item">&lt;span class="result-label">Checking with Point 2 (${x2}, ${y2}):&lt;/span>&lt;br>
If x = ${x2}, the calculated y is &lt;span class="result-value">${y2_calculated_formatted}&lt;/span> (expected y is &lt;span class="result-value">${y2}&lt;/span>).&lt;/div>
&lt;hr style="margin: 1rem 0; border-color: #cce5ff;">
&lt;div class="result-item">${consistencyMessage}&lt;/div>
`;
output.innerHTML = resultHTML;
} catch (error) {
output.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
&lt;/script>&lt;/li>
&lt;/ul>
&lt;p>This tool calculates the shortest distance between two lines in 2D. Enter the coefficients for each line in the form &lt;code>Ax + By + C = 0&lt;/code>.&lt;/p>
&lt;h3>Example 1: Parallel Lines&lt;span class="hx-absolute -hx-mt-20" id="example-1-parallel-lines">&lt;/span>
&lt;a href="#example-1-parallel-lines" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Calculate the distance between &lt;code>3x + 4y + 10 = 0&lt;/code> and &lt;code>6x + 8y + 5 = 0&lt;/code>.
&lt;style>
.line-distance-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.line-distance-container h3 {
text-align: center;
color: #1abc9c;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.5rem;
text-align: center;
margin-bottom: 2rem;
color: #555;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair span {
font-size: 1.2rem;
font-weight: bold;
align-self: center;
margin: 0 5px;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 70px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #1abc9c;
box-shadow: 0 0 10px rgba(26, 188, 156, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #1abc9c;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #e6f6f3;
border: 1px solid #b3e2d6;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #0d6d5d;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.line-distance-container {
background-color: #23272e;
border-color: #32363e;
color: #e0e6ed;
box-shadow: 0 8px 25px rgba(0,0,0,0.25);
}
.line-distance-container h3 {
color: #4ef0c7;
}
.equation-formula {
color: #bfc9d6;
}
.input-group label {
color: #bfc9d6;
}
.input-pair input[type="number"] {
background-color: #23272e;
border-color: #3a3f4b;
color: #e0e6ed;
min-width: 12px;
}
.input-pair input[type="number"]:focus {
border-color: #4ef0c7;
box-shadow: 0 0 10px rgba(78, 240, 199, 0.3);
}
.solver-button {
background-color: #4ef0c7;
color: #23272e;
}
.solver-result {
background-color: #23332e;
border-color: #4ef0c7;
color: #4ef0c7;
}
.solver-error {
color: #ff7675;
}
}
@media (max-width: 600px) {
.line-distance-container {
padding: 1rem;
max-width: 98vw;
font-size: 1rem;
}
.line-distance-container h3 {
font-size: 1.3rem;
margin-bottom: 1rem;
}
.equation-formula {
font-size: 1.1rem;
margin-bottom: 1rem;
}
.coordinates-input-grid {
grid-template-columns: 1fr;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group label {
font-size: 1rem;
}
.input-pair input[type="number"] {
max-width: 55px;
padding: 0.5rem;
font-size: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
font-size: 1.1rem;
padding: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="line-distance-container">
&lt;h3>Distance Between Two Lines&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coefficients for two lines in the form `Ax + By + C = 0`.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Line 1 (A₁x + B₁y + C₁ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a1-input-16" value="3">&lt;span>x +&lt;/span>
&lt;input type="number" id="b1-input-16" value="4">&lt;span>y +&lt;/span>
&lt;input type="number" id="c1-input-16" value="10">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Line 2 (A₂x + B₂y + C₂ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a2-input-16" value="6">&lt;span>x +&lt;/span>
&lt;input type="number" id="b2-input-16" value="8">&lt;span>y +&lt;/span>
&lt;input type="number" id="c2-input-16" value="5">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateLineDistance('16')">Calculate Distance&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="distance-output-16">
Distance will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateLineDistance = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('distance-output-' + ordinal);
try {
const a1 = getVal('a1-input');
const b1 = getVal('b1-input');
const c1 = getVal('c1-input');
const a2 = getVal('a2-input');
const b2 = getVal('b2-input');
const c2 = getVal('c2-input');
if (isNaN(a1) || isNaN(b1) || isNaN(c1) || isNaN(a2) || isNaN(b2) || isNaN(c2)) {
throw new Error("Please enter valid numbers for all coefficients.");
}
const tolerance = 1e-9;
const cross_product_ab = a1 * b2 - a2 * b1;
if (Math.abs(cross_product_ab) > tolerance) {
outputElement.innerHTML = `&lt;span style="color: #c0392b;">Lines are not parallel; they intersect. Distance = 0&lt;/span>`;
return;
}
let c2_normalized;
let A_normalized, B_normalized;
if (Math.abs(a1) > tolerance || Math.abs(b1) > tolerance) {
let scale_factor = 1;
if (Math.abs(a2) > tolerance) {
scale_factor = a1 / a2;
} else if (Math.abs(b2) > tolerance) {
scale_factor = b1 / b2;
} else {
throw new Error("Invalid coefficients for Line 2 (A2 and B2 cannot both be zero).");
}
c2_normalized = scale_factor * c2;
A_normalized = a1;
B_normalized = b1;
} else {
throw new Error("Invalid coefficients for Line 1 (A1 and B1 cannot both be zero).");
}
if (Math.abs(c1 - c2_normalized) &lt; tolerance) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">Lines are coincident (the same line). Distance = 0&lt;/span>`;
return;
}
const denominator = Math.sqrt(Math.pow(A_normalized, 2) + Math.pow(B_normalized, 2));
if (denominator &lt; tolerance) {
throw new Error("Invalid coefficients (A and B cannot both be zero).");
}
const distance = Math.abs(c1 - c2_normalized) / denominator;
const formattedDistance = distance.toFixed(6);
outputElement.innerHTML = `Distance = &lt;span style="color: #1abc9c;">${formattedDistance}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Line distance solver error:", error);
}
}
&lt;/script>
&lt;/p>
&lt;hr>
&lt;h3>Example 2: Intersecting Lines&lt;span class="hx-absolute -hx-mt-20" id="example-2-intersecting-lines">&lt;/span>
&lt;a href="#example-2-intersecting-lines" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>The distance is 0 for intersecting lines like &lt;code>2x + y - 5 = 0&lt;/code> and &lt;code>x - y + 1 = 0&lt;/code>.
&lt;style>
.line-distance-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.line-distance-container h3 {
text-align: center;
color: #1abc9c;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.5rem;
text-align: center;
margin-bottom: 2rem;
color: #555;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair span {
font-size: 1.2rem;
font-weight: bold;
align-self: center;
margin: 0 5px;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 70px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #1abc9c;
box-shadow: 0 0 10px rgba(26, 188, 156, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #1abc9c;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #e6f6f3;
border: 1px solid #b3e2d6;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #0d6d5d;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.line-distance-container {
background-color: #23272e;
border-color: #32363e;
color: #e0e6ed;
box-shadow: 0 8px 25px rgba(0,0,0,0.25);
}
.line-distance-container h3 {
color: #4ef0c7;
}
.equation-formula {
color: #bfc9d6;
}
.input-group label {
color: #bfc9d6;
}
.input-pair input[type="number"] {
background-color: #23272e;
border-color: #3a3f4b;
color: #e0e6ed;
min-width: 12px;
}
.input-pair input[type="number"]:focus {
border-color: #4ef0c7;
box-shadow: 0 0 10px rgba(78, 240, 199, 0.3);
}
.solver-button {
background-color: #4ef0c7;
color: #23272e;
}
.solver-result {
background-color: #23332e;
border-color: #4ef0c7;
color: #4ef0c7;
}
.solver-error {
color: #ff7675;
}
}
@media (max-width: 600px) {
.line-distance-container {
padding: 1rem;
max-width: 98vw;
font-size: 1rem;
}
.line-distance-container h3 {
font-size: 1.3rem;
margin-bottom: 1rem;
}
.equation-formula {
font-size: 1.1rem;
margin-bottom: 1rem;
}
.coordinates-input-grid {
grid-template-columns: 1fr;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group label {
font-size: 1rem;
}
.input-pair input[type="number"] {
max-width: 55px;
padding: 0.5rem;
font-size: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
font-size: 1.1rem;
padding: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="line-distance-container">
&lt;h3>Distance Between Two Lines&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coefficients for two lines in the form `Ax + By + C = 0`.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Line 1 (A₁x + B₁y + C₁ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a1-input-17" value="2">&lt;span>x +&lt;/span>
&lt;input type="number" id="b1-input-17" value="1">&lt;span>y +&lt;/span>
&lt;input type="number" id="c1-input-17" value="-5">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Line 2 (A₂x + B₂y + C₂ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a2-input-17" value="1">&lt;span>x +&lt;/span>
&lt;input type="number" id="b2-input-17" value="-1">&lt;span>y +&lt;/span>
&lt;input type="number" id="c2-input-17" value="1">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateLineDistance('17')">Calculate Distance&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="distance-output-17">
Distance will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateLineDistance = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('distance-output-' + ordinal);
try {
const a1 = getVal('a1-input');
const b1 = getVal('b1-input');
const c1 = getVal('c1-input');
const a2 = getVal('a2-input');
const b2 = getVal('b2-input');
const c2 = getVal('c2-input');
if (isNaN(a1) || isNaN(b1) || isNaN(c1) || isNaN(a2) || isNaN(b2) || isNaN(c2)) {
throw new Error("Please enter valid numbers for all coefficients.");
}
const tolerance = 1e-9;
const cross_product_ab = a1 * b2 - a2 * b1;
if (Math.abs(cross_product_ab) > tolerance) {
outputElement.innerHTML = `&lt;span style="color: #c0392b;">Lines are not parallel; they intersect. Distance = 0&lt;/span>`;
return;
}
let c2_normalized;
let A_normalized, B_normalized;
if (Math.abs(a1) > tolerance || Math.abs(b1) > tolerance) {
let scale_factor = 1;
if (Math.abs(a2) > tolerance) {
scale_factor = a1 / a2;
} else if (Math.abs(b2) > tolerance) {
scale_factor = b1 / b2;
} else {
throw new Error("Invalid coefficients for Line 2 (A2 and B2 cannot both be zero).");
}
c2_normalized = scale_factor * c2;
A_normalized = a1;
B_normalized = b1;
} else {
throw new Error("Invalid coefficients for Line 1 (A1 and B1 cannot both be zero).");
}
if (Math.abs(c1 - c2_normalized) &lt; tolerance) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">Lines are coincident (the same line). Distance = 0&lt;/span>`;
return;
}
const denominator = Math.sqrt(Math.pow(A_normalized, 2) + Math.pow(B_normalized, 2));
if (denominator &lt; tolerance) {
throw new Error("Invalid coefficients (A and B cannot both be zero).");
}
const distance = Math.abs(c1 - c2_normalized) / denominator;
const formattedDistance = distance.toFixed(6);
outputElement.innerHTML = `Distance = &lt;span style="color: #1abc9c;">${formattedDistance}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Line distance solver error:", error);
}
}
&lt;/script>
&lt;/p>
&lt;hr>
&lt;h3>Example 3: Coincident Lines&lt;span class="hx-absolute -hx-mt-20" id="example-3-coincident-lines">&lt;/span>
&lt;a href="#example-3-coincident-lines" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>These are the same line, so the distance is 0.
&lt;style>
.line-distance-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.line-distance-container h3 {
text-align: center;
color: #1abc9c;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.5rem;
text-align: center;
margin-bottom: 2rem;
color: #555;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair span {
font-size: 1.2rem;
font-weight: bold;
align-self: center;
margin: 0 5px;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 70px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #1abc9c;
box-shadow: 0 0 10px rgba(26, 188, 156, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #1abc9c;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #e6f6f3;
border: 1px solid #b3e2d6;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #0d6d5d;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.line-distance-container {
background-color: #23272e;
border-color: #32363e;
color: #e0e6ed;
box-shadow: 0 8px 25px rgba(0,0,0,0.25);
}
.line-distance-container h3 {
color: #4ef0c7;
}
.equation-formula {
color: #bfc9d6;
}
.input-group label {
color: #bfc9d6;
}
.input-pair input[type="number"] {
background-color: #23272e;
border-color: #3a3f4b;
color: #e0e6ed;
min-width: 12px;
}
.input-pair input[type="number"]:focus {
border-color: #4ef0c7;
box-shadow: 0 0 10px rgba(78, 240, 199, 0.3);
}
.solver-button {
background-color: #4ef0c7;
color: #23272e;
}
.solver-result {
background-color: #23332e;
border-color: #4ef0c7;
color: #4ef0c7;
}
.solver-error {
color: #ff7675;
}
}
@media (max-width: 600px) {
.line-distance-container {
padding: 1rem;
max-width: 98vw;
font-size: 1rem;
}
.line-distance-container h3 {
font-size: 1.3rem;
margin-bottom: 1rem;
}
.equation-formula {
font-size: 1.1rem;
margin-bottom: 1rem;
}
.coordinates-input-grid {
grid-template-columns: 1fr;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group label {
font-size: 1rem;
}
.input-pair input[type="number"] {
max-width: 55px;
padding: 0.5rem;
font-size: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
font-size: 1.1rem;
padding: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="line-distance-container">
&lt;h3>Distance Between Two Lines&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coefficients for two lines in the form `Ax + By + C = 0`.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Line 1 (A₁x + B₁y + C₁ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a1-input-18" value="1">&lt;span>x +&lt;/span>
&lt;input type="number" id="b1-input-18" value="2">&lt;span>y +&lt;/span>
&lt;input type="number" id="c1-input-18" value="3">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Line 2 (A₂x + B₂y + C₂ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a2-input-18" value="2">&lt;span>x +&lt;/span>
&lt;input type="number" id="b2-input-18" value="4">&lt;span>y +&lt;/span>
&lt;input type="number" id="c2-input-18" value="6">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateLineDistance('18')">Calculate Distance&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="distance-output-18">
Distance will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateLineDistance = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('distance-output-' + ordinal);
try {
const a1 = getVal('a1-input');
const b1 = getVal('b1-input');
const c1 = getVal('c1-input');
const a2 = getVal('a2-input');
const b2 = getVal('b2-input');
const c2 = getVal('c2-input');
if (isNaN(a1) || isNaN(b1) || isNaN(c1) || isNaN(a2) || isNaN(b2) || isNaN(c2)) {
throw new Error("Please enter valid numbers for all coefficients.");
}
const tolerance = 1e-9;
const cross_product_ab = a1 * b2 - a2 * b1;
if (Math.abs(cross_product_ab) > tolerance) {
outputElement.innerHTML = `&lt;span style="color: #c0392b;">Lines are not parallel; they intersect. Distance = 0&lt;/span>`;
return;
}
let c2_normalized;
let A_normalized, B_normalized;
if (Math.abs(a1) > tolerance || Math.abs(b1) > tolerance) {
let scale_factor = 1;
if (Math.abs(a2) > tolerance) {
scale_factor = a1 / a2;
} else if (Math.abs(b2) > tolerance) {
scale_factor = b1 / b2;
} else {
throw new Error("Invalid coefficients for Line 2 (A2 and B2 cannot both be zero).");
}
c2_normalized = scale_factor * c2;
A_normalized = a1;
B_normalized = b1;
} else {
throw new Error("Invalid coefficients for Line 1 (A1 and B1 cannot both be zero).");
}
if (Math.abs(c1 - c2_normalized) &lt; tolerance) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">Lines are coincident (the same line). Distance = 0&lt;/span>`;
return;
}
const denominator = Math.sqrt(Math.pow(A_normalized, 2) + Math.pow(B_normalized, 2));
if (denominator &lt; tolerance) {
throw new Error("Invalid coefficients (A and B cannot both be zero).");
}
const distance = Math.abs(c1 - c2_normalized) / denominator;
const formattedDistance = distance.toFixed(6);
outputElement.innerHTML = `Distance = &lt;span style="color: #1abc9c;">${formattedDistance}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Line distance solver error:", error);
}
}
&lt;/script>
&lt;/p>
&lt;hr>
&lt;h3>Your Own Lines&lt;span class="hx-absolute -hx-mt-20" id="your-own-lines">&lt;/span>
&lt;a href="#your-own-lines" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Enter the coefficients for your own lines below.
&lt;style>
.line-distance-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.line-distance-container h3 {
text-align: center;
color: #1abc9c;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.equation-formula {
font-family: 'Times New Roman', Times, serif;
font-style: italic;
font-size: 1.5rem;
text-align: center;
margin-bottom: 2rem;
color: #555;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair span {
font-size: 1.2rem;
font-weight: bold;
align-self: center;
margin: 0 5px;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 70px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #1abc9c;
box-shadow: 0 0 10px rgba(26, 188, 156, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #1abc9c;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #e6f6f3;
border: 1px solid #b3e2d6;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #0d6d5d;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.line-distance-container {
background-color: #23272e;
border-color: #32363e;
color: #e0e6ed;
box-shadow: 0 8px 25px rgba(0,0,0,0.25);
}
.line-distance-container h3 {
color: #4ef0c7;
}
.equation-formula {
color: #bfc9d6;
}
.input-group label {
color: #bfc9d6;
}
.input-pair input[type="number"] {
background-color: #23272e;
border-color: #3a3f4b;
color: #e0e6ed;
min-width: 12px;
}
.input-pair input[type="number"]:focus {
border-color: #4ef0c7;
box-shadow: 0 0 10px rgba(78, 240, 199, 0.3);
}
.solver-button {
background-color: #4ef0c7;
color: #23272e;
}
.solver-result {
background-color: #23332e;
border-color: #4ef0c7;
color: #4ef0c7;
}
.solver-error {
color: #ff7675;
}
}
@media (max-width: 600px) {
.line-distance-container {
padding: 1rem;
max-width: 98vw;
font-size: 1rem;
}
.line-distance-container h3 {
font-size: 1.3rem;
margin-bottom: 1rem;
}
.equation-formula {
font-size: 1.1rem;
margin-bottom: 1rem;
}
.coordinates-input-grid {
grid-template-columns: 1fr;
gap: 1rem;
margin-bottom: 1rem;
}
.input-group label {
font-size: 1rem;
}
.input-pair input[type="number"] {
max-width: 55px;
padding: 0.5rem;
font-size: 1rem;
}
.solver-button {
width: 100%;
padding: 0.8rem 0;
font-size: 1rem;
}
.solver-result {
font-size: 1.1rem;
padding: 1rem;
margin-top: 1rem;
}
}
&lt;/style>
&lt;div class="line-distance-container">
&lt;h3>Distance Between Two Lines&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coefficients for two lines in the form `Ax + By + C = 0`.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Line 1 (A₁x + B₁y + C₁ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a1-input-19" value="3">&lt;span>x +&lt;/span>
&lt;input type="number" id="b1-input-19" value="4">&lt;span>y +&lt;/span>
&lt;input type="number" id="c1-input-19" value="10">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Line 2 (A₂x + B₂y + C₂ = 0):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="a2-input-19" value="6">&lt;span>x +&lt;/span>
&lt;input type="number" id="b2-input-19" value="8">&lt;span>y +&lt;/span>
&lt;input type="number" id="c2-input-19" value="5">&lt;span>= 0&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateLineDistance('19')">Calculate Distance&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="distance-output-19">
Distance will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateLineDistance = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('distance-output-' + ordinal);
try {
const a1 = getVal('a1-input');
const b1 = getVal('b1-input');
const c1 = getVal('c1-input');
const a2 = getVal('a2-input');
const b2 = getVal('b2-input');
const c2 = getVal('c2-input');
if (isNaN(a1) || isNaN(b1) || isNaN(c1) || isNaN(a2) || isNaN(b2) || isNaN(c2)) {
throw new Error("Please enter valid numbers for all coefficients.");
}
const tolerance = 1e-9;
const cross_product_ab = a1 * b2 - a2 * b1;
if (Math.abs(cross_product_ab) > tolerance) {
outputElement.innerHTML = `&lt;span style="color: #c0392b;">Lines are not parallel; they intersect. Distance = 0&lt;/span>`;
return;
}
let c2_normalized;
let A_normalized, B_normalized;
if (Math.abs(a1) > tolerance || Math.abs(b1) > tolerance) {
let scale_factor = 1;
if (Math.abs(a2) > tolerance) {
scale_factor = a1 / a2;
} else if (Math.abs(b2) > tolerance) {
scale_factor = b1 / b2;
} else {
throw new Error("Invalid coefficients for Line 2 (A2 and B2 cannot both be zero).");
}
c2_normalized = scale_factor * c2;
A_normalized = a1;
B_normalized = b1;
} else {
throw new Error("Invalid coefficients for Line 1 (A1 and B1 cannot both be zero).");
}
if (Math.abs(c1 - c2_normalized) &lt; tolerance) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">Lines are coincident (the same line). Distance = 0&lt;/span>`;
return;
}
const denominator = Math.sqrt(Math.pow(A_normalized, 2) + Math.pow(B_normalized, 2));
if (denominator &lt; tolerance) {
throw new Error("Invalid coefficients (A and B cannot both be zero).");
}
const distance = Math.abs(c1 - c2_normalized) / denominator;
const formattedDistance = distance.toFixed(6);
outputElement.innerHTML = `Distance = &lt;span style="color: #1abc9c;">${formattedDistance}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Line distance solver error:", error);
}
}
&lt;/script>
&lt;/p>
&lt;p>This tool helps you find the ratio in which a point &lt;code>P&lt;/code> divides the line segment joining points &lt;code>A&lt;/code> and &lt;code>B&lt;/code>.&lt;/p>
&lt;h3>Example 1: Internal Division&lt;span class="hx-absolute -hx-mt-20" id="example-1-internal-division">&lt;/span>
&lt;a href="#example-1-internal-division" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Find the ratio in which point P(3, 4) divides the segment from A(1, 2) to B(6, 7).
&lt;style>
.section-ratio-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.section-ratio-container h3 {
text-align: center;
color: #6c5ce7;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 200px;
min-width: 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 90px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #6c5ce7;
box-shadow: 0 0 10px rgba(108, 92, 231, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #6c5ce7;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #4a3ebf;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #f3f0ff;
border: 1px solid #c2b2ff;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #4a3ebf;
text-align: center;
}
.solver-error {
color: #d63031;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="section-ratio-container">
&lt;h3>Find the Section Ratio (k:1)&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coordinates of the endpoints A and B, and the dividing point P.&lt;/p>
&lt;div class="coordinates-input-row">
&lt;div class="input-group">
&lt;label>Point A (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-20" value="1" placeholder="x1">
&lt;input type="number" id="y1-input-20" value="2" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point B (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-20" value="6" placeholder="x2">
&lt;input type="number" id="y2-input-20" value="7" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point P (x, y):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x-input-20" value="3" placeholder="x">
&lt;input type="number" id="y-input-20" value="4" placeholder="y">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateRatio('20')">Calculate Ratio&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="ratio-output-20">
Ratio will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateRatio = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('ratio-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x_p = getVal('x-input');
const y_p = getVal('y-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x_p) || isNaN(y_p)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const numerator_x = x1 - x_p;
const denominator_x = x_p - x2;
if (denominator_x === 0) {
if (x_p === x2 &amp;&amp; y_p === y2) {
outputElement.innerHTML = `Point P is the endpoint B. Ratio is 0 : 1.`;
return;
}
throw new Error("Division by zero in x-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that x_p = x2.");
}
const k_x = numerator_x / denominator_x;
const numerator_y = y1 - y_p;
const denominator_y = y_p - y2;
if (denominator_y === 0 &amp;&amp; y_p !== y2) {
throw new Error("Division by zero in y-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that y_p = y2.");
}
if (denominator_y === 0 &amp;&amp; y_p === y2) {
} else {
const k_y = numerator_y / denominator_y;
if (Math.abs(k_x - k_y) > 1e-9) {
throw new Error(`Inconsistent ratio: k_x = ${k_x.toFixed(4)}, k_y = ${k_y.toFixed(4)}. The points A, B, and P are not collinear.`);
}
}
const sign = Math.sign(k_x);
let divisionType = sign > 0 ? "internally" : "externally";
let ratio_m_n_text = "";
let simplified_k = Math.abs(k_x);
let tolerance = 1e-6;
for (let d = 1; d &lt;= 1000; d++) {
let n = simplified_k * d;
if (Math.abs(n - Math.round(n)) &lt; tolerance) {
ratio_m_n_text = `${Math.round(n)} : ${d}`;
break;
}
}
if (!ratio_m_n_text) {
ratio_m_n_text = `${simplified_k.toFixed(3)} : 1`;
}
outputElement.innerHTML = `Ratio is &lt;span style="color: #6c5ce7;">${ratio_m_n_text}&lt;/span>. Point P divides the segment AB &lt;span style="color: #6c5ce7;">${divisionType}&lt;/span>.`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Section ratio solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: External Division&lt;span class="hx-absolute -hx-mt-20" id="example-2-external-division">&lt;/span>
&lt;a href="#example-2-external-division" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Find the ratio in which point P(9, 10) divides the segment from A(3, 4) to B(5, 6).
&lt;style>
.section-ratio-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.section-ratio-container h3 {
text-align: center;
color: #6c5ce7;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 200px;
min-width: 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 90px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #6c5ce7;
box-shadow: 0 0 10px rgba(108, 92, 231, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #6c5ce7;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #4a3ebf;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #f3f0ff;
border: 1px solid #c2b2ff;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #4a3ebf;
text-align: center;
}
.solver-error {
color: #d63031;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="section-ratio-container">
&lt;h3>Find the Section Ratio (k:1)&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coordinates of the endpoints A and B, and the dividing point P.&lt;/p>
&lt;div class="coordinates-input-row">
&lt;div class="input-group">
&lt;label>Point A (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-21" value="3" placeholder="x1">
&lt;input type="number" id="y1-input-21" value="4" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point B (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-21" value="5" placeholder="x2">
&lt;input type="number" id="y2-input-21" value="6" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point P (x, y):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x-input-21" value="9" placeholder="x">
&lt;input type="number" id="y-input-21" value="10" placeholder="y">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateRatio('21')">Calculate Ratio&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="ratio-output-21">
Ratio will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateRatio = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('ratio-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x_p = getVal('x-input');
const y_p = getVal('y-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x_p) || isNaN(y_p)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const numerator_x = x1 - x_p;
const denominator_x = x_p - x2;
if (denominator_x === 0) {
if (x_p === x2 &amp;&amp; y_p === y2) {
outputElement.innerHTML = `Point P is the endpoint B. Ratio is 0 : 1.`;
return;
}
throw new Error("Division by zero in x-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that x_p = x2.");
}
const k_x = numerator_x / denominator_x;
const numerator_y = y1 - y_p;
const denominator_y = y_p - y2;
if (denominator_y === 0 &amp;&amp; y_p !== y2) {
throw new Error("Division by zero in y-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that y_p = y2.");
}
if (denominator_y === 0 &amp;&amp; y_p === y2) {
} else {
const k_y = numerator_y / denominator_y;
if (Math.abs(k_x - k_y) > 1e-9) {
throw new Error(`Inconsistent ratio: k_x = ${k_x.toFixed(4)}, k_y = ${k_y.toFixed(4)}. The points A, B, and P are not collinear.`);
}
}
const sign = Math.sign(k_x);
let divisionType = sign > 0 ? "internally" : "externally";
let ratio_m_n_text = "";
let simplified_k = Math.abs(k_x);
let tolerance = 1e-6;
for (let d = 1; d &lt;= 1000; d++) {
let n = simplified_k * d;
if (Math.abs(n - Math.round(n)) &lt; tolerance) {
ratio_m_n_text = `${Math.round(n)} : ${d}`;
break;
}
}
if (!ratio_m_n_text) {
ratio_m_n_text = `${simplified_k.toFixed(3)} : 1`;
}
outputElement.innerHTML = `Ratio is &lt;span style="color: #6c5ce7;">${ratio_m_n_text}&lt;/span>. Point P divides the segment AB &lt;span style="color: #6c5ce7;">${divisionType}&lt;/span>.`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Section ratio solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 3: Non-collinear Points&lt;span class="hx-absolute -hx-mt-20" id="example-3-non-collinear-points">&lt;/span>
&lt;a href="#example-3-non-collinear-points" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>What happens when the points don&amp;rsquo;t lie on the same line?
&lt;style>
.section-ratio-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.section-ratio-container h3 {
text-align: center;
color: #6c5ce7;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 200px;
min-width: 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 90px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #6c5ce7;
box-shadow: 0 0 10px rgba(108, 92, 231, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #6c5ce7;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #4a3ebf;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #f3f0ff;
border: 1px solid #c2b2ff;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #4a3ebf;
text-align: center;
}
.solver-error {
color: #d63031;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="section-ratio-container">
&lt;h3>Find the Section Ratio (k:1)&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coordinates of the endpoints A and B, and the dividing point P.&lt;/p>
&lt;div class="coordinates-input-row">
&lt;div class="input-group">
&lt;label>Point A (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-22" value="0" placeholder="x1">
&lt;input type="number" id="y1-input-22" value="0" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point B (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-22" value="5" placeholder="x2">
&lt;input type="number" id="y2-input-22" value="0" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point P (x, y):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x-input-22" value="1" placeholder="x">
&lt;input type="number" id="y-input-22" value="2" placeholder="y">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateRatio('22')">Calculate Ratio&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="ratio-output-22">
Ratio will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateRatio = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('ratio-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x_p = getVal('x-input');
const y_p = getVal('y-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x_p) || isNaN(y_p)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const numerator_x = x1 - x_p;
const denominator_x = x_p - x2;
if (denominator_x === 0) {
if (x_p === x2 &amp;&amp; y_p === y2) {
outputElement.innerHTML = `Point P is the endpoint B. Ratio is 0 : 1.`;
return;
}
throw new Error("Division by zero in x-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that x_p = x2.");
}
const k_x = numerator_x / denominator_x;
const numerator_y = y1 - y_p;
const denominator_y = y_p - y2;
if (denominator_y === 0 &amp;&amp; y_p !== y2) {
throw new Error("Division by zero in y-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that y_p = y2.");
}
if (denominator_y === 0 &amp;&amp; y_p === y2) {
} else {
const k_y = numerator_y / denominator_y;
if (Math.abs(k_x - k_y) > 1e-9) {
throw new Error(`Inconsistent ratio: k_x = ${k_x.toFixed(4)}, k_y = ${k_y.toFixed(4)}. The points A, B, and P are not collinear.`);
}
}
const sign = Math.sign(k_x);
let divisionType = sign > 0 ? "internally" : "externally";
let ratio_m_n_text = "";
let simplified_k = Math.abs(k_x);
let tolerance = 1e-6;
for (let d = 1; d &lt;= 1000; d++) {
let n = simplified_k * d;
if (Math.abs(n - Math.round(n)) &lt; tolerance) {
ratio_m_n_text = `${Math.round(n)} : ${d}`;
break;
}
}
if (!ratio_m_n_text) {
ratio_m_n_text = `${simplified_k.toFixed(3)} : 1`;
}
outputElement.innerHTML = `Ratio is &lt;span style="color: #6c5ce7;">${ratio_m_n_text}&lt;/span>. Point P divides the segment AB &lt;span style="color: #6c5ce7;">${divisionType}&lt;/span>.`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Section ratio solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Your Own Coordinates&lt;span class="hx-absolute -hx-mt-20" id="your-own-coordinates">&lt;/span>
&lt;a href="#your-own-coordinates" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Enter the coordinates of your own points below.
&lt;style>
.section-ratio-container {
max-width: 800px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #fcfcfc;
border: 1px solid #e0e0e0;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.section-ratio-container h3 {
text-align: center;
color: #6c5ce7;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-row {
display: flex;
flex-wrap: wrap;
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
flex: 1 1 200px;
min-width: 150px;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
font-size: 1.1rem;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 90px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #6c5ce7;
box-shadow: 0 0 10px rgba(108, 92, 231, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #6c5ce7;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #4a3ebf;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #f3f0ff;
border: 1px solid #c2b2ff;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #4a3ebf;
text-align: center;
}
.solver-error {
color: #d63031;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="section-ratio-container">
&lt;h3>Find the Section Ratio (k:1)&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Enter the coordinates of the endpoints A and B, and the dividing point P.&lt;/p>
&lt;div class="coordinates-input-row">
&lt;div class="input-group">
&lt;label>Point A (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-23" value="1" placeholder="x1">
&lt;input type="number" id="y1-input-23" value="2" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point B (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-23" value="6" placeholder="x2">
&lt;input type="number" id="y2-input-23" value="7" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Point P (x, y):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x-input-23" value="3" placeholder="x">
&lt;input type="number" id="y-input-23" value="4" placeholder="y">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateRatio('23')">Calculate Ratio&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="ratio-output-23">
Ratio will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateRatio = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('ratio-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x_p = getVal('x-input');
const y_p = getVal('y-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x_p) || isNaN(y_p)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const numerator_x = x1 - x_p;
const denominator_x = x_p - x2;
if (denominator_x === 0) {
if (x_p === x2 &amp;&amp; y_p === y2) {
outputElement.innerHTML = `Point P is the endpoint B. Ratio is 0 : 1.`;
return;
}
throw new Error("Division by zero in x-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that x_p = x2.");
}
const k_x = numerator_x / denominator_x;
const numerator_y = y1 - y_p;
const denominator_y = y_p - y2;
if (denominator_y === 0 &amp;&amp; y_p !== y2) {
throw new Error("Division by zero in y-coordinate calculation. The point P might be the endpoint B or lies outside the line segment in a way that y_p = y2.");
}
if (denominator_y === 0 &amp;&amp; y_p === y2) {
} else {
const k_y = numerator_y / denominator_y;
if (Math.abs(k_x - k_y) > 1e-9) {
throw new Error(`Inconsistent ratio: k_x = ${k_x.toFixed(4)}, k_y = ${k_y.toFixed(4)}. The points A, B, and P are not collinear.`);
}
}
const sign = Math.sign(k_x);
let divisionType = sign > 0 ? "internally" : "externally";
let ratio_m_n_text = "";
let simplified_k = Math.abs(k_x);
let tolerance = 1e-6;
for (let d = 1; d &lt;= 1000; d++) {
let n = simplified_k * d;
if (Math.abs(n - Math.round(n)) &lt; tolerance) {
ratio_m_n_text = `${Math.round(n)} : ${d}`;
break;
}
}
if (!ratio_m_n_text) {
ratio_m_n_text = `${simplified_k.toFixed(3)} : 1`;
}
outputElement.innerHTML = `Ratio is &lt;span style="color: #6c5ce7;">${ratio_m_n_text}&lt;/span>. Point P divides the segment AB &lt;span style="color: #6c5ce7;">${divisionType}&lt;/span>.`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Section ratio solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;p>This tool uses the coordinates of a triangle&amp;rsquo;s vertices to calculate its area.&lt;/p>
&lt;h3>Example 1: A Right Triangle&lt;span class="hx-absolute -hx-mt-20" id="example-1-a-right-triangle">&lt;/span>
&lt;a href="#example-1-a-right-triangle" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Let&amp;rsquo;s find the area of a simple right triangle with vertices (0,0), (4,0), and (0,3).
&lt;style>
.triangle-area-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #f7f7f7;
border: 1px solid #e5e5e5;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.triangle-area-container h3 {
text-align: center;
color: #e67e22;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 80px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #e67e22;
box-shadow: 0 0 10px rgba(230, 126, 34, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #e67e22;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #d35400;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #fff5e6;
border: 1px solid #f2c799;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #d35400;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="triangle-area-container">
&lt;h3>Triangle Area Calculator&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Find the area of a triangle by entering the coordinates of its three vertices.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Vertex 1 (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-24" value="0" placeholder="x1">
&lt;input type="number" id="y1-input-24" value="0" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 2 (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-24" value="4" placeholder="x2">
&lt;input type="number" id="y2-input-24" value="0" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 3 (x₃, y₃):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x3-input-24" value="0" placeholder="x3">
&lt;input type="number" id="y3-input-24" value="3" placeholder="y3">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateTriangleArea('24')">Calculate Area&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="area-output-24">
Area will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateTriangleArea = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('area-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x3 = getVal('x3-input');
const y3 = getVal('y3-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const area = 0.5 * Math.abs(
(x1 * y2 + x2 * y3 + x3 * y1) - (y1 * x2 + y2 * x3 + y3 * x1)
);
if (area === 0) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">The points are collinear. Area = 0&lt;/span>`;
return;
}
const formattedArea = area.toFixed(4);
outputElement.innerHTML = `Area = &lt;span style="color: #e67e22;">${formattedArea}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Triangle area solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: The Example from the Code&lt;span class="hx-absolute -hx-mt-20" id="example-2-the-example-from-the-code">&lt;/span>
&lt;a href="#example-2-the-example-from-the-code" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Find the area of a triangle with vertices (0,0), (4,0), and (2,3).
&lt;style>
.triangle-area-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #f7f7f7;
border: 1px solid #e5e5e5;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.triangle-area-container h3 {
text-align: center;
color: #e67e22;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 80px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #e67e22;
box-shadow: 0 0 10px rgba(230, 126, 34, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #e67e22;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #d35400;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #fff5e6;
border: 1px solid #f2c799;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #d35400;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="triangle-area-container">
&lt;h3>Triangle Area Calculator&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Find the area of a triangle by entering the coordinates of its three vertices.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Vertex 1 (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-25" value="0" placeholder="x1">
&lt;input type="number" id="y1-input-25" value="0" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 2 (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-25" value="4" placeholder="x2">
&lt;input type="number" id="y2-input-25" value="0" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 3 (x₃, y₃):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x3-input-25" value="2" placeholder="x3">
&lt;input type="number" id="y3-input-25" value="3" placeholder="y3">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateTriangleArea('25')">Calculate Area&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="area-output-25">
Area will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateTriangleArea = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('area-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x3 = getVal('x3-input');
const y3 = getVal('y3-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const area = 0.5 * Math.abs(
(x1 * y2 + x2 * y3 + x3 * y1) - (y1 * x2 + y2 * x3 + y3 * x1)
);
if (area === 0) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">The points are collinear. Area = 0&lt;/span>`;
return;
}
const formattedArea = area.toFixed(4);
outputElement.innerHTML = `Area = &lt;span style="color: #e67e22;">${formattedArea}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Triangle area solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 3: Collinear Points&lt;span class="hx-absolute -hx-mt-20" id="example-3-collinear-points">&lt;/span>
&lt;a href="#example-3-collinear-points" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>What happens when the points are on the same line?
&lt;style>
.triangle-area-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #f7f7f7;
border: 1px solid #e5e5e5;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.triangle-area-container h3 {
text-align: center;
color: #e67e22;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 80px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #e67e22;
box-shadow: 0 0 10px rgba(230, 126, 34, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #e67e22;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #d35400;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #fff5e6;
border: 1px solid #f2c799;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #d35400;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="triangle-area-container">
&lt;h3>Triangle Area Calculator&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Find the area of a triangle by entering the coordinates of its three vertices.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Vertex 1 (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-26" value="1" placeholder="x1">
&lt;input type="number" id="y1-input-26" value="1" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 2 (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-26" value="2" placeholder="x2">
&lt;input type="number" id="y2-input-26" value="2" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 3 (x₃, y₃):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x3-input-26" value="3" placeholder="x3">
&lt;input type="number" id="y3-input-26" value="3" placeholder="y3">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateTriangleArea('26')">Calculate Area&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="area-output-26">
Area will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateTriangleArea = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('area-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x3 = getVal('x3-input');
const y3 = getVal('y3-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const area = 0.5 * Math.abs(
(x1 * y2 + x2 * y3 + x3 * y1) - (y1 * x2 + y2 * x3 + y3 * x1)
);
if (area === 0) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">The points are collinear. Area = 0&lt;/span>`;
return;
}
const formattedArea = area.toFixed(4);
outputElement.innerHTML = `Area = &lt;span style="color: #e67e22;">${formattedArea}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Triangle area solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Your Own Triangle&lt;span class="hx-absolute -hx-mt-20" id="your-own-triangle">&lt;/span>
&lt;a href="#your-own-triangle" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Enter the coordinates of your own triangle below.
&lt;style>
.triangle-area-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #f7f7f7;
border: 1px solid #e5e5e5;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
}
.triangle-area-container h3 {
text-align: center;
color: #e67e22;
margin-bottom: 1.5rem;
font-size: 2rem;
}
.coordinates-input-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 2rem;
justify-content: center;
margin-bottom: 2rem;
}
.input-group {
display: flex;
flex-direction: column;
align-items: center;
}
.input-group label {
font-weight: 600;
margin-bottom: 0.5rem;
color: #555;
text-align: center;
}
.input-pair {
display: flex;
gap: 0.5rem;
}
.input-pair input[type="number"] {
width: 100%;
max-width: 80px;
padding: 0.8rem;
border: 2px solid #ccc;
border-radius: 8px;
font-size: 1.1rem;
text-align: center;
transition: border-color 0.3s, box-shadow 0.3s;
}
.input-pair input[type="number"]:focus {
outline: none;
border-color: #e67e22;
box-shadow: 0 0 10px rgba(230, 126, 34, 0.4);
}
.solver-button-container {
text-align: center;
}
.solver-button {
padding: 1rem 2.5rem;
background-color: #e67e22;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #d35400;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2.5rem;
padding: 1.5rem;
background-color: #fff5e6;
border: 1px solid #f2c799;
border-radius: 10px;
font-size: 1.5rem;
font-weight: bold;
color: #d35400;
text-align: center;
}
.solver-error {
color: #c0392b;
font-weight: bold;
text-align: center;
}
&lt;/style>
&lt;div class="triangle-area-container">
&lt;h3>Triangle Area Calculator&lt;/h3>
&lt;p style="text-align: center; font-size: 1.1rem; color: #666;">Find the area of a triangle by entering the coordinates of its three vertices.&lt;/p>
&lt;div class="coordinates-input-grid">
&lt;div class="input-group">
&lt;label>Vertex 1 (x₁, y₁):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x1-input-27" value="0" placeholder="x1">
&lt;input type="number" id="y1-input-27" value="0" placeholder="y1">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 2 (x₂, y₂):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x2-input-27" value="4" placeholder="x2">
&lt;input type="number" id="y2-input-27" value="0" placeholder="y2">
&lt;/div>
&lt;/div>
&lt;div class="input-group">
&lt;label>Vertex 3 (x₃, y₃):&lt;/label>
&lt;div class="input-pair">
&lt;input type="number" id="x3-input-27" value="2" placeholder="x3">
&lt;input type="number" id="y3-input-27" value="3" placeholder="y3">
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="solver-button-container">
&lt;button class="solver-button" onclick="calculateTriangleArea('27')">Calculate Area&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="area-output-27">
Area will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.calculateTriangleArea = function(ordinal) {
const getVal = (id) => parseFloat(document.getElementById(id + '-' + ordinal).value);
const outputElement = document.getElementById('area-output-' + ordinal);
try {
const x1 = getVal('x1-input');
const y1 = getVal('y1-input');
const x2 = getVal('x2-input');
const y2 = getVal('y2-input');
const x3 = getVal('x3-input');
const y3 = getVal('y3-input');
if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3)) {
throw new Error("Please enter valid numbers for all coordinates.");
}
const area = 0.5 * Math.abs(
(x1 * y2 + x2 * y3 + x3 * y1) - (y1 * x2 + y2 * x3 + y3 * x1)
);
if (area === 0) {
outputElement.innerHTML = `&lt;span style="color: #2c3e50;">The points are collinear. Area = 0&lt;/span>`;
return;
}
const formattedArea = area.toFixed(4);
outputElement.innerHTML = `Area = &lt;span style="color: #e67e22;">${formattedArea}&lt;/span>`;
} catch (error) {
outputElement.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Triangle area solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;p>This interactive tool allows you to solve for the value of &amp;lsquo;x&amp;rsquo; in a linear equation. Just type your equation in the box below and hit &amp;ldquo;Solve&amp;rdquo;.&lt;/p>
&lt;h3>Example 1: Your Equation&lt;span class="hx-absolute -hx-mt-20" id="example-1-your-equation">&lt;/span>
&lt;a href="#example-1-your-equation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Here is the example you provided, pre-filled.
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/12.4.2/math.min.js">&lt;/script>
&lt;style>
.linear-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #ffffff;
border: 1px solid #e9e9e9;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
text-align: center;
}
.linear-solver-container h3 {
color: #007bff;
margin-bottom: 1rem;
font-size: 2rem;
}
.linear-solver-container p {
font-size: 1.1rem;
color: #666;
margin-bottom: 2rem;
}
.solver-input-group {
display: flex;
justify-content: center;
align-items: center;
gap: 1rem;
flex-wrap: wrap;
}
.solver-input-group input[type="text"] {
flex-grow: 1;
max-width: 400px;
padding: 1rem;
font-size: 1.1rem;
border: 2px solid #ccc;
border-radius: 8px;
transition: border-color 0.3s, box-shadow 0.3s;
}
.solver-input-group input[type="text"]:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}
.solver-button {
padding: 1rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #eaf6ff;
border: 1px solid #cce5ff;
border-radius: 10px;
font-size: 1.3rem;
font-family: 'Courier New', Courier, monospace;
color: #004085;
min-height: 50px;
word-wrap: break-word;
text-align: center;
font-weight: bold;
}
.solver-error {
color: #dc3545;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.linear-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e2e6ef;
box-shadow: 0 8px 25px rgba(0,0,0,0.5);
}
.linear-solver-container h3 {
color: #66aaff;
}
.linear-solver-container p {
color: #b0b8c9;
}
.solver-input-group input[type="text"] {
background-color: #232a36;
color: #e2e6ef;
border-color: #2d3543;
}
.solver-input-group input[type="text"]:focus {
border-color: #66aaff;
box-shadow: 0 0 10px rgba(102,170,255,0.3);
}
.solver-button {
background-color: #2257b3;
color: #e2e6ef;
}
.solver-button:hover {
background-color: #173a6c;
}
.solver-result {
background-color: #1a273a;
border-color: #2d3543;
color: #66aaff;
}
.solver-error {
color: #ff6b81;
}
}
@media (max-width: 600px) {
.linear-solver-container {
padding: 1rem;
max-width: 98vw;
}
.solver-input-group {
flex-direction: column;
align-items: stretch;
gap: 0.75rem;
}
.solver-input-group input[type="text"] {
max-width: 100%;
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-button {
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
}
&lt;/style>
&lt;div class="linear-solver-container">
&lt;h3>Linear Equation Solver&lt;/h3>
&lt;p>Enter a linear equation with 'x' (e.g., `2*x + 5 = 15` or `7 + x = 3*x`).&lt;/p>
&lt;div class="solver-input-group">
&lt;input type="text" id="equation-input-28" value="5&amp;#43;x = 78-x &amp;#43; 8*7" placeholder="Enter your equation here..." autocomplete="off">
&lt;button class="solver-button" onclick="solveLinearEquation('28')">Solve for x&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-28">
Solution will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.solveLinearEquation = function(ordinal) {
const equationInput = document.getElementById('equation-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const equationString = equationInput.value;
if (typeof math === 'undefined') {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded. Check your internet connection.&lt;/span>';
return;
}
if (!equationString.includes('=')) {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Please use an equals sign (=) to define the equation.&lt;/span>';
return;
}
try {
const parts = equationString.split('=');
if (parts.length !== 2) {
throw new Error("Invalid equation format. Use a single '='.");
}
const lhs = parts[0].trim();
const rhs = parts[1].trim();
const expr = `(${lhs}) - (${rhs})`;
const node = math.parse(expr);
const simplified = math.simplify(node);
let coeffX = 0, constant = 0;
simplified.traverse(function (n) {
if (n.isSymbolNode &amp;&amp; n.name === 'x') {
coeffX += 1;
} else if (n.isOperatorNode &amp;&amp; n.op === '*') {
if (n.args[0].isConstantNode &amp;&amp; n.args[1].isSymbolNode &amp;&amp; n.args[1].name === 'x') {
coeffX += parseFloat(n.args[0].value);
}
if (n.args[1].isConstantNode &amp;&amp; n.args[0].isSymbolNode &amp;&amp; n.args[0].name === 'x') {
coeffX += parseFloat(n.args[1].value);
}
} else if (n.isConstantNode) {
constant += parseFloat(n.value);
}
});
if (coeffX === 0) {
if (math.abs(constant) &lt; 1e-10) {
solutionOutput.innerHTML = `&lt;span style="color: #007bff;">Infinite solutions. This is an identity.&lt;/span>`;
} else {
solutionOutput.innerHTML = `&lt;span class="solver-error">No solution. The equation is inconsistent.&lt;/span>`;
}
return;
}
const x = -constant / coeffX;
solutionOutput.innerHTML = `x = &lt;span style="color: #007bff;">${Number(x).toLocaleString(undefined, { maximumFractionDigits: 10 })}&lt;/span>`;
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 2: Another Equation&lt;span class="hx-absolute -hx-mt-20" id="example-2-another-equation">&lt;/span>
&lt;a href="#example-2-another-equation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Try solving this one: 3x + 10 = 2x - 5
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/12.4.2/math.min.js">&lt;/script>
&lt;style>
.linear-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #ffffff;
border: 1px solid #e9e9e9;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
text-align: center;
}
.linear-solver-container h3 {
color: #007bff;
margin-bottom: 1rem;
font-size: 2rem;
}
.linear-solver-container p {
font-size: 1.1rem;
color: #666;
margin-bottom: 2rem;
}
.solver-input-group {
display: flex;
justify-content: center;
align-items: center;
gap: 1rem;
flex-wrap: wrap;
}
.solver-input-group input[type="text"] {
flex-grow: 1;
max-width: 400px;
padding: 1rem;
font-size: 1.1rem;
border: 2px solid #ccc;
border-radius: 8px;
transition: border-color 0.3s, box-shadow 0.3s;
}
.solver-input-group input[type="text"]:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}
.solver-button {
padding: 1rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #eaf6ff;
border: 1px solid #cce5ff;
border-radius: 10px;
font-size: 1.3rem;
font-family: 'Courier New', Courier, monospace;
color: #004085;
min-height: 50px;
word-wrap: break-word;
text-align: center;
font-weight: bold;
}
.solver-error {
color: #dc3545;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.linear-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e2e6ef;
box-shadow: 0 8px 25px rgba(0,0,0,0.5);
}
.linear-solver-container h3 {
color: #66aaff;
}
.linear-solver-container p {
color: #b0b8c9;
}
.solver-input-group input[type="text"] {
background-color: #232a36;
color: #e2e6ef;
border-color: #2d3543;
}
.solver-input-group input[type="text"]:focus {
border-color: #66aaff;
box-shadow: 0 0 10px rgba(102,170,255,0.3);
}
.solver-button {
background-color: #2257b3;
color: #e2e6ef;
}
.solver-button:hover {
background-color: #173a6c;
}
.solver-result {
background-color: #1a273a;
border-color: #2d3543;
color: #66aaff;
}
.solver-error {
color: #ff6b81;
}
}
@media (max-width: 600px) {
.linear-solver-container {
padding: 1rem;
max-width: 98vw;
}
.solver-input-group {
flex-direction: column;
align-items: stretch;
gap: 0.75rem;
}
.solver-input-group input[type="text"] {
max-width: 100%;
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-button {
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
}
&lt;/style>
&lt;div class="linear-solver-container">
&lt;h3>Linear Equation Solver&lt;/h3>
&lt;p>Enter a linear equation with 'x' (e.g., `2*x + 5 = 15` or `7 + x = 3*x`).&lt;/p>
&lt;div class="solver-input-group">
&lt;input type="text" id="equation-input-29" value="3*x &amp;#43; 10 = 2*x - 5" placeholder="Enter your equation here..." autocomplete="off">
&lt;button class="solver-button" onclick="solveLinearEquation('29')">Solve for x&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-29">
Solution will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.solveLinearEquation = function(ordinal) {
const equationInput = document.getElementById('equation-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const equationString = equationInput.value;
if (typeof math === 'undefined') {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded. Check your internet connection.&lt;/span>';
return;
}
if (!equationString.includes('=')) {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Please use an equals sign (=) to define the equation.&lt;/span>';
return;
}
try {
const parts = equationString.split('=');
if (parts.length !== 2) {
throw new Error("Invalid equation format. Use a single '='.");
}
const lhs = parts[0].trim();
const rhs = parts[1].trim();
const expr = `(${lhs}) - (${rhs})`;
const node = math.parse(expr);
const simplified = math.simplify(node);
let coeffX = 0, constant = 0;
simplified.traverse(function (n) {
if (n.isSymbolNode &amp;&amp; n.name === 'x') {
coeffX += 1;
} else if (n.isOperatorNode &amp;&amp; n.op === '*') {
if (n.args[0].isConstantNode &amp;&amp; n.args[1].isSymbolNode &amp;&amp; n.args[1].name === 'x') {
coeffX += parseFloat(n.args[0].value);
}
if (n.args[1].isConstantNode &amp;&amp; n.args[0].isSymbolNode &amp;&amp; n.args[0].name === 'x') {
coeffX += parseFloat(n.args[1].value);
}
} else if (n.isConstantNode) {
constant += parseFloat(n.value);
}
});
if (coeffX === 0) {
if (math.abs(constant) &lt; 1e-10) {
solutionOutput.innerHTML = `&lt;span style="color: #007bff;">Infinite solutions. This is an identity.&lt;/span>`;
} else {
solutionOutput.innerHTML = `&lt;span class="solver-error">No solution. The equation is inconsistent.&lt;/span>`;
}
return;
}
const x = -constant / coeffX;
solutionOutput.innerHTML = `x = &lt;span style="color: #007bff;">${Number(x).toLocaleString(undefined, { maximumFractionDigits: 10 })}&lt;/span>`;
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Example 3: Identity Equation&lt;span class="hx-absolute -hx-mt-20" id="example-3-identity-equation">&lt;/span>
&lt;a href="#example-3-identity-equation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>This one has infinite solutions.
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/12.4.2/math.min.js">&lt;/script>
&lt;style>
.linear-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #ffffff;
border: 1px solid #e9e9e9;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
text-align: center;
}
.linear-solver-container h3 {
color: #007bff;
margin-bottom: 1rem;
font-size: 2rem;
}
.linear-solver-container p {
font-size: 1.1rem;
color: #666;
margin-bottom: 2rem;
}
.solver-input-group {
display: flex;
justify-content: center;
align-items: center;
gap: 1rem;
flex-wrap: wrap;
}
.solver-input-group input[type="text"] {
flex-grow: 1;
max-width: 400px;
padding: 1rem;
font-size: 1.1rem;
border: 2px solid #ccc;
border-radius: 8px;
transition: border-color 0.3s, box-shadow 0.3s;
}
.solver-input-group input[type="text"]:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}
.solver-button {
padding: 1rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #eaf6ff;
border: 1px solid #cce5ff;
border-radius: 10px;
font-size: 1.3rem;
font-family: 'Courier New', Courier, monospace;
color: #004085;
min-height: 50px;
word-wrap: break-word;
text-align: center;
font-weight: bold;
}
.solver-error {
color: #dc3545;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.linear-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e2e6ef;
box-shadow: 0 8px 25px rgba(0,0,0,0.5);
}
.linear-solver-container h3 {
color: #66aaff;
}
.linear-solver-container p {
color: #b0b8c9;
}
.solver-input-group input[type="text"] {
background-color: #232a36;
color: #e2e6ef;
border-color: #2d3543;
}
.solver-input-group input[type="text"]:focus {
border-color: #66aaff;
box-shadow: 0 0 10px rgba(102,170,255,0.3);
}
.solver-button {
background-color: #2257b3;
color: #e2e6ef;
}
.solver-button:hover {
background-color: #173a6c;
}
.solver-result {
background-color: #1a273a;
border-color: #2d3543;
color: #66aaff;
}
.solver-error {
color: #ff6b81;
}
}
@media (max-width: 600px) {
.linear-solver-container {
padding: 1rem;
max-width: 98vw;
}
.solver-input-group {
flex-direction: column;
align-items: stretch;
gap: 0.75rem;
}
.solver-input-group input[type="text"] {
max-width: 100%;
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-button {
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
}
&lt;/style>
&lt;div class="linear-solver-container">
&lt;h3>Linear Equation Solver&lt;/h3>
&lt;p>Enter a linear equation with 'x' (e.g., `2*x + 5 = 15` or `7 + x = 3*x`).&lt;/p>
&lt;div class="solver-input-group">
&lt;input type="text" id="equation-input-30" value="2*x &amp;#43; 4 = 2*(x &amp;#43; 2)" placeholder="Enter your equation here..." autocomplete="off">
&lt;button class="solver-button" onclick="solveLinearEquation('30')">Solve for x&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-30">
Solution will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.solveLinearEquation = function(ordinal) {
const equationInput = document.getElementById('equation-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const equationString = equationInput.value;
if (typeof math === 'undefined') {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded. Check your internet connection.&lt;/span>';
return;
}
if (!equationString.includes('=')) {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Please use an equals sign (=) to define the equation.&lt;/span>';
return;
}
try {
const parts = equationString.split('=');
if (parts.length !== 2) {
throw new Error("Invalid equation format. Use a single '='.");
}
const lhs = parts[0].trim();
const rhs = parts[1].trim();
const expr = `(${lhs}) - (${rhs})`;
const node = math.parse(expr);
const simplified = math.simplify(node);
let coeffX = 0, constant = 0;
simplified.traverse(function (n) {
if (n.isSymbolNode &amp;&amp; n.name === 'x') {
coeffX += 1;
} else if (n.isOperatorNode &amp;&amp; n.op === '*') {
if (n.args[0].isConstantNode &amp;&amp; n.args[1].isSymbolNode &amp;&amp; n.args[1].name === 'x') {
coeffX += parseFloat(n.args[0].value);
}
if (n.args[1].isConstantNode &amp;&amp; n.args[0].isSymbolNode &amp;&amp; n.args[0].name === 'x') {
coeffX += parseFloat(n.args[1].value);
}
} else if (n.isConstantNode) {
constant += parseFloat(n.value);
}
});
if (coeffX === 0) {
if (math.abs(constant) &lt; 1e-10) {
solutionOutput.innerHTML = `&lt;span style="color: #007bff;">Infinite solutions. This is an identity.&lt;/span>`;
} else {
solutionOutput.innerHTML = `&lt;span class="solver-error">No solution. The equation is inconsistent.&lt;/span>`;
}
return;
}
const x = -constant / coeffX;
solutionOutput.innerHTML = `x = &lt;span style="color: #007bff;">${Number(x).toLocaleString(undefined, { maximumFractionDigits: 10 })}&lt;/span>`;
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
&lt;/script>&lt;/p>
&lt;hr>
&lt;h3>Your Own Equation&lt;span class="hx-absolute -hx-mt-20" id="your-own-equation">&lt;/span>
&lt;a href="#your-own-equation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/12.4.2/math.min.js">&lt;/script>
&lt;style>
.linear-solver-container {
max-width: 700px;
margin: 2rem auto;
padding: 2.5rem;
background-color: #ffffff;
border: 1px solid #e9e9e9;
border-radius: 12px;
box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
color: #333;
text-align: center;
}
.linear-solver-container h3 {
color: #007bff;
margin-bottom: 1rem;
font-size: 2rem;
}
.linear-solver-container p {
font-size: 1.1rem;
color: #666;
margin-bottom: 2rem;
}
.solver-input-group {
display: flex;
justify-content: center;
align-items: center;
gap: 1rem;
flex-wrap: wrap;
}
.solver-input-group input[type="text"] {
flex-grow: 1;
max-width: 400px;
padding: 1rem;
font-size: 1.1rem;
border: 2px solid #ccc;
border-radius: 8px;
transition: border-color 0.3s, box-shadow 0.3s;
}
.solver-input-group input[type="text"]:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}
.solver-button {
padding: 1rem 2rem;
background-color: #007bff;
color: #fff;
border: none;
border-radius: 8px;
font-size: 1.1rem;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s, transform 0.1s;
}
.solver-button:hover {
background-color: #0056b3;
transform: translateY(-2px);
}
.solver-result {
margin-top: 2rem;
padding: 1.5rem;
background-color: #eaf6ff;
border: 1px solid #cce5ff;
border-radius: 10px;
font-size: 1.3rem;
font-family: 'Courier New', Courier, monospace;
color: #004085;
min-height: 50px;
word-wrap: break-word;
text-align: center;
font-weight: bold;
}
.solver-error {
color: #dc3545;
font-weight: bold;
text-align: center;
}
html:is(.dark) {
.linear-solver-container {
background-color: #181c24;
border-color: #232a36;
color: #e2e6ef;
box-shadow: 0 8px 25px rgba(0,0,0,0.5);
}
.linear-solver-container h3 {
color: #66aaff;
}
.linear-solver-container p {
color: #b0b8c9;
}
.solver-input-group input[type="text"] {
background-color: #232a36;
color: #e2e6ef;
border-color: #2d3543;
}
.solver-input-group input[type="text"]:focus {
border-color: #66aaff;
box-shadow: 0 0 10px rgba(102,170,255,0.3);
}
.solver-button {
background-color: #2257b3;
color: #e2e6ef;
}
.solver-button:hover {
background-color: #173a6c;
}
.solver-result {
background-color: #1a273a;
border-color: #2d3543;
color: #66aaff;
}
.solver-error {
color: #ff6b81;
}
}
@media (max-width: 600px) {
.linear-solver-container {
padding: 1rem;
max-width: 98vw;
}
.solver-input-group {
flex-direction: column;
align-items: stretch;
gap: 0.75rem;
}
.solver-input-group input[type="text"] {
max-width: 100%;
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-button {
width: 100%;
font-size: 1rem;
padding: 0.75rem;
}
.solver-result {
font-size: 1rem;
padding: 1rem;
}
}
&lt;/style>
&lt;div class="linear-solver-container">
&lt;h3>Linear Equation Solver&lt;/h3>
&lt;p>Enter a linear equation with 'x' (e.g., `2*x + 5 = 15` or `7 + x = 3*x`).&lt;/p>
&lt;div class="solver-input-group">
&lt;input type="text" id="equation-input-31" value="" placeholder="Enter your equation here..." autocomplete="off">
&lt;button class="solver-button" onclick="solveLinearEquation('31')">Solve for x&lt;/button>
&lt;/div>
&lt;div class="solver-result" id="solution-output-31">
Solution will appear here.
&lt;/div>
&lt;/div>
&lt;script>
window.solveLinearEquation = function(ordinal) {
const equationInput = document.getElementById('equation-input-' + ordinal);
const solutionOutput = document.getElementById('solution-output-' + ordinal);
const equationString = equationInput.value;
if (typeof math === 'undefined') {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Math.js library not loaded. Check your internet connection.&lt;/span>';
return;
}
if (!equationString.includes('=')) {
solutionOutput.innerHTML = '&lt;span class="solver-error">Error: Please use an equals sign (=) to define the equation.&lt;/span>';
return;
}
try {
const parts = equationString.split('=');
if (parts.length !== 2) {
throw new Error("Invalid equation format. Use a single '='.");
}
const lhs = parts[0].trim();
const rhs = parts[1].trim();
const expr = `(${lhs}) - (${rhs})`;
const node = math.parse(expr);
const simplified = math.simplify(node);
let coeffX = 0, constant = 0;
simplified.traverse(function (n) {
if (n.isSymbolNode &amp;&amp; n.name === 'x') {
coeffX += 1;
} else if (n.isOperatorNode &amp;&amp; n.op === '*') {
if (n.args[0].isConstantNode &amp;&amp; n.args[1].isSymbolNode &amp;&amp; n.args[1].name === 'x') {
coeffX += parseFloat(n.args[0].value);
}
if (n.args[1].isConstantNode &amp;&amp; n.args[0].isSymbolNode &amp;&amp; n.args[0].name === 'x') {
coeffX += parseFloat(n.args[1].value);
}
} else if (n.isConstantNode) {
constant += parseFloat(n.value);
}
});
if (coeffX === 0) {
if (math.abs(constant) &lt; 1e-10) {
solutionOutput.innerHTML = `&lt;span style="color: #007bff;">Infinite solutions. This is an identity.&lt;/span>`;
} else {
solutionOutput.innerHTML = `&lt;span class="solver-error">No solution. The equation is inconsistent.&lt;/span>`;
}
return;
}
const x = -constant / coeffX;
solutionOutput.innerHTML = `x = &lt;span style="color: #007bff;">${Number(x).toLocaleString(undefined, { maximumFractionDigits: 10 })}&lt;/span>`;
} catch (error) {
solutionOutput.innerHTML = `&lt;span class="solver-error">Error: ${error.message}&lt;/span>`;
console.error("Solver error:", error);
}
}
&lt;/script></description></item><item><title>question 2</title><link>/exercises/graded-assignments/mathematics-1/q2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/exercises/graded-assignments/mathematics-1/q2/</guid><description>
15
&lt;div>
&lt;h3>Formula Calculation&lt;/h3>
&lt;p>Formula: n * m&lt;/p>
&lt;p>Results: 10, 30, 60&lt;/p>
&lt;/div>
&lt;div>
&lt;h3>Formula Calculation&lt;/h3>
&lt;p>Formula: n &amp;#43; m&lt;/p>
&lt;p>Results: 11, 8&lt;/p>
&lt;/div>
&lt;h3>Math Calculator&lt;span class="hx-absolute -hx-mt-20" id="math-calculator">&lt;/span>
&lt;a href="#math-calculator" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="n1">n1:&lt;/label>
&lt;input type="number" id="n1" value="1">
&lt;/div>
&lt;div>
&lt;label for="m1">m1:&lt;/label>
&lt;input type="number" id="m1" value="4">
&lt;/div>
&lt;div>
&lt;label for="n2">n2:&lt;/label>
&lt;input type="number" id="n2" value="2">
&lt;/div>
&lt;div>
&lt;label for="m2">m2:&lt;/label>
&lt;input type="number" id="m2" value="5">
&lt;/div>
&lt;div>
&lt;label for="n3">n3:&lt;/label>
&lt;input type="number" id="n3" value="3">
&lt;/div>
&lt;div>
&lt;label for="m3">m3:&lt;/label>
&lt;input type="number" id="m3" value="6">
&lt;/div>
&lt;div>
&lt;label for="formula">Formula:&lt;/label>
&lt;input type="text" id="formula" value="n1 * m1 &amp;#43; n2 - m2 / n3">
&lt;/div>
&lt;button onclick="calculate()">Solve&lt;/button>
&lt;div id="result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calculate() {
const n1 = parseFloat(document.getElementById('n1').value);
const m1 = parseFloat(document.getElementById('m1').value);
const n2 = parseFloat(document.getElementById('n2').value);
const m2 = parseFloat(document.getElementById('m2').value);
const n3 = parseFloat(document.getElementById('n3').value);
const m3 = parseFloat(document.getElementById('m3').value);
const formula = document.getElementById('formula').value;
const resultDiv = document.getElementById('result');
try {
let expression = formula.replace(/n1/g, n1);
expression = expression.replace(/m1/g, m1);
expression = expression.replace(/n2/g, n2);
expression = expression.replace(/m2/g, m2);
expression = expression.replace(/n3/g, n3);
expression = expression.replace(/m3/g, m3);
const finalAnswer = eval(expression);
resultDiv.textContent = `Result: ${finalAnswer}`;
} catch (error) {
resultDiv.textContent = `Result: Error in formula`;
console.error("Formula evaluation error:", error);
}
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style> -->
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="n1">n1:&lt;/label>
&lt;input type="number" id="n1" value="1">
&lt;/div>
&lt;div>
&lt;label for="m1">m1:&lt;/label>
&lt;input type="number" id="m1" value="4">
&lt;/div>
&lt;div>
&lt;label for="n2">n2:&lt;/label>
&lt;input type="number" id="n2" value="2">
&lt;/div>
&lt;div>
&lt;label for="m2">m2:&lt;/label>
&lt;input type="number" id="m2" value="5">
&lt;/div>
&lt;div>
&lt;label for="n3">n3:&lt;/label>
&lt;input type="number" id="n3" value="3">
&lt;/div>
&lt;div>
&lt;label for="m3">m3:&lt;/label>
&lt;input type="number" id="m3" value="6">
&lt;/div>
&lt;div>
&lt;label for="formula">Formula:&lt;/label>
&lt;input type="text" id="formula" value="(n1&amp;#43;n2)^3">
&lt;/div>
&lt;button onclick="calculate()">Solve&lt;/button>
&lt;div id="result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calculate() {
const n1 = parseFloat(document.getElementById('n1').value);
const m1 = parseFloat(document.getElementById('m1').value);
const n2 = parseFloat(document.getElementById('n2').value);
const m2 = parseFloat(document.getElementById('m2').value);
const n3 = parseFloat(document.getElementById('n3').value);
const m3 = parseFloat(document.getElementById('m3').value);
const formula = document.getElementById('formula').value;
const resultDiv = document.getElementById('result');
try {
let expression = formula.replace(/n1/g, n1);
expression = expression.replace(/m1/g, m1);
expression = expression.replace(/n2/g, n2);
expression = expression.replace(/m2/g, m2);
expression = expression.replace(/n3/g, n3);
expression = expression.replace(/m3/g, m3);
const finalAnswer = eval(expression);
resultDiv.textContent = `Result: ${finalAnswer}`;
} catch (error) {
resultDiv.textContent = `Result: Error in formula`;
console.error("Formula evaluation error:", error);
}
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style> -->
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="a">a:&lt;/label>
&lt;input type="number" id="a" value="4">
&lt;/div>&lt;div>
&lt;label for="b">b:&lt;/label>
&lt;input type="number" id="b" value="5">
&lt;/div>&lt;div>
&lt;label for="n1">n1:&lt;/label>
&lt;input type="number" id="n1" value="2">
&lt;/div>&lt;div>
&lt;label for="n2">n2:&lt;/label>
&lt;input type="number" id="n2" value="3">
&lt;/div>
&lt;div>
&lt;label for="formula">Formula:&lt;/label>
&lt;input type="text" id="formula" value="n1*a &amp;#43; n2*b">
&lt;/div>
&lt;button onclick="calculate()">Solve&lt;/button>
&lt;div id="result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calculate() {
const inputs = document.querySelectorAll('#calculator-container input[type="number"]');
let formula = document.getElementById('formula').value;
const resultDiv = document.getElementById('result');
inputs.forEach(input => {
const re = new RegExp('\\b' + input.id + '\\b', 'g');
formula = formula.replace(re, input.value);
});
try {
const finalAnswer = eval(formula);
resultDiv.textContent = `Result: ${finalAnswer}`;
} catch (error) {
resultDiv.textContent = `Result: Error in formula`;
console.error("Formula evaluation error:", error);
}
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style>
-->
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="x">x:&lt;/label>
&lt;input type="number" id="x" value="0.5">
&lt;/div>
&lt;div>
&lt;label for="formula">Formula:&lt;/label>
&lt;input type="text" id="formula" value="Math.asin(x) * 180 / Math.PI">
&lt;/div>
&lt;button onclick="calculate()">Solve&lt;/button>
&lt;div id="result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calculate() {
const inputs = document.querySelectorAll('#calculator-container input[type="number"]');
let formula = document.getElementById('formula').value;
const resultDiv = document.getElementById('result');
inputs.forEach(input => {
const re = new RegExp('\\b' + input.id + '\\b', 'g');
formula = formula.replace(re, input.value);
});
try {
const finalAnswer = eval(formula);
resultDiv.textContent = `Result: ${finalAnswer}`;
} catch (error) {
resultDiv.textContent = `Result: Error in formula`;
console.error("Formula evaluation error:", error);
}
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style>
-->
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="a">a:&lt;/label>
&lt;input type="number" id="a" value="2">
&lt;/div>&lt;div>
&lt;label for="b">b:&lt;/label>
&lt;input type="number" id="b" value="3">
&lt;/div>
&lt;div>
&lt;label for="formula">formula:&lt;/label>
&lt;input type="text" id="formula" value="a * b &amp;#43; 5">
&lt;span id="result-formula" class="result-display">&lt;/span>
&lt;/div>
&lt;button type="button" onclick="calculate()">Solve&lt;/button>
&lt;/div>
&lt;script>
function calculate() {
const container = document.getElementById('calculator-container');
const inputs = container.querySelectorAll('input[type="number"]');
const formulas = container.querySelectorAll('input[type="text"]');
const vars = {};
inputs.forEach(input => {
const varName = input.id;
vars[varName] = input.value === "" ? "0" : input.value;
});
formulas.forEach(formulaInput => {
let formula = formulaInput.value;
Object.keys(vars).forEach(varName => {
const re = new RegExp('\\b' + varName + '\\b', 'g');
formula = formula.replace(re, vars[varName]);
});
const resultSpan = document.getElementById('result-' + formulaInput.id);
try {
const finalAnswer = eval(formula);
resultSpan.textContent = ` = ${finalAnswer}`;
} catch (error) {
resultSpan.textContent = ` = Error`;
}
});
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style> -->
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="a">a:&lt;/label>
&lt;input type="number" id="a" value="2">
&lt;/div>&lt;div>
&lt;label for="b">b:&lt;/label>
&lt;input type="number" id="b" value="3">
&lt;/div>
&lt;div>
&lt;label for="formula">formula:&lt;/label>
&lt;input type="text" id="formula" value="a * b - 5">
&lt;span id="result-formula" class="result-display">&lt;/span>
&lt;/div>
&lt;button type="button" onclick="calculate()">Solve&lt;/button>
&lt;/div>
&lt;script>
function calculate() {
const container = document.getElementById('calculator-container');
const inputs = container.querySelectorAll('input[type="number"]');
const formulas = container.querySelectorAll('input[type="text"]');
const vars = {};
inputs.forEach(input => {
const varName = input.id;
vars[varName] = input.value === "" ? "0" : input.value;
});
formulas.forEach(formulaInput => {
let formula = formulaInput.value;
Object.keys(vars).forEach(varName => {
const re = new RegExp('\\b' + varName + '\\b', 'g');
formula = formula.replace(re, vars[varName]);
});
const resultSpan = document.getElementById('result-' + formulaInput.id);
try {
const finalAnswer = eval(formula);
resultSpan.textContent = ` = ${finalAnswer}`;
} catch (error) {
resultSpan.textContent = ` = Error`;
}
});
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style> -->
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="m1">m1:&lt;/label>
&lt;input type="number" id="m1" value="4">
&lt;/div>&lt;div>
&lt;label for="m2">m2:&lt;/label>
&lt;input type="number" id="m2" value="5">
&lt;/div>&lt;div>
&lt;label for="n1">n1:&lt;/label>
&lt;input type="number" id="n1" value="2">
&lt;/div>&lt;div>
&lt;label for="n2">n2:&lt;/label>
&lt;input type="number" id="n2" value="3">
&lt;/div>
&lt;div>
&lt;label for="formula1">formula1:&lt;/label>
&lt;input type="text" id="formula1" value="n1 &amp;#43; m1">
&lt;span id="result-formula1" class="result-display">&lt;/span>
&lt;/div>
&lt;div>
&lt;label for="formula2">formula2:&lt;/label>
&lt;input type="text" id="formula2" value="n2 * m2">
&lt;span id="result-formula2" class="result-display">&lt;/span>
&lt;/div>
&lt;button type="button" onclick="calculate()">Solve&lt;/button>
&lt;/div>
&lt;script>
function calculate() {
const container = document.getElementById('calculator-container');
const inputs = container.querySelectorAll('input[type="number"]');
const formulas = container.querySelectorAll('input[type="text"]');
const vars = {};
inputs.forEach(input => {
const varName = input.id;
vars[varName] = input.value === "" ? "0" : input.value;
});
formulas.forEach(formulaInput => {
let formula = formulaInput.value;
Object.keys(vars).forEach(varName => {
const re = new RegExp('\\b' + varName + '\\b', 'g');
formula = formula.replace(re, vars[varName]);
});
const resultSpan = document.getElementById('result-' + formulaInput.id);
try {
const finalAnswer = eval(formula);
resultSpan.textContent = ` = ${finalAnswer}`;
} catch (error) {
resultSpan.textContent = ` = Error`;
}
});
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style> -->
&lt;div id="calculator-container">
&lt;div>
&lt;label for="m1">m1:&lt;/label>
&lt;input type="number" id="m1" value="4">
&lt;/div>&lt;div>
&lt;label for="m2">m2:&lt;/label>
&lt;input type="number" id="m2" value="5">
&lt;/div>&lt;div>
&lt;label for="n1">n1:&lt;/label>
&lt;input type="number" id="n1" value="2">
&lt;/div>&lt;div>
&lt;label for="n2">n2:&lt;/label>
&lt;input type="number" id="n2" value="3">
&lt;/div>&lt;div>
&lt;label for="x">x:&lt;/label>
&lt;input type="number" id="x" value="0.5">
&lt;/div>
&lt;div>
&lt;label for="formula1">formula1:&lt;/label>
&lt;input type="text" id="formula1" value="n1 &amp;#43; m1">
&lt;span id="result-formula1" class="result-display">&lt;/span>
&lt;/div>
&lt;div>
&lt;label for="formula2">formula2:&lt;/label>
&lt;input type="text" id="formula2" value="n2 * m2">
&lt;span id="result-formula2" class="result-display">&lt;/span>
&lt;/div>
&lt;div>
&lt;label for="formula3">formula3:&lt;/label>
&lt;input type="text" id="formula3" value="Math.asin(x) * 180 / Math.PI">
&lt;span id="result-formula3" class="result-display">&lt;/span>
&lt;/div>
&lt;button type="button" onclick="calculate()">Solve&lt;/button>
&lt;/div>
&lt;script>
function calculate() {
const container = document.getElementById('calculator-container');
const inputs = container.querySelectorAll('input[type="number"]');
const formulas = container.querySelectorAll('input[type="text"]');
const vars = {};
inputs.forEach(input => {
const varName = input.id;
vars[varName] = input.value === "" ? "0" : input.value;
});
formulas.forEach(formulaInput => {
let formula = formulaInput.value;
Object.keys(vars).forEach(varName => {
const re = new RegExp('\\b' + varName + '\\b', 'g');
formula = formula.replace(re, vars[varName]);
});
const resultSpan = document.getElementById('result-' + formulaInput.id);
try {
const finalAnswer = eval(formula);
resultSpan.textContent = ` = ${finalAnswer}`;
} catch (error) {
resultSpan.textContent = ` = Error`;
}
});
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style>
&lt;!--
&lt;div id="calculator-container">
&lt;div>
&lt;label for="a">a:&lt;/label>
&lt;input type="number" id="a" value="2">
&lt;/div>&lt;div>
&lt;label for="b">b:&lt;/label>
&lt;input type="number" id="b" value="3">
&lt;/div>
&lt;div>
&lt;label for="formula">formula:&lt;/label>
&lt;input type="text" id="formula" value="a * b - 5">
&lt;span id="result-formula" class="result-display">&lt;/span>
&lt;/div>
&lt;button type="button" onclick="calculate()">Solve&lt;/button>
&lt;/div>
&lt;script>
function calculate() {
const container = document.getElementById('calculator-container');
const inputs = container.querySelectorAll('input[type="number"]');
const formulas = container.querySelectorAll('input[type="text"]');
const vars = {};
inputs.forEach(input => {
const varName = input.id;
vars[varName] = input.value === "" ? "0" : input.value;
});
formulas.forEach(formulaInput => {
let formula = formulaInput.value;
Object.keys(vars).forEach(varName => {
const re = new RegExp('\\b' + varName + '\\b', 'g');
formula = formula.replace(re, vars[varName]);
});
const resultSpan = document.getElementById('result-' + formulaInput.id);
try {
const finalAnswer = eval(formula);
resultSpan.textContent = ` = ${finalAnswer}`;
} catch (error) {
resultSpan.textContent = ` = Error`;
}
});
}
&lt;/script>
&lt;style>
#calculator-container {
max-width: 350px;
margin: 2em auto;
padding: 1.5em 2em;
border-radius: 12px;
background: #f9f9f9;
box-shadow: 0 2px 12px rgba(0,0,0,0.08);
font-family: system-ui, sans-serif;
transition: background 0.3s, color 0.3s;
}
#calculator-container div {
margin-bottom: 1em;
display: flex;
align-items: center;
gap: 0.5em;
}
#calculator-container label {
flex: 0 0 60px;
font-weight: 500;
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
flex: 1;
padding: 0.4em 0.6em;
border: 1px solid #ccc;
border-radius: 6px;
font-size: 1em;
background: #fff;
color: #222;
transition: border 0.2s;
}
#calculator-container input:focus {
border-color: #0078d4;
outline: none;
}
#calculator-container button {
width: 100%;
padding: 0.6em 0;
background: #0078d4;
color: #fff;
border: none;
border-radius: 6px;
font-size: 1.1em;
font-weight: 600;
cursor: pointer;
transition: background 0.2s;
}
#calculator-container button:hover {
background: #005fa3;
}
#result {
margin-top: 1em;
font-size: 1.1em;
font-weight: 500;
color: #007800;
min-height: 1.5em;
}
@media (prefers-color-scheme: dark) {
#calculator-container {
background: #23272f;
color: #f3f3f3;
box-shadow: 0 2px 12px rgba(0,0,0,0.32);
}
#calculator-container input[type="number"],
#calculator-container input[type="text"] {
background: #181b20;
color: #f3f3f3;
border: 1px solid #444;
}
#calculator-container input:focus {
border-color: #4fa3ff;
}
#calculator-container button {
background: #4fa3ff;
color: #181b20;
}
#calculator-container button:hover {
background: #0078d4;
color: #fff;
}
#result {
color: #7fff7f;
}
}
&lt;/style> -->
&lt;div id="calc-0" class="calc-box">
&lt;label>
a:
&lt;input type="number" id="calc-0-a" value="10">
&lt;/label>
&lt;br>
&lt;label>
b:
&lt;input type="number" id="calc-0-b" value="5">
&lt;/label>
&lt;br>
&lt;label>
Formula:
&lt;input type="text" id="calc-0-formula" value="a &amp;#43; b * 2">
&lt;/label>
&lt;br>
&lt;button type="button" onclick="calcSolve('calc-0')">Solve&lt;/button>
&lt;div id="calc-0-result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calcSolve(boxId) {
const box = document.getElementById(boxId);
const inputs = box.querySelectorAll('input[type="number"]');
let formula = box.querySelector('input[type="text"]').value;
inputs.forEach(input => {
const varName = input.id.split('-').pop();
formula = formula.replace(new RegExp('\\b' + varName + '\\b', 'g'), input.value || '0');
});
try {
const result = eval(formula);
box.querySelector('[id$="result"]').textContent = "Result: " + result;
} catch {
box.querySelector('[id$="result"]').textContent = "Result: Error in formula";
}
}
&lt;/script>
&lt;style>
.calc-box {
border: 1px solid #ccc; border-radius: 8px; padding: 1em; margin: 1em 0; max-width: 320px;
background: #f9f9f9; font-family: system-ui, sans-serif;
}
.calc-box label { display: block; margin-bottom: 0.5em; }
.calc-box input { margin-left: 0.5em; }
.calc-box button { margin-top: 0.5em; }
.calc-box div[id$="result"] { margin-top: 0.5em; font-weight: bold; color: #007800; }
&lt;/style>
&lt;div id="calc-1" class="calc-box">
&lt;label>
x:
&lt;input type="number" id="calc-1-x" value="2">
&lt;/label>
&lt;br>
&lt;label>
y:
&lt;input type="number" id="calc-1-y" value="3">
&lt;/label>
&lt;br>
&lt;label>
z:
&lt;input type="number" id="calc-1-z" value="4">
&lt;/label>
&lt;br>
&lt;label>
Formula:
&lt;input type="text" id="calc-1-formula" value="x * y &amp;#43; z">
&lt;/label>
&lt;br>
&lt;button type="button" onclick="calcSolve('calc-1')">Solve&lt;/button>
&lt;div id="calc-1-result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calcSolve(boxId) {
const box = document.getElementById(boxId);
const inputs = box.querySelectorAll('input[type="number"]');
let formula = box.querySelector('input[type="text"]').value;
inputs.forEach(input => {
const varName = input.id.split('-').pop();
formula = formula.replace(new RegExp('\\b' + varName + '\\b', 'g'), input.value || '0');
});
try {
const result = eval(formula);
box.querySelector('[id$="result"]').textContent = "Result: " + result;
} catch {
box.querySelector('[id$="result"]').textContent = "Result: Error in formula";
}
}
&lt;/script>
&lt;style>
.calc-box {
border: 1px solid #ccc; border-radius: 8px; padding: 1em; margin: 1em 0; max-width: 320px;
background: #f9f9f9; font-family: system-ui, sans-serif;
}
.calc-box label { display: block; margin-bottom: 0.5em; }
.calc-box input { margin-left: 0.5em; }
.calc-box button { margin-top: 0.5em; }
.calc-box div[id$="result"] { margin-top: 0.5em; font-weight: bold; color: #007800; }
&lt;/style>
&lt;!--
&lt;div id="calc-2" class="calc-box">
&lt;label>
growthRate:
&lt;input type="number" id="calc-2-growthRate" value="2">
&lt;/label>
&lt;br>
&lt;label>
initialValue:
&lt;input type="number" id="calc-2-initialValue" value="10">
&lt;/label>
&lt;br>
&lt;label>
time:
&lt;input type="number" id="calc-2-time" value="5">
&lt;/label>
&lt;br>
&lt;label>
Formula:
&lt;input type="text" id="calc-2-formula" value="initialValue * (1 &amp;#43; growthRate/100) ^ time">
&lt;/label>
&lt;br>
&lt;button type="button" onclick="calcSolve('calc-2')">Solve&lt;/button>
&lt;div id="calc-2-result">Result: &lt;/div>
&lt;/div>
&lt;script>
function calcSolve(boxId) {
const box = document.getElementById(boxId);
const inputs = box.querySelectorAll('input[type="number"]');
let formula = box.querySelector('input[type="text"]').value;
inputs.forEach(input => {
const varName = input.id.split('-').pop();
formula = formula.replace(new RegExp('\\b' + varName + '\\b', 'g'), input.value || '0');
});
try {
const result = eval(formula);
box.querySelector('[id$="result"]').textContent = "Result: " + result;
} catch {
box.querySelector('[id$="result"]').textContent = "Result: Error in formula";
}
}
&lt;/script>
&lt;style>
.calc-box {
border: 1px solid #ccc; border-radius: 8px; padding: 1em; margin: 1em 0; max-width: 320px;
background: #f9f9f9; font-family: system-ui, sans-serif;
}
.calc-box label { display: block; margin-bottom: 0.5em; }
.calc-box input { margin-left: 0.5em; }
.calc-box button { margin-top: 0.5em; }
.calc-box div[id$="result"] { margin-top: 0.5em; font-weight: bold; color: #007800; }
&lt;/style>
-->
&lt;div class="add-container">
&lt;input
type="number"
id="num1-3"
value="5"
placeholder="First number"
>
&lt;input
type="number"
id="num2-3"
value="10"
placeholder="Second number"
>
&lt;button onclick="addNumbers( 3 )">
Add Now
&lt;/button>
&lt;div id="result-3" class="result-display">&lt;/div>
&lt;/div>
&lt;script>
function addNumbers(uid) {
const num1 = parseFloat(document.getElementById(`num1-${uid}`).value) || 0;
const num2 = parseFloat(document.getElementById(`num2-${uid}`).value) || 0;
document.getElementById(`result-${uid}`).textContent = `Result: ${num1 + num2}`;
}
&lt;/script>
&lt;style>
.add-container {
margin: 1rem 0;
padding: 1rem;
border: 1px solid #ddd;
}
.result-display {
margin-top: 0.5rem;
font-weight: bold;
}
&lt;/style>
&lt;div class="add-container">
&lt;input
type="number"
id="num1-4"
value="5"
placeholder="First number"
>
&lt;input
type="number"
id="num2-4"
value="20"
placeholder="Second number"
>
&lt;button onclick="addNumbers( 4 )">
Add Now
&lt;/button>
&lt;div id="result-4" class="result-display">&lt;/div>
&lt;/div>
&lt;script>
function addNumbers(uid) {
const num1 = parseFloat(document.getElementById(`num1-${uid}`).value) || 0;
const num2 = parseFloat(document.getElementById(`num2-${uid}`).value) || 0;
document.getElementById(`result-${uid}`).textContent = `Result: ${num1 + num2}`;
}
&lt;/script>
&lt;style>
.add-container {
margin: 1rem 0;
padding: 1rem;
border: 1px solid #ddd;
}
.result-display {
margin-top: 0.5rem;
font-weight: bold;
}
&lt;/style></description></item></channel></rss>