<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PinNotes – Programming in Python 🐍</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/</link><description>Recent content in Programming in Python 🐍 on PinNotes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="/notes/iit-madras/data-science-and-application/foundational-level/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.1/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.1/</guid><description>
&lt;p&gt;Welcome to an insightful introduction to learning Python! 🐍 This course is designed to bring you quickly up to speed on the &lt;strong&gt;fundamentals of the core Python language&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what you can expect:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Python&amp;rsquo;s User-Friendliness&lt;/strong&gt; 🥳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python is known for being a &lt;strong&gt;very programmer-friendly language&lt;/strong&gt;, considered easy on the mind for first-time programmers. Some even describe it as &amp;ldquo;executable pseudocode&amp;rdquo; due to its simple syntax.&lt;/li&gt;
&lt;li&gt;The language is designed to be &lt;strong&gt;easy to learn, understand, and remember&lt;/strong&gt;, meaning you won&amp;rsquo;t need to constantly refer to manuals when writing code. You can expect to be coding significant Python programs in a matter of days, or even hours if you have prior programming experience.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s &lt;strong&gt;very powerful&lt;/strong&gt; and &lt;strong&gt;much sought after&lt;/strong&gt;, with a large global community using it, and many job opportunities for Python programmers. If you learn Python, you&amp;rsquo;ll have access to millions of open-source projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What You Will Learn&lt;/strong&gt; 💡
The course will introduce you to several core programming concepts in Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt; 🏷️: You&amp;rsquo;ll learn how variables are used to store data, like numbers (integers, floating-point numbers), and text (strings). Python handles variables dynamically, meaning you don&amp;rsquo;t need to declare their type beforehand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Types&lt;/strong&gt; 🗄️: You&amp;rsquo;ll explore Python&amp;rsquo;s core built-in object types, including numbers, strings, lists, dictionaries, tuples, and Booleans (True/False values). You&amp;rsquo;ll learn to check the type of a variable using the &lt;code&gt;type()&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operators and Expressions&lt;/strong&gt; ➕➖: Understand arithmetic operators (+, -, *, /, **, //, %), relational (comparison) operators (&amp;gt;, &amp;lt;, ==, !=), and logical operators (and, or, not). You&amp;rsquo;ll see how expressions combine values, variables, and operators.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input and Output&lt;/strong&gt; 🗣️: Learn to interact with users by taking input using the &lt;code&gt;input()&lt;/code&gt; function and displaying output using the &lt;code&gt;print()&lt;/code&gt; statement/function. You&amp;rsquo;ll also cover formatted printing to control output appearance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control Flow Statements&lt;/strong&gt; 🚦:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If Statements&lt;/strong&gt; 🤔: Learn to make decisions in your code using &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; conditions. These statements allow different blocks of code to execute based on certain conditions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loops&lt;/strong&gt; 🔁: Discover &lt;code&gt;for&lt;/code&gt; loops for iterating over sequences (like strings, lists) and &lt;code&gt;while&lt;/code&gt; loops for repeating actions until a condition is met. You&amp;rsquo;ll also learn &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;pass&lt;/code&gt; statements to control loop behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 💬: Dive deeper into string manipulation, including indexing, slicing, concatenation (+), and replication (*). You&amp;rsquo;ll also learn about escape characters for special symbols within strings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt; ⚙️: Understand how to define your own reusable blocks of code. You&amp;rsquo;ll explore different types of arguments (positional, keyword, default, arbitrary) and the concept of variable scope (local vs. global).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modules and Libraries&lt;/strong&gt; 📚: Learn to import and use pre-written code collections (libraries) like &lt;code&gt;math&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, and &lt;code&gt;calendar&lt;/code&gt; to extend your program&amp;rsquo;s capabilities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Oriented Programming (OOP)&lt;/strong&gt; 🏗️: Get an introduction to classes and objects, a powerful way to structure and reuse code. You&amp;rsquo;ll learn about instance creation, attributes, methods, and the basics of inheritance. You&amp;rsquo;ll also touch upon operator overloading to customize how built-in operations work with your own objects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptions and Error Handling&lt;/strong&gt; 🚫: Understand how Python handles errors (exceptions) and how to write code to catch and recover from them using &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Learning Approach&lt;/strong&gt; 🚀&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The course emphasizes &lt;strong&gt;hands-on coding&lt;/strong&gt;. You&amp;rsquo;re encouraged to &amp;ldquo;start driving the car, start writing the program&amp;rdquo; rather than just looking at theory.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use online environments like &lt;strong&gt;Replit&lt;/strong&gt; to write and run your Python code directly in a browser without installation.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s normal to feel a &amp;ldquo;tad bit confused&amp;rdquo; at times. Programming can get complicated, but by &lt;strong&gt;going slowly, staying patient, and practising repeatedly&lt;/strong&gt;, things will become easier.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be afraid to make mistakes; Python provides &lt;strong&gt;meaningful error messages&lt;/strong&gt; that can help you debug.&lt;/li&gt;
&lt;li&gt;The material is presented &lt;strong&gt;step-by-step&lt;/strong&gt;, with quizzes and exercises to reinforce learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This course aims to provide a solid grounding in Python fundamentals, preparing you to tackle more advanced topics and real-world applications! 🌟&lt;/p&gt;</description></item><item><title>Introduction to Replit</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.2/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.2/</guid><description>
&lt;p&gt;Welcome to Replit! 🚀 It&amp;rsquo;s an &lt;strong&gt;online platform&lt;/strong&gt; that makes coding super easy, especially for Python beginners, because you &lt;strong&gt;don&amp;rsquo;t have to install anything&lt;/strong&gt; on your computer. Think of it as your personal coding playground in the cloud! ☁️💻&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s why Replit is great for learning Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Installation Needed!&lt;/strong&gt; 🎉 Gone are the days of complicated software setups. You can start coding Python right away in your web browser.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to Use&lt;/strong&gt; 👍: It&amp;rsquo;s designed to be straightforward, even if it&amp;rsquo;s your very first time programming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organized Projects&lt;/strong&gt; 🗄️: Replit allows you to create multiple programs and organize them neatly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Helpful Features&lt;/strong&gt; ✨: It comes with features like &amp;ldquo;code intelligence&amp;rdquo; which can give you information about commands as you type them, making learning easier. You can also customize its appearance (themes, font size).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Your Step-by-Step Guide to Using Replit for Python! 🚶‍♀️🚶‍♂️&lt;span class="hx-absolute -hx-mt-20" id="your-step-by-step-guide-to-using-replit-for-python-"&gt;&lt;/span&gt;
&lt;a href="#your-step-by-step-guide-to-using-replit-for-python-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s get you coding your first Python program!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open Replit.com&lt;/strong&gt; 🌐:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open your web browser and go to &lt;strong&gt;Replit.com&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start Coding&lt;/strong&gt; ▶️:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once on the Replit homepage, click on &lt;strong&gt;&amp;ldquo;Start coding&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Log In (or Sign Up)&lt;/strong&gt; 🔐:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replit will ask for a username and password. If you have a Gmail ID, you can simply click on the &lt;strong&gt;&amp;ldquo;G&amp;rdquo; symbol&lt;/strong&gt; (for Google) and log in using your Gmail account. This is the easiest way to get started!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a New Project (Repl)&lt;/strong&gt; ✨:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After logging in, you&amp;rsquo;ll see a screen with a &lt;strong&gt;plus symbol (+)&lt;/strong&gt;. Click on it.&lt;/li&gt;
&lt;li&gt;Replit will ask you what language you&amp;rsquo;d like to code in. Choose &lt;strong&gt;&amp;ldquo;Python&amp;rdquo;&lt;/strong&gt; 🐍.&lt;/li&gt;
&lt;li&gt;Replit usually gives your new project a random name. You can &lt;strong&gt;remove this default name&lt;/strong&gt; and give it a more descriptive name, like &amp;ldquo;first code&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Then, click &lt;strong&gt;&amp;ldquo;create REPL&amp;rdquo;&lt;/strong&gt;. This creates a &amp;ldquo;repository,&amp;rdquo; which is just a place where you can write your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your Coding Environment&lt;/strong&gt; 📝:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll now see your Replit workspace. On the left side, you&amp;rsquo;ll see &lt;strong&gt;&amp;ldquo;files&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The main area in the middle is where you &lt;strong&gt;write your program&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The area on the right is the &lt;strong&gt;console&lt;/strong&gt;, where you&amp;rsquo;ll see the output of your program. You can change the layout (e.g., stacked with the editor on top and console on bottom) in the &amp;ldquo;settings&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write Your First Program&lt;/strong&gt; 👋🌍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the editor area, type your first Python command:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, Python!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;em&gt;Remember not to type the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt, as that&amp;rsquo;s what Python displays to tell you it&amp;rsquo;s ready for input&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You can also print multiple messages or values at the same time. For example:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;hello india&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;20.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
This will display &amp;ldquo;hello india 10 20.5&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run Your Code!&lt;/strong&gt; 🟢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once you&amp;rsquo;ve typed your code, simply click on the &lt;strong&gt;&amp;ldquo;Run&amp;rdquo; button&lt;/strong&gt;. You&amp;rsquo;ll see the output of your program appear in the console on the right.&lt;/li&gt;
&lt;li&gt;Replit is designed to be &lt;strong&gt;self-explanatory&lt;/strong&gt;. Your computer will do precisely what you ask it to do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; Programming can sometimes get complicated, but by &lt;strong&gt;going slowly, staying patient, and practising repeatedly&lt;/strong&gt;, things will become easier. Don&amp;rsquo;t be afraid to make mistakes; Python provides &lt;strong&gt;meaningful error messages&lt;/strong&gt; that can help you debug. Enjoy your coding journey! 🎉&lt;/p&gt;</description></item><item><title>More on Replit, print and Common Mistakes</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.3/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.3/</guid><description>
&lt;p&gt;Here&amp;rsquo;s an introduction to Replit, the &lt;code&gt;print&lt;/code&gt; command, and some common mistakes in Python, explained simply with emojis! 🥳&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Replit: Your Online Python Playground!&lt;/strong&gt; 🚀&lt;span class="hx-absolute -hx-mt-20" id="replit-your-online-python-playground-"&gt;&lt;/span&gt;
&lt;a href="#replit-your-online-python-playground-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What it is&lt;/strong&gt; ☁️: Replit is an &lt;strong&gt;online platform&lt;/strong&gt; that lets you code in Python (and other languages!) directly in your web browser [Conversation History]. This means &lt;strong&gt;no software installation is needed&lt;/strong&gt; on your computer, making it super easy to get started, especially for beginners! [Conversation History].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s awesome&lt;/strong&gt; 🎉:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Instant Coding&lt;/strong&gt; ▶️: You can start writing and running Python code right away [Conversation History].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organized Projects&lt;/strong&gt; 🗄️: It helps you create and manage multiple programs in a systematic way [429, Conversation History].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Helpful Features&lt;/strong&gt; ✨: Replit offers &amp;ldquo;code intelligence&amp;rdquo; (which can give information about commands as you type) and allows you to customize your workspace layout (e.g., stacked or side-by-side).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Getting Started (Step-by-Step)&lt;/strong&gt; 👣:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go to Replit.com&lt;/strong&gt; 🌐.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;&amp;ldquo;Start coding&amp;rdquo;&lt;/strong&gt; [Conversation History].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Log in or Sign up&lt;/strong&gt; 🔐: You can use your Google ID for quick access [Conversation History].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a New Project (Repl)&lt;/strong&gt; ✨: Click the &lt;strong&gt;plus symbol (+)&lt;/strong&gt;, choose &lt;strong&gt;&amp;ldquo;Python&amp;rdquo;&lt;/strong&gt; 🐍, give your project a name (like &amp;ldquo;first code&amp;rdquo;), and click &lt;strong&gt;&amp;ldquo;create REPL&amp;rdquo;&lt;/strong&gt;. This creates a &amp;ldquo;repository&amp;rdquo; for your code [47, Conversation History].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your Workspace&lt;/strong&gt; 📝: You&amp;rsquo;ll see:
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;files panel&lt;/strong&gt; on the left.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;editor&lt;/strong&gt; in the middle where you write your code [429, Conversation History].&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;console&lt;/strong&gt; on the right where your program&amp;rsquo;s output appears [429, Conversation History].&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run Your Code!&lt;/strong&gt; 🟢: After typing your Python code, simply click on the &lt;strong&gt;&amp;ldquo;Run&amp;rdquo; button&amp;quot;&lt;/strong&gt; to execute it. Replit is designed to be &lt;strong&gt;self-explanatory&lt;/strong&gt;, and your computer will do &lt;strong&gt;precisely what you ask it to do&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;The &lt;code&gt;print&lt;/code&gt; Function: Making Your Code Speak!&lt;/strong&gt; 🗣️&lt;span class="hx-absolute -hx-mt-20" id="the--"&gt;&lt;/span&gt;
&lt;a href="#the--" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;print()&lt;/code&gt; function is one of the most fundamental ways your Python program displays information to you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Basic Use&lt;/strong&gt; 👋: You can use &lt;code&gt;print()&lt;/code&gt; to show messages or values [430, Conversation History].
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, Python!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outputs: Hello, Python!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Printing Multiple Things&lt;/strong&gt; 💬: You can print several messages, numbers (whole or fractional), or a mix of both at the same time by separating them with commas. This will display them all on one line [431, Conversation History].
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;hello india&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;20.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outputs: hello india 10 20.5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controlling Output&lt;/strong&gt; 🎨:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sep&lt;/code&gt; (separator)&lt;/strong&gt;: By default, &lt;code&gt;print()&lt;/code&gt; puts a space between the items it prints. You can change this using the &lt;code&gt;sep&lt;/code&gt; parameter.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outputs: 1--2--3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;end&lt;/code&gt; (end of line)&lt;/strong&gt;: By default, &lt;code&gt;print()&lt;/code&gt; automatically adds a new line character at the end of its output. You can change this behavior using the &lt;code&gt;end&lt;/code&gt; parameter.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Line 1&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Line 2&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outputs: Line 1 Line 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formatted Printing&lt;/strong&gt; 📊: For more specific control over how values appear within a string, Python offers formatted printing.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.format()&lt;/code&gt; Method&lt;/strong&gt;: This method allows you to insert values into placeholders (&lt;code&gt;{}&lt;/code&gt;) within a string. You can refer to arguments by position or keyword.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, my name is &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt; and I am &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s2"&gt; years old.&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outputs: Hello, my name is Bob and I am 40 years old.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String Modulo Operator (&lt;code&gt;%&lt;/code&gt;)&lt;/strong&gt;: This older method, similar to C&amp;rsquo;s &lt;code&gt;printf&lt;/code&gt;, uses special codes (like &lt;code&gt;%s&lt;/code&gt; for string, &lt;code&gt;%d&lt;/code&gt; for integer, &lt;code&gt;%f&lt;/code&gt; for float) within a string and substitutes values from a tuple or dictionary.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;apples&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I have &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outputs: I have 5 apples.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Printing to Files (Stream Redirection)&lt;/strong&gt; 🗄️➡️📄: In Python 3.0, you can redirect &lt;code&gt;print()&lt;/code&gt; output from the console to an external file using the &lt;code&gt;file&lt;/code&gt; parameter.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# This will create or overwrite a file named &amp;#39;output.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;This text goes into the file.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
This is essentially a simpler way to do what you could manually achieve by writing to &lt;code&gt;sys.stdout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Common Python Mistakes &amp;amp; How to Fix Them&lt;/strong&gt; 💡&lt;span class="hx-absolute -hx-mt-20" id="common-python-mistakes--how-to-fix-them-"&gt;&lt;/span&gt;
&lt;a href="#common-python-mistakes--how-to-fix-them-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Everyone makes mistakes when learning to program – it&amp;rsquo;s a natural part of the process! Python is helpful by often providing &lt;strong&gt;meaningful error messages&lt;/strong&gt; to guide you. The key is to &lt;strong&gt;not get upset with errors&lt;/strong&gt;; instead, learn to use them to debug your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1. Syntax Errors&lt;/strong&gt; 🚫 (Violating Python&amp;rsquo;s grammar rules, making the code impossible to understand or interpret):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Missing Colon (&lt;code&gt;:&lt;/code&gt;)&lt;/strong&gt; 🤷‍♀️: Forgetting the colon at the end of header lines for compound statements like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;def&lt;/code&gt; is &amp;ldquo;the most common coding mistake among new Python programmers&amp;rdquo;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Always add a colon at the end of header lines (e.g., &lt;code&gt;if True:&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incorrect Brackets&lt;/strong&gt; &lt;code&gt;()&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;{}&lt;/code&gt;: The &lt;code&gt;print()&lt;/code&gt; function &lt;em&gt;must&lt;/em&gt; use &lt;strong&gt;round brackets&lt;/strong&gt; &lt;code&gt;()&lt;/code&gt;. Using square &lt;code&gt;[]&lt;/code&gt;, curly &lt;code&gt;{}&lt;/code&gt;, or angular &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; brackets will result in a &lt;code&gt;SyntaxError&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Use &lt;code&gt;print(&amp;quot;message&amp;quot;)&lt;/code&gt; or &lt;code&gt;print(variable)&lt;/code&gt; with round brackets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Missing Quotation Marks&lt;/strong&gt; &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; &lt;code&gt;''&lt;/code&gt;: Strings (text) must always be enclosed in single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&amp;quot;&lt;/code&gt;) quotation marks.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Ensure all string literals have matching quotes at the beginning and end.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spelling Mistakes&lt;/strong&gt; ✍️: A common error is typing &lt;code&gt;primt&lt;/code&gt; instead of &lt;code&gt;print&lt;/code&gt;, which leads to a &lt;code&gt;NameError&lt;/code&gt; because Python doesn&amp;rsquo;t recognize &lt;code&gt;primt&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Double-check your spelling for keywords, function names, and variable names.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent Indentation&lt;/strong&gt; 📏: Python uses indentation to define code blocks, where all statements within a block must be indented by the same amount. Mixing tabs and spaces, or inconsistent spacing, can lead to an &lt;code&gt;IndentationError&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Choose either spaces or tabs for indentation and stick to it consistently throughout your file. Most code editors automatically help with consistent indentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using Keywords as Variable Names&lt;/strong&gt; 🔑: Words like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt; are &lt;strong&gt;reserved words&lt;/strong&gt; (or &amp;ldquo;keywords&amp;rdquo;) in Python. You cannot use them as variable names.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Choose different variable names. Your development environment will often highlight reserved words, making them easy to spot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2. Runtime Errors / Exceptions&lt;/strong&gt; 💥 (Errors detected &lt;em&gt;while&lt;/em&gt; the program is running, causing it to stop unless handled):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using Unassigned Variables&lt;/strong&gt; 🤔: If you try to use a variable before you&amp;rsquo;ve given it a value, Python will raise a &lt;code&gt;NameError&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Always assign a value to a variable before trying to use it in an expression or &lt;code&gt;print&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index Out of Range&lt;/strong&gt; 📏➡️🏞️: Trying to access an item in a sequence (like a string or list) at an index (position) that doesn&amp;rsquo;t exist will raise an &lt;code&gt;IndexError&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Ensure your indices are within the valid range (e.g., from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length - 1&lt;/code&gt; for positive indices).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key Not Found in Dictionary&lt;/strong&gt; 🕵️‍♀️: If you try to access a value in a dictionary using a key that doesn&amp;rsquo;t exist, a &lt;code&gt;KeyError&lt;/code&gt; will be raised.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Check if the key exists using the &lt;code&gt;in&lt;/code&gt; operator (&lt;code&gt;if key in dictionary:&lt;/code&gt;) or use the &lt;code&gt;.get(key, default_value)&lt;/code&gt; method to provide a fallback.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Misunderstanding &lt;code&gt;append()&lt;/code&gt; or &lt;code&gt;sort()&lt;/code&gt; Return Values&lt;/strong&gt; &lt;code&gt;None&lt;/code&gt;: Methods like &lt;code&gt;list.append()&lt;/code&gt; or &lt;code&gt;list.sort()&lt;/code&gt; modify the list &lt;em&gt;in-place&lt;/em&gt; (they change the original list) and return &lt;code&gt;None&lt;/code&gt; (meaning &amp;ldquo;nothing&amp;rdquo;). If you write &lt;code&gt;my_list = my_list.append(item)&lt;/code&gt;, &lt;code&gt;my_list&lt;/code&gt; will become &lt;code&gt;None&lt;/code&gt;, and you will lose your list.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Just call the method without reassignment: &lt;code&gt;my_list.append(item)&lt;/code&gt; or &lt;code&gt;my_list.sort()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mixing Types in Operations&lt;/strong&gt; 🧪: Python is strict about combining certain different data types with operators. For example, trying to &lt;code&gt;+&lt;/code&gt; (concatenate) a string and a number will result in a &lt;code&gt;TypeError&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Manually convert the types (e.g., using &lt;code&gt;int()&lt;/code&gt;, &lt;code&gt;float()&lt;/code&gt;, or &lt;code&gt;str()&lt;/code&gt;) before the operation if necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3. Semantic Errors&lt;/strong&gt; 🧠 (The program runs, and the syntax is correct, but it doesn&amp;rsquo;t do what you &lt;em&gt;intended&lt;/em&gt; for it to do):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared References (Aliasing) with Mutable Objects&lt;/strong&gt; 👯: When you assign one variable to another mutable object (like a list or dictionary), both variables refer to the &lt;em&gt;same&lt;/em&gt; object in memory. Changes made through one variable will affect the other. This is especially tricky when you repeat a mutable object like &lt;code&gt;[[]] * 4&lt;/code&gt; – all inner lists are actually the &lt;em&gt;same&lt;/em&gt; object.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: If you need independent copies, use slicing &lt;code&gt;[:]&lt;/code&gt;, the &lt;code&gt;.copy()&lt;/code&gt; method, or the &lt;code&gt;copy&lt;/code&gt; module for deep copies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Forgetting &lt;code&gt;print()&lt;/code&gt; in Script Files&lt;/strong&gt; 📄: In Replit&amp;rsquo;s interactive console (or a Python shell), Python automatically displays the result of expressions. However, when writing code in a &lt;code&gt;.py&lt;/code&gt; script file, you &lt;strong&gt;must explicitly use &lt;code&gt;print()&lt;/code&gt;&lt;/strong&gt; to see any output.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Add &lt;code&gt;print()&lt;/code&gt; statements in your &lt;code&gt;.py&lt;/code&gt; files for any output you want to see.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infinite Loops&lt;/strong&gt; ♾️: A &lt;code&gt;while True:&lt;/code&gt; loop without a proper &lt;code&gt;break&lt;/code&gt; condition inside will run indefinitely.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fix&lt;/em&gt;: Ensure your loops have a clear exit condition, typically using an &lt;code&gt;if&lt;/code&gt; statement with a &lt;code&gt;break&lt;/code&gt; statement to exit the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Practice Question&lt;/strong&gt; 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-question-"&gt;&lt;/span&gt;
&lt;a href="#practice-question-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Imagine you want to calculate the sum of numbers from 1 to 5. You write the following code.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;What output do you expect, and why might it be confusing compared to what you intended (the sum of 1 to 5)? What would you change to get the intended sum?&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Answer in Notes Format&lt;/strong&gt; 💡&lt;span class="hx-absolute -hx-mt-20" id="answer-in-notes-format-"&gt;&lt;/span&gt;
&lt;a href="#answer-in-notes-format-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expected Output &amp;amp; Confusion:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why confusing&lt;/strong&gt;: The &lt;code&gt;range(5)&lt;/code&gt; function generates a sequence of numbers starting from &lt;code&gt;0&lt;/code&gt; and going up to, but &lt;strong&gt;not including&lt;/strong&gt;, &lt;code&gt;5&lt;/code&gt;. So, the variable &lt;code&gt;i&lt;/code&gt; will take the values &lt;code&gt;0, 1, 2, 3, 4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Calculation Trace&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;total&lt;/code&gt; starts at &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;i = 0&lt;/code&gt;: &lt;code&gt;total = 0 + 0&lt;/code&gt; which is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;i = 1&lt;/code&gt;: &lt;code&gt;total = 0 + 1&lt;/code&gt; which is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;i = 2&lt;/code&gt;: &lt;code&gt;total = 1 + 2&lt;/code&gt; which is &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;i = 3&lt;/code&gt;: &lt;code&gt;total = 3 + 3&lt;/code&gt; which is &lt;code&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;i = 4&lt;/code&gt;: &lt;code&gt;total = 6 + 4&lt;/code&gt; which is &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This is an example of a &lt;strong&gt;semantic error&lt;/strong&gt;. The code runs without any syntax errors or runtime crashes, but it produces a result different from the original intention (summing numbers from 1 to 5).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proposed Change for Sum of 1 to 5:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To make &lt;code&gt;range()&lt;/code&gt; include &lt;code&gt;5&lt;/code&gt;, you need to set its upper limit to &lt;code&gt;6&lt;/code&gt; (since it excludes the end value), and its starting value to &lt;code&gt;1&lt;/code&gt; (if you want to sum from 1).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modified Code&lt;/strong&gt;:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# This will generate 1, 2, 3, 4, 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: &lt;code&gt;range(1, 6)&lt;/code&gt; will now generate the sequence &lt;code&gt;1, 2, 3, 4, 5&lt;/code&gt;. The loop will then correctly sum these values to &lt;code&gt;15&lt;/code&gt; (1+2+3+4+5).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>A Quick Introduction to Variables</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.4/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.4/</guid><description>
&lt;p&gt;Here&amp;rsquo;s a quick introduction to variables in Python, designed to be easy to understand:&lt;/p&gt;
&lt;p&gt;Think of &lt;strong&gt;variables&lt;/strong&gt; in Python like little labelled boxes or containers 📦 in your computer&amp;rsquo;s memory. You can store different types of information inside these boxes, and the label on the box helps you find and use that information later.&lt;/p&gt;
&lt;h3&gt;What are Variables?&lt;span class="hx-absolute -hx-mt-20" id="what-are-variables"&gt;&lt;/span&gt;
&lt;a href="#what-are-variables" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: Variables temporarily store data in your computer&amp;rsquo;s memory. Just like a jar in your kitchen can hold rice one day and water the next, a variable can store different types of values over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Labels&lt;/strong&gt;: We use a &lt;strong&gt;name&lt;/strong&gt; (the label) to refer to the stored data. For example, instead of using generic labels like &amp;lsquo;A&amp;rsquo; or &amp;lsquo;B&amp;rsquo; for someone&amp;rsquo;s bank balance, it&amp;rsquo;s better to use &lt;strong&gt;self-explanatory names&lt;/strong&gt; like &lt;code&gt;ram_bank_balance&lt;/code&gt; to make your code clear and easy to understand for yourself and others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Creation&lt;/strong&gt;: A variable is &lt;strong&gt;created the moment you assign a value to it&lt;/strong&gt; for the first time. You &lt;strong&gt;don&amp;rsquo;t need to declare&lt;/strong&gt; its type beforehand, unlike some other programming languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Usage&lt;/strong&gt;: When you use a variable in an expression, Python replaces the variable with the value it currently holds. &lt;strong&gt;Variables must have a value assigned&lt;/strong&gt; before you can use them in your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dynamic Typing ✨&lt;span class="hx-absolute -hx-mt-20" id="dynamic-typing-"&gt;&lt;/span&gt;
&lt;a href="#dynamic-typing-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One of Python&amp;rsquo;s super-friendly features is &lt;strong&gt;dynamic typing&lt;/strong&gt;. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Fixed Type&lt;/strong&gt;: A variable itself doesn&amp;rsquo;t have a fixed data type; &lt;strong&gt;the type belongs to the &lt;em&gt;object&lt;/em&gt; (the value) it refers to&lt;/strong&gt;, not the variable name itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: You can assign a number to a variable, and later assign a piece of text (a string) to the same variable. Python automatically figures out the new type.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# A is currently holding an integer value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;India&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Now A is holding a string value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Common Data Types for Variables 📊&lt;span class="hx-absolute -hx-mt-20" id="common-data-types-for-variables-"&gt;&lt;/span&gt;
&lt;a href="#common-data-types-for-variables-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Variables can hold various types of data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numbers&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Integers (int)&lt;/strong&gt;: Whole numbers without a decimal part (e.g., &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;42&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floating-point numbers (float)&lt;/strong&gt;: Numbers with a decimal part (e.g., &lt;code&gt;20.5&lt;/code&gt;, &lt;code&gt;3.14&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strings (str)&lt;/strong&gt;: Sequences of characters used for text (e.g., &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Sudarshan&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Booleans (bool)&lt;/strong&gt;: Represent truth values, either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. (Note: &lt;code&gt;True&lt;/code&gt; is essentially &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;False&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; for most practical purposes).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lists&lt;/strong&gt;: Ordered collections of items, enclosed in square brackets (e.g., ``, &lt;code&gt;['apple', 'banana']&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuples&lt;/strong&gt;: Similar to lists but &lt;strong&gt;immutable&lt;/strong&gt; (cannot be changed after creation), enclosed in parentheses (e.g., &lt;code&gt;(10, 20, 30)&lt;/code&gt;, &lt;code&gt;('x', 'y')&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;: Collections of &lt;code&gt;key: value&lt;/code&gt; pairs, enclosed in curly braces (e.g., &lt;code&gt;{'name': 'John', 'age': 30}&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Naming Rules for Variables 📝&lt;span class="hx-absolute -hx-mt-20" id="naming-rules-for-variables-"&gt;&lt;/span&gt;
&lt;a href="#naming-rules-for-variables-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python has specific rules for naming variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Allowed Characters&lt;/strong&gt;: Variable names can contain &lt;strong&gt;alphabets&lt;/strong&gt; (A-Z, a-z), &lt;strong&gt;numbers&lt;/strong&gt; (0-9), and the &lt;strong&gt;underscore&lt;/strong&gt; (&lt;code&gt;_&lt;/code&gt;) character.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cannot Start with a Number&lt;/strong&gt;: A variable name &lt;strong&gt;cannot begin with a number&lt;/strong&gt;. For example, &lt;code&gt;1a&lt;/code&gt; is invalid, but &lt;code&gt;a1&lt;/code&gt; is valid.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Case-Sensitive&lt;/strong&gt;: Python is &lt;strong&gt;case-sensitive&lt;/strong&gt;, meaning &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, and &lt;code&gt;NAME&lt;/code&gt; are all considered different variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keywords&lt;/strong&gt;: You &lt;strong&gt;cannot use Python&amp;rsquo;s reserved words (keywords)&lt;/strong&gt; as variable names. Examples of keywords include &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;def&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic Variable Operations and Assignments 🔄&lt;span class="hx-absolute -hx-mt-20" id="basic-variable-operations-and-assignments-"&gt;&lt;/span&gt;
&lt;a href="#basic-variable-operations-and-assignments-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignment Operator (&lt;code&gt;=&lt;/code&gt;)&lt;/strong&gt;: This is how you give a value to a variable.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Good to know you are &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34; years old.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: Good to know you are 15 years old.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Assignment&lt;/strong&gt;: You can assign multiple variables on a single line:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# x becomes 1, y becomes 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: 1 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
You can also assign the &lt;em&gt;same value&lt;/em&gt; to multiple variables:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: 10 10 10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swapping Values&lt;/strong&gt;: A common and neat trick in Python is swapping two variables without needing a temporary one:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;# Values of x and y are swapped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: 2 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incrementing/Decrementing (Augmented Assignment)&lt;/strong&gt;: This is a shorthand for updating a variable&amp;rsquo;s value:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Traditional way&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Or, the shorthand way:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# This means count = count + 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# You can use this with other arithmetic operators too:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# count = count - 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# count = count * 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# count = count / 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting a Variable&lt;/strong&gt;: You can remove a variable from memory using the &lt;code&gt;del&lt;/code&gt; keyword:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;# Deletes the variable x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# print(x) # This would now cause an error: NameError: name &amp;#39;x&amp;#39; is not defined&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why Use Variables? 💡&lt;span class="hx-absolute -hx-mt-20" id="why-use-variables-"&gt;&lt;/span&gt;
&lt;a href="#why-use-variables-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Readability&lt;/strong&gt;: Using descriptive variable names makes your code much easier to understand, almost like reading a story.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;: Variables allow you to use the same value multiple times without retyping it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility &amp;amp; Maintainability&lt;/strong&gt;: If a value needs to change, you only have to update it in one place (where the variable is assigned), rather than finding every instance of that value throughout your code. This is super helpful when building programs for real-life applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What will be the output of the following Python code?
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;London&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Paris&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Which of the following are &lt;strong&gt;invalid&lt;/strong&gt; Python variable names and why?
a. &lt;code&gt;_name&lt;/code&gt;
b. &lt;code&gt;1st_number&lt;/code&gt;
c. &lt;code&gt;Total Amount&lt;/code&gt;
d. &lt;code&gt;for&lt;/code&gt;
e. &lt;code&gt;myAge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write Python code to:
a. Create a variable &lt;code&gt;pi_value&lt;/code&gt; and assign it the literal value &lt;code&gt;3.14159&lt;/code&gt;.
b. Create a variable &lt;code&gt;radius&lt;/code&gt; and ask the user to input a number for it (make sure it&amp;rsquo;s an integer).
c. Calculate &lt;code&gt;area&lt;/code&gt; using the formula &lt;code&gt;pi_value * radius * radius&lt;/code&gt; and print the result.
d. Increment the &lt;code&gt;radius&lt;/code&gt; by 1 using a shorthand operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Answers ✅&lt;span class="hx-absolute -hx-mt-20" id="answers-"&gt;&lt;/span&gt;
&lt;a href="#answers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Paris&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;em&gt;Explanation&lt;/em&gt;: Initially, &lt;code&gt;city&lt;/code&gt; holds &lt;code&gt;&amp;quot;London&amp;quot;&lt;/code&gt;. Then, it&amp;rsquo;s reassigned to &lt;code&gt;&amp;quot;Paris&amp;quot;&lt;/code&gt;. When &lt;code&gt;print(city)&lt;/code&gt; is called, it displays the latest value stored in &lt;code&gt;city&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The invalid Python variable names are:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b. 1st_number&lt;/code&gt;: Invalid because variable names cannot start with a number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c. Total Amount&lt;/code&gt;: Invalid because variable names cannot contain spaces. You can use underscores instead (e.g., &lt;code&gt;total_amount&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d. for&lt;/code&gt;: Invalid because &lt;code&gt;for&lt;/code&gt; is a &lt;strong&gt;reserved keyword&lt;/strong&gt; in Python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a. _name&lt;/code&gt; and &lt;code&gt;e. myAge&lt;/code&gt; are valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a. Create a variable pi_value and assign it the literal value 3.14159&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pi_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14159&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# b. Create a variable radius and ask the user to input a number for it (make sure it&amp;#39;s an integer)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# The input() function asks the user for input, and int() converts it to an integer.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Enter a number for the radius: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# c. Calculate area using the formula pi_value * radius * radius and print the result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pi_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The area is:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# d. Increment the radius by 1 using a shorthand operator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# This is equivalent to radius = radius + 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;New radius:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep practicing, and you&amp;rsquo;ll become comfortable with variables in no time! Coding involves practice, and repeatedly trying out code helps you get better.&lt;/p&gt;</description></item><item><title>Variables and Input Statement</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.5/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.5/</guid><description>
&lt;p&gt;Here is a quick introduction to variables and the input statement in Python, designed for ease of understanding:&lt;/p&gt;
&lt;h3&gt;Introduction to Variables 📦&lt;span class="hx-absolute -hx-mt-20" id="introduction-to-variables-"&gt;&lt;/span&gt;
&lt;a href="#introduction-to-variables-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Think of &lt;strong&gt;variables&lt;/strong&gt; in Python as &lt;strong&gt;named storage locations&lt;/strong&gt; or &lt;strong&gt;containers&lt;/strong&gt; 📦 in your computer&amp;rsquo;s memory. You use them to hold different pieces of information that your program needs to use or change later. Instead of always typing the actual data (like &lt;code&gt;10&lt;/code&gt; or &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;), you give it a &lt;strong&gt;label&lt;/strong&gt; (the variable name).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assigning Values&lt;/strong&gt; ➡️&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You create a variable by using the &lt;strong&gt;assignment operator&lt;/strong&gt; &lt;code&gt;=&lt;/code&gt;. This tells Python to put the value on the right into the container named on the left.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# The variable &amp;#39;score&amp;#39; now holds the number 100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# The variable &amp;#39;name&amp;#39; now holds the text &amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;When you print a variable, Python shows you the &lt;strong&gt;value&lt;/strong&gt; currently inside its box.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Alice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Typing&lt;/strong&gt; ✨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python is &amp;ldquo;dynamically typed&amp;rdquo;. This means you &lt;strong&gt;don&amp;rsquo;t need to declare&lt;/strong&gt; what &lt;em&gt;type&lt;/em&gt; of data a variable will hold beforehand.&lt;/li&gt;
&lt;li&gt;A variable&amp;rsquo;s type is determined &lt;strong&gt;automatically by the value you assign to it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You can even change the type of data a variable holds later:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# item holds an integer (whole number)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Apple&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Now, item holds a string (text)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;This is like using the same kitchen jar 🏺 to store rice today and water tomorrow; the jar itself doesn&amp;rsquo;t change, but what&amp;rsquo;s &lt;em&gt;inside&lt;/em&gt; it does.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Data Types&lt;/strong&gt; 📊
Variables can store various types of data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numbers&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Integers (&lt;code&gt;int&lt;/code&gt;)&lt;/strong&gt;: Whole numbers (e.g., &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;-3&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floating-point numbers (&lt;code&gt;float&lt;/code&gt;)&lt;/strong&gt;: Numbers with decimal points (e.g., &lt;code&gt;3.14&lt;/code&gt;, &lt;code&gt;2.5&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strings (&lt;code&gt;str&lt;/code&gt;)&lt;/strong&gt;: Text, enclosed in single &lt;code&gt;''&lt;/code&gt; or double &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; quotes (e.g., &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;, &lt;code&gt;'Python'&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Booleans (&lt;code&gt;bool&lt;/code&gt;)&lt;/strong&gt;: Represents truth values, either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. (Note: &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are essentially &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; respectively, with a custom display).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lists&lt;/strong&gt;: Ordered collections of items, in square brackets &lt;code&gt;[]&lt;/code&gt; (e.g., ``, &lt;code&gt;['apple', 'banana']&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuples&lt;/strong&gt;: Ordered collections, similar to lists but &lt;strong&gt;immutable&lt;/strong&gt; (cannot be changed after creation), in parentheses &lt;code&gt;()&lt;/code&gt; (e.g., &lt;code&gt;(10, 20)&lt;/code&gt;, &lt;code&gt;('x', 'y')&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;: Unordered collections of &lt;code&gt;key: value&lt;/code&gt; pairs, in curly braces &lt;code&gt;{}&lt;/code&gt; (e.g., &lt;code&gt;{'name': 'John', 'age': 30}&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Naming Rules for Variables&lt;/strong&gt; 📝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Allowed characters&lt;/strong&gt;: Can contain letters (A-Z, a-z), numbers (0-9), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cannot start with a number&lt;/strong&gt;: &lt;code&gt;1variable&lt;/code&gt; is invalid, but &lt;code&gt;variable1&lt;/code&gt; is valid.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Case-sensitive&lt;/strong&gt;: &lt;code&gt;myVar&lt;/code&gt;, &lt;code&gt;myvar&lt;/code&gt;, and &lt;code&gt;MYVAR&lt;/code&gt; are all &lt;strong&gt;different variables&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No keywords&lt;/strong&gt;: You cannot use Python&amp;rsquo;s reserved words (like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;) as variable names. These words have special meanings to Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Variable Operations&lt;/strong&gt; 🔄&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Re-assignment&lt;/strong&gt;: You can change the value a variable holds by assigning a new value to it. The old value is replaced.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Assignment&lt;/strong&gt;: Assign multiple variables on one line:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# x becomes 10, y becomes 20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# a, b, and c all become 5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swapping values&lt;/strong&gt;: A common trick to swap values between two variables:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="c1"&gt;# var1 is now 10, var2 is now 5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Augmented Assignment (Shorthand Operators)&lt;/strong&gt;: For updating a variable based on its current value (e.g., adding to it):
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Same as: count = count + 1 (count is now 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# Same as: count = count * 2 (count is now 2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Variables&lt;/strong&gt;: Remove a variable from memory using &lt;code&gt;del&lt;/code&gt;:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34; confidential&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;my_data&lt;/span&gt; &lt;span class="c1"&gt;# The variable &amp;#39;my_data&amp;#39; no longer exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# print(my_data) would now cause an error because it&amp;#39;s &amp;#34;not defined&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why Use Variables?&lt;/strong&gt; 💡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Readability&lt;/strong&gt;: Using descriptive names (e.g., &lt;code&gt;ram_bank_balance&lt;/code&gt; instead of &lt;code&gt;A&lt;/code&gt;) makes your code easier to understand for yourself and others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;: Store a value once and use the variable name multiple times throughout your code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: If a value changes (e.g., &lt;code&gt;pi_value&lt;/code&gt; for different precision, or &lt;code&gt;radius&lt;/code&gt; for different circles), you only need to update the variable&amp;rsquo;s assignment in one place, making your code easy to modify.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Introduction to the Input Statement ⌨️&lt;span class="hx-absolute -hx-mt-20" id="introduction-to-the-input-statement-"&gt;&lt;/span&gt;
&lt;a href="#introduction-to-the-input-statement-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;input()&lt;/code&gt; function allows your program to &lt;strong&gt;receive data from the user&lt;/strong&gt; while the program is running. It pauses the program, displays a message, and waits for the user to type something and press Enter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic Usage&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Please enter your name: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# The text in quotes is a prompt for the user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Important Note: &lt;code&gt;input()&lt;/code&gt; returns a String!&lt;/strong&gt; ⚠️&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;input()&lt;/code&gt; function &lt;strong&gt;always returns the user&amp;rsquo;s input as a string (&lt;code&gt;str&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you need the input to be a number (integer or float) for calculations, you must &lt;strong&gt;convert it&lt;/strong&gt; using functions like &lt;code&gt;int()&lt;/code&gt; or &lt;code&gt;float()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Type Conversion Examples&lt;/strong&gt; 🔄&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Getting an integer:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;age_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;How old are you? &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# age_str will be a string, e.g., &amp;#34;30&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;age_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Convert the string to an integer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;You will be&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age_int&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;next year.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Now you can do math!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# You can combine them into one line:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;current_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;What is the current year? &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# User input is immediately converted to int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The current year is:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Without converting to a number, you would get an error if you tried to do arithmetic operations like addition or multiplication with the input, because Python cannot perform math directly on strings that look like numbers. For example, &lt;code&gt;&amp;quot;5&amp;quot; + 1&lt;/code&gt; would cause an error, but &lt;code&gt;int(&amp;quot;5&amp;quot;) + 1&lt;/code&gt; would work.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What will be the output of the following Python code?
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;total_cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Total cost:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;New item count:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Which of the following are &lt;strong&gt;valid&lt;/strong&gt; Python variable names? (Select all that apply)
a. &lt;code&gt;_user_data&lt;/code&gt;
b. &lt;code&gt;2nd_try&lt;/code&gt;
c. &lt;code&gt;my favourite color&lt;/code&gt;
d. &lt;code&gt;class&lt;/code&gt;
e. &lt;code&gt;temp_celsius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write Python code that:
a. Asks the user for their favorite number.
b. Stores this input in a variable called &lt;code&gt;fav_num&lt;/code&gt;.
c. Converts &lt;code&gt;fav_num&lt;/code&gt; to an integer.
d. Calculates &lt;code&gt;double_fav_num&lt;/code&gt; by multiplying &lt;code&gt;fav_num&lt;/code&gt; by 2.
e. Prints a message like &amp;ldquo;Your favorite number doubled is [result]&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers ✅&lt;span class="hx-absolute -hx-mt-20" id="answers-"&gt;&lt;/span&gt;
&lt;a href="#answers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;pre&gt;&lt;code&gt;Total cost: 52.5
New item count: 6&lt;/code&gt;&lt;/pre&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: &lt;code&gt;item_count&lt;/code&gt; is initially &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;item_price&lt;/code&gt; is &lt;code&gt;10.5&lt;/code&gt;. &lt;code&gt;total_cost&lt;/code&gt; becomes &lt;code&gt;5 * 10.5 = 52.5&lt;/code&gt;. Then, &lt;code&gt;item_count&lt;/code&gt; is updated to &lt;code&gt;5 + 1 = 6&lt;/code&gt;. The &lt;code&gt;print&lt;/code&gt; statements then display the values of &lt;code&gt;total_cost&lt;/code&gt; and the &lt;em&gt;new&lt;/em&gt; value of &lt;code&gt;item_count&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The valid Python variable names are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a. _user_data&lt;/code&gt; (Valid: Starts with an underscore, uses letters and underscores).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e. temp_celsius&lt;/code&gt; (Valid: Uses letters and underscores).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The invalid names are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b. 2nd_try&lt;/code&gt; (Invalid: Cannot start with a number).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c. my favourite color&lt;/code&gt; (Invalid: Cannot contain spaces. Should use &lt;code&gt;_&lt;/code&gt; or camelCase instead, e.g., &lt;code&gt;my_favourite_color&lt;/code&gt; or &lt;code&gt;myFavouriteColor&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d. class&lt;/code&gt; (Invalid: &lt;code&gt;class&lt;/code&gt; is a &lt;strong&gt;reserved keyword&lt;/strong&gt; in Python).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a. Asks the user for their favorite number.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# b. Stores this input in a variable called fav_num.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fav_num_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;What is your favorite number? &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# c. Converts fav_num to an integer.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fav_num_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fav_num_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# d. Calculates double_fav_num by multiplying fav_num by 2.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;double_fav_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fav_num_int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# e. Prints a message like &amp;#34;Your favorite number doubled is [result]&amp;#34;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Your favorite number doubled is&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double_fav_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Variables and Literals</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.6/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.6/</guid><description>
&lt;p&gt;Let&amp;rsquo;s explore variables and the &lt;code&gt;input()&lt;/code&gt; statement in Python, making it super easy to understand! ✨&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;1. Variables: Your Program&amp;rsquo;s Memory Boxes&lt;/strong&gt; 📦&lt;span class="hx-absolute -hx-mt-20" id="1-variables-your-program-"&gt;&lt;/span&gt;
&lt;a href="#1-variables-your-program-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Imagine variables as little &lt;strong&gt;storage locations&lt;/strong&gt; or &lt;strong&gt;containers&lt;/strong&gt; 📦 in your computer&amp;rsquo;s memory. You give each box a &lt;strong&gt;name&lt;/strong&gt; (the variable name) so you can easily put things inside it, take things out, or change what&amp;rsquo;s stored there later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assigning Values&lt;/strong&gt; ➡️&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You put a value into a variable using the &lt;strong&gt;assignment operator&lt;/strong&gt; &lt;code&gt;=&lt;/code&gt;. This tells Python: &amp;ldquo;Take the value on the right, and put it into the box named on the left!&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# The box &amp;#39;my_score&amp;#39; now holds the number 100 💯&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# The box &amp;#39;greeting&amp;#39; now holds the text &amp;#34;Hello&amp;#34; 👋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;When you ask Python to &lt;code&gt;print()&lt;/code&gt; a variable, it shows you whatever &lt;strong&gt;value&lt;/strong&gt; is currently &lt;em&gt;inside&lt;/em&gt; that box.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Declarations Needed! (Dynamic Typing)&lt;/strong&gt; ✨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One of Python&amp;rsquo;s cool features is that you &lt;strong&gt;don&amp;rsquo;t need to tell it beforehand&lt;/strong&gt; what &lt;em&gt;type&lt;/em&gt; of data a variable will hold (like &amp;ldquo;this box will only ever hold numbers&amp;rdquo;). This is called &amp;ldquo;dynamic typing&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Python &lt;strong&gt;automatically figures out the type&lt;/strong&gt; based on the value you put in the box.&lt;/li&gt;
&lt;li&gt;You can even change the type of data a variable holds later! It&amp;rsquo;s like using the same kitchen jar 🏺 for rice today and water tomorrow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# 📦 &amp;#39;item&amp;#39; holds an integer (whole number)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Apple&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Now, 📦 &amp;#39;item&amp;#39; holds a string (text) 🍎&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;type lives with the object&lt;/strong&gt;, not the variable name itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Data Types&lt;/strong&gt; 📊
Variables can store various categories of data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numbers:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Integers (&lt;code&gt;int&lt;/code&gt;)&lt;/strong&gt;: Whole numbers (e.g., &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;-3&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floating-point numbers (&lt;code&gt;float&lt;/code&gt;)&lt;/strong&gt;: Numbers with decimal points (e.g., &lt;code&gt;3.14&lt;/code&gt;, &lt;code&gt;2.5&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strings (&lt;code&gt;str&lt;/code&gt;)&lt;/strong&gt;: Text, enclosed in single &lt;code&gt;''&lt;/code&gt; or double &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; quotes (e.g., &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;, &lt;code&gt;'Python'&lt;/code&gt;). Text information and arbitrary collections of bytes are stored as strings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Booleans (&lt;code&gt;bool&lt;/code&gt;)&lt;/strong&gt;: Represents truth values, either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. These are essentially customized versions of integers &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; respectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lists&lt;/strong&gt;: Ordered collections of items, in square brackets &lt;code&gt;[]&lt;/code&gt; (e.g., ``, &lt;code&gt;['apple', 'banana']&lt;/code&gt;). Lists are &lt;strong&gt;mutable&lt;/strong&gt;, meaning they can be changed in-place.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuples&lt;/strong&gt;: Ordered collections like lists, but they are &lt;strong&gt;immutable&lt;/strong&gt; (cannot be changed after creation). They are coded in parentheses &lt;code&gt;()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;: Unordered collections of &lt;code&gt;key: value&lt;/code&gt; pairs, in curly braces &lt;code&gt;{}&lt;/code&gt; (e.g., &lt;code&gt;{'name': 'John', 'age': 30}&lt;/code&gt;). Keys must be unique and immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Naming Rules for Variables&lt;/strong&gt; 📝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Allowed characters&lt;/strong&gt;: Can contain letters (A-Z, a-z), numbers (0-9), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cannot start with a number&lt;/strong&gt;: &lt;code&gt;1variable&lt;/code&gt; is invalid, but &lt;code&gt;variable1&lt;/code&gt; is valid.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Case-sensitive&lt;/strong&gt;: &lt;code&gt;myVar&lt;/code&gt;, &lt;code&gt;myvar&lt;/code&gt;, and &lt;code&gt;MYVAR&lt;/code&gt; are all &lt;strong&gt;different variables&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No keywords&lt;/strong&gt;: You cannot use Python&amp;rsquo;s &lt;strong&gt;reserved words&lt;/strong&gt; (like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;) as variable names. These words have special meanings to Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-explanatory&lt;/strong&gt;: It&amp;rsquo;s good practice to make your variable names descriptive and self-explanatory (e.g., &lt;code&gt;ram_bank_balance&lt;/code&gt; instead of &lt;code&gt;A&lt;/code&gt;) to make your code easier to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Variable Operations&lt;/strong&gt; 🔄&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Re-assignment&lt;/strong&gt;: You can change the value a variable holds by assigning a new value to it. The old value is replaced.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Assignment&lt;/strong&gt;: Assign multiple variables on one line, where values on the right are paired with variables on the left by position.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# x becomes 10, y becomes 20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# a, b, and c all become 5 (they all refer to the same object)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
This is a common way to &lt;strong&gt;swap&lt;/strong&gt; variable values without a temporary variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Augmented Assignment (Shorthand Operators)&lt;/strong&gt;: For updating a variable based on its current value (e.g., adding to it).
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Same as: count = count + 1 (count is now 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# Same as: count = count * 2 (count is now 2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Variables&lt;/strong&gt;: Remove a variable from memory using &lt;code&gt;del&lt;/code&gt;.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;confidential&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;my_data&lt;/span&gt; &lt;span class="c1"&gt;# The variable &amp;#39;my_data&amp;#39; no longer exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# print(my_data) would now cause an error because it&amp;#39;s &amp;#34;not defined&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;2. Literals: The Raw Values&lt;/strong&gt; 🧱&lt;span class="hx-absolute -hx-mt-20" id="2-literals-the-raw-values-"&gt;&lt;/span&gt;
&lt;a href="#2-literals-the-raw-values-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Literals&lt;/strong&gt; are the &lt;strong&gt;actual, raw values&lt;/strong&gt; themselves, written directly in your code. They are the data that you might store in a variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Examples:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt; (an integer literal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3.14&lt;/code&gt; (a float literal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; (a string literal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt; (a Boolean literal)&lt;/li&gt;
&lt;li&gt;`` (a list literal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{'name': 'Bob'}&lt;/code&gt; (a dictionary literal)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key Difference from Variables:&lt;/strong&gt; Literals can only appear on the &lt;strong&gt;right-hand side&lt;/strong&gt; of an assignment operator (&lt;code&gt;=&lt;/code&gt;). You cannot assign a value to a literal.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;age = 30&lt;/code&gt; (Correct: &lt;code&gt;30&lt;/code&gt; is a literal assigned to variable &lt;code&gt;age&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;30 = age&lt;/code&gt; (Incorrect: You cannot assign to a literal)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When to Use Literals vs. Variables&lt;/strong&gt; 💡
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;variables&lt;/strong&gt; when a value might &lt;strong&gt;change&lt;/strong&gt; or needs to be &lt;strong&gt;reused&lt;/strong&gt; throughout your program (like a person&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;age&lt;/code&gt;, or a &lt;code&gt;radius&lt;/code&gt; that might vary).&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;literals&lt;/strong&gt; for values that are &lt;strong&gt;constant&lt;/strong&gt; and will &lt;strong&gt;never change&lt;/strong&gt; (like the value of &lt;code&gt;pi&lt;/code&gt; being &lt;code&gt;3.14&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;3. The Input Statement: Talking to Your Program&lt;/strong&gt; 💬&lt;span class="hx-absolute -hx-mt-20" id="3-the-input-statement-talking-to-your-program-"&gt;&lt;/span&gt;
&lt;a href="#3-the-input-statement-talking-to-your-program-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;input()&lt;/code&gt; function is how your Python program &lt;strong&gt;pauses&lt;/strong&gt; ⏸️ and waits for the user to &lt;strong&gt;type something&lt;/strong&gt; ⌨️ and press Enter. It&amp;rsquo;s how you make your programs interactive!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Basic Usage:&lt;/strong&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Please enter your name: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# The text in quotes is a prompt for the user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# When executed, it will display &amp;#34;Please enter your name: &amp;#34; and wait for you to type.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Important: &lt;code&gt;input()&lt;/code&gt; Always Returns a String!&lt;/strong&gt; ⚠️
&lt;ul&gt;
&lt;li&gt;This is a crucial point! No matter what the user types (even if it looks like a number), the &lt;code&gt;input()&lt;/code&gt; function &lt;strong&gt;always gives you back the input as a string (&lt;code&gt;str&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you need the input to be a &lt;strong&gt;number&lt;/strong&gt; (integer or float) for calculations or comparisons, you &lt;strong&gt;must convert it&lt;/strong&gt; explicitly using functions like &lt;code&gt;int()&lt;/code&gt; or &lt;code&gt;float()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Trying to do math on a string that looks like a number will cause an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type Conversion Examples&lt;/strong&gt; 🔄
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Getting an integer:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;age_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;How old are you? &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 📥 age_str will be a string, e.g., &amp;#34;30&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;age_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 🔄 Convert the string to an integer (e.g., 30)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;You will be&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age_int&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;next year.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Now you can do math!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# You can combine them into one line:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;current_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;What is the current year? &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# User input immediately converted to int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The current year is:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Practice Questions&lt;/strong&gt; 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What will be the output of the following Python code? Explain why.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fav_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;My favorite color is &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fav_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Which of the following are &lt;strong&gt;invalid&lt;/strong&gt; Python variable names? (Select all that apply)
a. &lt;code&gt;_count&lt;/code&gt;
b. &lt;code&gt;User Name&lt;/code&gt;
c. &lt;code&gt;for&lt;/code&gt;
d. &lt;code&gt;Price2&lt;/code&gt;
e. &lt;code&gt;3apples&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write Python code that:
a. Asks the user for the current temperature in Celsius.
b. Stores this input in a variable called &lt;code&gt;celsius_temp&lt;/code&gt;.
c. Converts &lt;code&gt;celsius_temp&lt;/code&gt; to a floating-point number.
d. Calculates Fahrenheit using the formula: &lt;code&gt;Fahrenheit = (Celsius * 9/5) + 32&lt;/code&gt;.
e. Prints a message like &amp;ldquo;The temperature in Fahrenheit is [result]°F.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Answers&lt;/strong&gt; ✅&lt;span class="hx-absolute -hx-mt-20" id="answers-"&gt;&lt;/span&gt;
&lt;a href="#answers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;1. Output and Explanation&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="1-output-and-explanation"&gt;&lt;/span&gt;
&lt;a href="#1-output-and-explanation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;pre&gt;&lt;code&gt;My favorite color is Blue
10&lt;/code&gt;&lt;/pre&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fav_color&lt;/code&gt; is assigned &lt;code&gt;&amp;quot;Blue&amp;quot;&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; is assigned &lt;code&gt;&amp;quot;My favorite color is &amp;quot;&lt;/code&gt;. The &lt;code&gt;+&lt;/code&gt; operator &lt;strong&gt;concatenates&lt;/strong&gt; (joins) these two strings, so the first &lt;code&gt;print()&lt;/code&gt; statement outputs &lt;code&gt;&amp;quot;My favorite color is Blue&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt; is initially &lt;code&gt;5&lt;/code&gt;. The line &lt;code&gt;number = number * 2&lt;/code&gt; &lt;strong&gt;re-assigns&lt;/strong&gt; &lt;code&gt;number&lt;/code&gt; to its current value (&lt;code&gt;5&lt;/code&gt;) multiplied by &lt;code&gt;2&lt;/code&gt;, making &lt;code&gt;number&lt;/code&gt; equal to &lt;code&gt;10&lt;/code&gt;. The second &lt;code&gt;print()&lt;/code&gt; statement then outputs the new value of &lt;code&gt;number&lt;/code&gt;, which is &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;2. Invalid Variable Names&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="2-invalid-variable-names"&gt;&lt;/span&gt;
&lt;a href="#2-invalid-variable-names" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The invalid Python variable names are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b. User Name&lt;/code&gt; (Invalid: Variable names cannot contain &lt;strong&gt;spaces&lt;/strong&gt;. You would typically use an underscore, e.g., &lt;code&gt;user_name&lt;/code&gt;, or camelCase, e.g., &lt;code&gt;userName&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c. for&lt;/code&gt; (Invalid: &lt;code&gt;for&lt;/code&gt; is a &lt;strong&gt;reserved keyword&lt;/strong&gt; in Python, meaning it has a special purpose and cannot be used as a variable name).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e. 3apples&lt;/code&gt; (Invalid: Variable names &lt;strong&gt;cannot start with a number&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The valid names are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a. _count&lt;/code&gt; (Valid: Can start with an underscore).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d. Price2&lt;/code&gt; (Valid: Can contain numbers, but not at the start).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;3. Temperature Conversion Code&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="3-temperature-conversion-code"&gt;&lt;/span&gt;
&lt;a href="#3-temperature-conversion-code" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a. Asks the user for the current temperature in Celsius.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# b. Stores this input in a variable called celsius_temp.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;celsius_temp_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Enter the temperature in Celsius: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 🌡️&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# c. Converts celsius_temp to a floating-point number.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;celsius_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;celsius_temp_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 🔄 float() is used for decimal numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# d. Calculates Fahrenheit using the formula.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fahrenheit_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;celsius_temp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# e. Prints a message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The temperature in Fahrenheit is&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fahrenheit_temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;°F.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Data Types 1</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.7/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.7/</guid><description>
&lt;p&gt;Here&amp;rsquo;s an easy-to-understand explanation of data types in Python, building on our previous conversation about variables and literals! ✨&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Understanding Data Types in Python&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="understanding-data-types-in-python"&gt;&lt;/span&gt;
&lt;a href="#understanding-data-types-in-python" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python automatically handles the &lt;strong&gt;type&lt;/strong&gt; of data you&amp;rsquo;re working with. When you put &amp;ldquo;stuff&amp;rdquo; into a variable, Python gives it a label based on what kind of &amp;ldquo;stuff&amp;rdquo; it is. This label is called a &lt;strong&gt;data type&lt;/strong&gt;. Different data types are stored and processed differently by the computer.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;1. Variables &amp;amp; Dynamic Typing: Your Flexible Containers&lt;/strong&gt; 📦🔄&lt;span class="hx-absolute -hx-mt-20" id="1-variables--dynamic-typing-your-flexible-containers-"&gt;&lt;/span&gt;
&lt;a href="#1-variables--dynamic-typing-your-flexible-containers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;As we discussed, &lt;strong&gt;variables&lt;/strong&gt; are like named containers 📦 in your computer&amp;rsquo;s memory where you store pieces of data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assignment is Creation&lt;/strong&gt; ➡️: A variable is created the moment you &lt;strong&gt;assign a value&lt;/strong&gt; to it using the &lt;code&gt;=&lt;/code&gt; operator.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;my_number = 42&lt;/code&gt; 🔢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Typing (Python&amp;rsquo;s Superpower!)&lt;/strong&gt; ✨: One of Python&amp;rsquo;s most convenient features is that you &lt;strong&gt;don&amp;rsquo;t need to tell it what type of data a variable will hold&lt;/strong&gt;. Python &lt;strong&gt;automatically recognises the data type&lt;/strong&gt; that is being stored.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This means the &lt;em&gt;type&lt;/em&gt; belongs to the &lt;em&gt;value&lt;/em&gt; (the object), not the variable name itself. So, a single variable name can hold different types of data at different times.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_flex_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# Now holds an integer 🔟&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_flex_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Now holds a string 👋 (its type changed!)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Checking the Type&lt;/strong&gt; 🔍: You can always ask Python what type of data a variable (or any value) is currently holding using the &lt;code&gt;type()&lt;/code&gt; command.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;print(type(my_flex_var))&lt;/code&gt; would show &lt;code&gt;&amp;lt;class 'str'&amp;gt;&lt;/code&gt; if it holds &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Literals: The Actual Values&lt;/strong&gt; 🧱: Just to recap, &lt;strong&gt;literals&lt;/strong&gt; are the actual raw values you write directly in your code, like &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;3.14&lt;/code&gt;, or &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;. They can only appear on the right side of an assignment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;2. Core Data Types in Python&lt;/strong&gt; 📊&lt;span class="hx-absolute -hx-mt-20" id="2-core-data-types-in-python-"&gt;&lt;/span&gt;
&lt;a href="#2-core-data-types-in-python-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Python has several fundamental built-in data types that are used for different kinds of information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integers (&lt;code&gt;int&lt;/code&gt;)&lt;/strong&gt; 🔢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Whole numbers&lt;/strong&gt;, whether positive, negative, or zero, without any decimal part.&lt;/li&gt;
&lt;li&gt;Python integers have &lt;strong&gt;unlimited precision&lt;/strong&gt;, meaning they can be as large as your computer&amp;rsquo;s memory allows.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Examples&lt;/em&gt;: &lt;code&gt;age = 30&lt;/code&gt; 👴, &lt;code&gt;count = 100&lt;/code&gt; 💯, &lt;code&gt;temp = -7&lt;/code&gt; ❄️.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Floating-point numbers (&lt;code&gt;float&lt;/code&gt;)&lt;/strong&gt; 📈:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers that contain a &lt;strong&gt;decimal point&lt;/strong&gt; or an exponent. They are often simply called &amp;ldquo;floats&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Python uses floating-point arithmetic when these numbers are involved in calculations.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Examples&lt;/em&gt;: &lt;code&gt;price = 19.99&lt;/code&gt; 💰, &lt;code&gt;pi = 3.14159&lt;/code&gt; 🥧, &lt;code&gt;temp_c = 20.5&lt;/code&gt; 🌡️.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strings (&lt;code&gt;str&lt;/code&gt;)&lt;/strong&gt; 💬:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used for &lt;strong&gt;text&lt;/strong&gt; and collections of characters.&lt;/li&gt;
&lt;li&gt;You create strings by enclosing the text in &lt;strong&gt;single quotes (&lt;code&gt;'&lt;/code&gt;) or double quotes (&lt;code&gt;&amp;quot;&lt;/code&gt;)&lt;/strong&gt;. Triple quotes (&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt; or &lt;code&gt;'''&lt;/code&gt;) are used for multi-line strings.&lt;/li&gt;
&lt;li&gt;Strings are &lt;strong&gt;sequences&lt;/strong&gt;, meaning their characters are ordered and can be accessed by their position (index), starting from 0.&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;combine (concatenate) strings&lt;/strong&gt; using the &lt;code&gt;+&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;repeat a string&lt;/strong&gt; using the &lt;code&gt;*&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Important&lt;/strong&gt;: Strings are &lt;strong&gt;immutable&lt;/strong&gt;. This means once a string is created, you &lt;strong&gt;cannot change its individual characters&lt;/strong&gt;. If you &amp;ldquo;modify&amp;rdquo; a string, you are actually creating a &lt;em&gt;new&lt;/em&gt; string and assigning the variable to this new one.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Examples&lt;/em&gt;: &lt;code&gt;name = &amp;quot;Alice&amp;quot;&lt;/code&gt; 👩‍🦰, &lt;code&gt;greeting = 'Hello, world!'&lt;/code&gt; 👋, &lt;code&gt;sentence = &amp;quot;&amp;quot;&amp;quot;This is a\nmulti-line string.&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt; 📝.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Booleans (&lt;code&gt;bool&lt;/code&gt;)&lt;/strong&gt; ✅❌:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Represent &lt;strong&gt;truth values&lt;/strong&gt;: they can only be &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Case matters!&lt;/strong&gt; The &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;True&lt;/code&gt; and the &lt;code&gt;F&lt;/code&gt; in &lt;code&gt;False&lt;/code&gt; &lt;strong&gt;must be capital letters&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Internally, &lt;code&gt;True&lt;/code&gt; behaves like the integer &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;False&lt;/code&gt; behaves like &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;They are fundamental for decision-making in code (e.g., &lt;code&gt;if&lt;/code&gt; statements).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Examples&lt;/em&gt;: &lt;code&gt;is_raining = True&lt;/code&gt; ☔, &lt;code&gt;has_permission = False&lt;/code&gt; 🚫.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lists&lt;/strong&gt; &lt;code&gt;[]&lt;/code&gt; 📋:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ordered collections of items&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Items are placed inside &lt;strong&gt;square brackets &lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt; and separated by commas.&lt;/li&gt;
&lt;li&gt;Lists are incredibly flexible: they can hold items of &lt;strong&gt;different data types&lt;/strong&gt; within the same list.&lt;/li&gt;
&lt;li&gt;Lists are &lt;strong&gt;mutable&lt;/strong&gt;. This means you &lt;strong&gt;can change them after they are created&lt;/strong&gt; – you can add, remove, or modify items directly in the list.&lt;/li&gt;
&lt;li&gt;You access individual items using &lt;strong&gt;indexing&lt;/strong&gt;, starting from &lt;code&gt;0&lt;/code&gt; for the first item. Slicing also works on lists.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Examples&lt;/em&gt;: &lt;code&gt;shopping_list = [&amp;quot;milk&amp;quot;, &amp;quot;eggs&amp;quot;, 2.50]&lt;/code&gt; 🛒, &lt;code&gt;numbers =&lt;/code&gt; 🔢.&lt;/li&gt;
&lt;li&gt;You can concatenate lists with &lt;code&gt;+&lt;/code&gt; and repeat them with &lt;code&gt;*&lt;/code&gt;, which results in a new list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Practice Questions&lt;/strong&gt; 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What are the two roles of variables in Python, and how does Python handle their data types? Use an emoji to illustrate the concept.&lt;/li&gt;
&lt;li&gt;Identify the data type for each of the following literals:
a. &lt;code&gt;150&lt;/code&gt;
b. &lt;code&gt;&amp;quot;Python is fun!&amp;quot;&lt;/code&gt;
c. &lt;code&gt;0.001&lt;/code&gt;
d. &lt;code&gt;True&lt;/code&gt;
e. &lt;code&gt;['red', 'green', 'blue']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Explain the key difference between how strings and lists behave when you try to &amp;ldquo;change&amp;rdquo; their content in Python. What is the term used to describe this property for strings?&lt;/li&gt;
&lt;li&gt;What will be the output of the following Python code? Explain your answer.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Book&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Is &lt;code&gt;2_apples&lt;/code&gt; a valid variable name in Python? How about &lt;code&gt;for&lt;/code&gt;? Justify your answer based on the rules.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Answers&lt;/strong&gt; ✅&lt;span class="hx-absolute -hx-mt-20" id="answers-"&gt;&lt;/span&gt;
&lt;a href="#answers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Roles of Variables and Python&amp;rsquo;s Type Handling&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variables act as &lt;strong&gt;named storage locations&lt;/strong&gt; 📦 in the computer&amp;rsquo;s memory.&lt;/li&gt;
&lt;li&gt;They are &lt;strong&gt;created when assigned values&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Python employs &lt;strong&gt;dynamic typing&lt;/strong&gt; ✨. This means you &lt;strong&gt;don&amp;rsquo;t declare a variable&amp;rsquo;s type&lt;/strong&gt; beforehand; Python automatically determines and assigns the data type based on the value it holds. A variable&amp;rsquo;s type can change if a new value of a different type is assigned to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Type Identification&lt;/strong&gt;:
a. &lt;code&gt;150&lt;/code&gt; ➡️ &lt;strong&gt;Integer (&lt;code&gt;int&lt;/code&gt;)&lt;/strong&gt;
b. &lt;code&gt;&amp;quot;Python is fun!&amp;quot;&lt;/code&gt; ➡️ &lt;strong&gt;String (&lt;code&gt;str&lt;/code&gt;)&lt;/strong&gt;
c. &lt;code&gt;0.001&lt;/code&gt; ➡️ &lt;strong&gt;Floating-point number (&lt;code&gt;float&lt;/code&gt;)&lt;/strong&gt;
d. &lt;code&gt;True&lt;/code&gt; ➡️ &lt;strong&gt;Boolean (&lt;code&gt;bool&lt;/code&gt;)&lt;/strong&gt;
e. &lt;code&gt;['red', 'green', 'blue']&lt;/code&gt; ➡️ &lt;strong&gt;List&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;String vs. List Mutability&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key difference lies in their &lt;strong&gt;mutability&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; are &lt;strong&gt;immutable&lt;/strong&gt; 🔒. This means that once a string is created, its content cannot be changed in-place. Any operation that seems to &amp;ldquo;modify&amp;rdquo; a string (like concatenation or replacement) actually creates a &lt;em&gt;new&lt;/em&gt; string object, and the variable is then made to refer to this new object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lists&lt;/strong&gt; are &lt;strong&gt;mutable&lt;/strong&gt; ✍️. Their content &lt;em&gt;can&lt;/em&gt; be changed in-place after creation. You can add, remove, or modify items directly within the existing list object without creating a new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Output and Explanation of Code Snippet&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
130&lt;/code&gt;&lt;/pre&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;item = &amp;quot;Book&amp;quot;&lt;/code&gt;: &lt;code&gt;item&lt;/code&gt; initially holds a string value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item = 123&lt;/code&gt;: Due to &lt;strong&gt;dynamic typing&lt;/strong&gt; ✨, &lt;code&gt;item&lt;/code&gt; is re-assigned an integer value. Its type changes from string to integer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(type(item))&lt;/code&gt;: This prints the current type of &lt;code&gt;item&lt;/code&gt;, which is now an integer, so it outputs &lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item = item + 7&lt;/code&gt;: This performs integer addition. &lt;code&gt;123 + 7&lt;/code&gt; equals &lt;code&gt;130&lt;/code&gt;. The variable &lt;code&gt;item&lt;/code&gt; is updated to &lt;code&gt;130&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(item)&lt;/code&gt;: This prints the final value of &lt;code&gt;item&lt;/code&gt;, which is &lt;code&gt;130&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Valid Variable Names&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2_apples&lt;/code&gt; ➡️ &lt;strong&gt;Invalid&lt;/strong&gt; ❌. Python variable names &lt;strong&gt;cannot start with a number&lt;/strong&gt;. They must start with an alphabet (letter) or an underscore (&lt;code&gt;_&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; ➡️ &lt;strong&gt;Invalid&lt;/strong&gt; ❌. &lt;code&gt;for&lt;/code&gt; is a &lt;strong&gt;reserved keyword&lt;/strong&gt; in Python. Reserved keywords have special meanings to the Python interpreter and &lt;strong&gt;cannot be used as variable names&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Data Types 2</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.8/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.8/</guid><description>
&lt;p&gt;Certainly! Let&amp;rsquo;s delve into the concepts covered in &amp;ldquo;Data Types 2&amp;rdquo; to enhance your understanding.&lt;/p&gt;
&lt;p&gt;In Python, every piece of data belongs to a specific &lt;strong&gt;data type&lt;/strong&gt;, which categorises the kind of value it represents and determines what operations can be performed on it. For example, a whole number like &lt;code&gt;10&lt;/code&gt; is an &lt;strong&gt;integer&lt;/strong&gt; (type &lt;code&gt;int&lt;/code&gt;) 🔢, a number with a decimal part like &lt;code&gt;5.6&lt;/code&gt; is a &lt;strong&gt;float&lt;/strong&gt; (type &lt;code&gt;float&lt;/code&gt;) 🧮, and text enclosed in quotes like &lt;code&gt;&amp;quot;India&amp;quot;&lt;/code&gt; is a &lt;strong&gt;string&lt;/strong&gt; (type &lt;code&gt;str&lt;/code&gt;) 📝. Python is clever because it &lt;strong&gt;automatically recognises the type of data you store&lt;/strong&gt; in a variable. You can always check the type of any variable using the built-in &lt;code&gt;type()&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;Boolean Data Type 🧐&lt;span class="hx-absolute -hx-mt-20" id="boolean-data-type-"&gt;&lt;/span&gt;
&lt;a href="#boolean-data-type-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&amp;ldquo;Data Types 2&amp;rdquo; introduces a new, important data type called &lt;strong&gt;Boolean&lt;/strong&gt; (type &lt;code&gt;bool&lt;/code&gt;). This type is unique because it can only hold one of &lt;strong&gt;two distinct values&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;True&lt;/strong&gt; ✅&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;False&lt;/strong&gt; ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s &lt;strong&gt;crucial&lt;/strong&gt; 🚨 that when you write &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; in your Python code, the &lt;strong&gt;first letter (T or F) must be capitalised&lt;/strong&gt;. If you use &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; with a lowercase first letter, Python will not recognise them as Boolean values.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are explicitly Boolean, they are technically &lt;strong&gt;customised versions of the integers &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; respectively&lt;/strong&gt;. For instance, if you were to add &lt;code&gt;True&lt;/code&gt; to a number, it would behave like &lt;code&gt;1&lt;/code&gt; (e.g., &lt;code&gt;True + 4&lt;/code&gt; results in &lt;code&gt;5&lt;/code&gt;). This underlying numerical representation allows Booleans to be used effectively in logical operations and comparisons.&lt;/p&gt;
&lt;h3&gt;Data Type Conversion 🔄&lt;span class="hx-absolute -hx-mt-20" id="data-type-conversion-"&gt;&lt;/span&gt;
&lt;a href="#data-type-conversion-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python allows you to &lt;strong&gt;convert data from one type to another&lt;/strong&gt;. This is done by explicitly using built-in functions that share the name of the data type you wish to convert to. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To convert a float to an integer, you&amp;rsquo;d use &lt;code&gt;int()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To convert a string to an integer, you&amp;rsquo;d also use &lt;code&gt;int()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similarly, &lt;code&gt;float()&lt;/code&gt; converts to a floating-point number, and &lt;code&gt;str()&lt;/code&gt; converts to a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, not all conversions are possible (e.g., you can&amp;rsquo;t convert &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; to an integer directly).&lt;/p&gt;
&lt;h3&gt;Converting to Boolean (&lt;code&gt;bool()&lt;/code&gt; Function) 🤔➡️✅/❌&lt;span class="hx-absolute -hx-mt-20" id="converting-to-boolean-bool-function-"&gt;&lt;/span&gt;
&lt;a href="#converting-to-boolean-bool-function-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;bool()&lt;/code&gt; function is particularly interesting for type conversion, as it allows you to convert various data types (integers, floats, strings) into their Boolean equivalents. The rules for this conversion are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numbers&lt;/strong&gt; 🔢:
&lt;ul&gt;
&lt;li&gt;Any &lt;strong&gt;non-zero number&lt;/strong&gt; (positive or negative, integer or float) converts to &lt;strong&gt;True&lt;/strong&gt; ✅.&lt;/li&gt;
&lt;li&gt;The number &lt;strong&gt;zero (&lt;code&gt;0&lt;/code&gt; or &lt;code&gt;0.0&lt;/code&gt;)&lt;/strong&gt; converts to &lt;strong&gt;False&lt;/strong&gt; ❌.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 💬:
&lt;ul&gt;
&lt;li&gt;Any &lt;strong&gt;non-empty string&lt;/strong&gt; converts to &lt;strong&gt;True&lt;/strong&gt; ✅.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;empty string (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)&lt;/strong&gt; converts to &lt;strong&gt;False&lt;/strong&gt; ❌.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other Data Structures&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Generally, any &lt;strong&gt;non-empty data structure&lt;/strong&gt; (like a list `` or dictionary &lt;code&gt;{'key': 'value'}&lt;/code&gt;) evaluates to &lt;strong&gt;True&lt;/strong&gt; ✅.&lt;/li&gt;
&lt;li&gt;Any &lt;strong&gt;empty data structure&lt;/strong&gt; (such as an empty list &lt;code&gt;[]&lt;/code&gt; or an empty dictionary &lt;code&gt;{}&lt;/code&gt;) evaluates to &lt;strong&gt;False&lt;/strong&gt; ❌.&lt;/li&gt;
&lt;li&gt;The special placeholder object &lt;strong&gt;&lt;code&gt;None&lt;/code&gt;&lt;/strong&gt; also evaluates to &lt;strong&gt;False&lt;/strong&gt; ❌.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This concept of &amp;ldquo;truthiness&amp;rdquo; and &amp;ldquo;falsiness&amp;rdquo; for objects is fundamental in Python and is often used in conditional statements (e.g., &lt;code&gt;if&lt;/code&gt; statements).&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Here are a few questions to help you solidify your understanding of these concepts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are the two core values of the Boolean data type, and what is a common mistake related to writing them in Python? 🤔&lt;/li&gt;
&lt;li&gt;If you have a string variable &lt;code&gt;my_number = &amp;quot;123&amp;quot;&lt;/code&gt;, how would you convert &lt;code&gt;my_number&lt;/code&gt; into an integer so you can perform mathematical operations on it? Show the Python code. 🧑‍💻&lt;/li&gt;
&lt;li&gt;Predict the Boolean output for each of the following expressions using the &lt;code&gt;bool()&lt;/code&gt; function, and explain why:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bool(-5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(&amp;quot;Hello Python&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool([])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool({&amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot;})&lt;/code&gt; 🔮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers to Practice Questions 💡&lt;span class="hx-absolute -hx-mt-20" id="answers-to-practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#answers-to-practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;The two core values of the Boolean data type are &lt;strong&gt;True&lt;/strong&gt; ✅ and &lt;strong&gt;False&lt;/strong&gt; ❌. A common mistake is not capitalising the first letter (e.g., writing &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; instead of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;), which would prevent Python from recognising them as Boolean values.&lt;/li&gt;
&lt;li&gt;You would convert &lt;code&gt;my_number&lt;/code&gt; to an integer using the &lt;code&gt;int()&lt;/code&gt; function.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;123&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;converted_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;converted_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;converted_number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
Now, &lt;code&gt;converted_number&lt;/code&gt; can be used for mathematical operations.&lt;/li&gt;
&lt;li&gt;Here are the predictions and explanations:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bool(-5)&lt;/code&gt;: &lt;strong&gt;True&lt;/strong&gt; ✅
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: Any non-zero number (positive or negative) converts to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(&amp;quot;&amp;quot;)&lt;/code&gt;: &lt;strong&gt;False&lt;/strong&gt; ❌
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: An empty string converts to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(&amp;quot;Hello Python&amp;quot;)&lt;/code&gt;: &lt;strong&gt;True&lt;/strong&gt; ✅
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: Any non-empty string converts to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(0)&lt;/code&gt;: &lt;strong&gt;False&lt;/strong&gt; ❌
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: The number zero converts to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool([])&lt;/code&gt;: &lt;strong&gt;False&lt;/strong&gt; ❌
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: An empty list (an empty data structure) converts to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool({&amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot;})&lt;/code&gt;: &lt;strong&gt;True&lt;/strong&gt; ✅
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: A non-empty dictionary (a non-empty data structure) converts to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Operators and Expressions 1</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.9/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.9/</guid><description>
&lt;p&gt;Let&amp;rsquo;s make understanding Python&amp;rsquo;s &lt;strong&gt;Operators and Expressions&lt;/strong&gt; easy, with a touch of emojis! 🚀&lt;/p&gt;
&lt;p&gt;In Python, an &lt;strong&gt;expression&lt;/strong&gt; is a combination of &lt;strong&gt;values&lt;/strong&gt; (like &lt;code&gt;10&lt;/code&gt; or &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt;), &lt;strong&gt;variables&lt;/strong&gt; (names that store values), and &lt;strong&gt;operators&lt;/strong&gt; (special symbols) that Python can evaluate to produce a result. Think of it like a mathematical equation or a phrase that calculates something. When you type an expression, the interpreter finds its value. &lt;strong&gt;Operators&lt;/strong&gt; are the symbols that perform computations, such as addition or multiplication.&lt;/p&gt;
&lt;h3&gt;1. Arithmetic Operators ➕➖✖️➗&lt;span class="hx-absolute -hx-mt-20" id="1-arithmetic-operators-"&gt;&lt;/span&gt;
&lt;a href="#1-arithmetic-operators-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These are the most common operators you&amp;rsquo;ll use for mathematical calculations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Addition (&lt;code&gt;+&lt;/code&gt;)&lt;/strong&gt;: Adds two numbers together.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;3 + 2&lt;/code&gt; results in &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subtraction (&lt;code&gt;-&lt;/code&gt;)&lt;/strong&gt;: Subtracts the right operand from the left.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;9 - 1&lt;/code&gt; results in &lt;code&gt;8&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiplication (&lt;code&gt;*&lt;/code&gt;)&lt;/strong&gt;: Multiplies two numbers.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;5 * 4&lt;/code&gt; results in &lt;code&gt;20&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Division (&lt;code&gt;/&lt;/code&gt;)&lt;/strong&gt;: Divides the left operand by the right.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Important&lt;/strong&gt;: In Python 3.0, division (&lt;code&gt;/&lt;/code&gt;) always returns a &lt;strong&gt;float&lt;/strong&gt; (a number with a decimal point), even if the result is a whole number.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;7 / 3&lt;/code&gt; results in &lt;code&gt;2.333...&lt;/code&gt;. &lt;code&gt;84 / 2&lt;/code&gt; results in &lt;code&gt;42.0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floor Division (&lt;code&gt;//&lt;/code&gt;)&lt;/strong&gt;: Divides and &lt;strong&gt;rounds down&lt;/strong&gt; to the nearest whole integer. It specifically gives you only the &lt;strong&gt;integer part&lt;/strong&gt; of the division.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;7 // 3&lt;/code&gt; results in &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modulus (&lt;code&gt;%&lt;/code&gt;)&lt;/strong&gt;: Returns the &lt;strong&gt;remainder&lt;/strong&gt; of a division.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;7 % 3&lt;/code&gt; results in &lt;code&gt;1&lt;/code&gt; (because 7 divided by 3 is 2 with a remainder of 1).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exponentiation (&lt;code&gt;**&lt;/code&gt;)&lt;/strong&gt;: Raises the left operand to the power of the right operand.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;6 ** 2&lt;/code&gt; results in &lt;code&gt;36&lt;/code&gt; (6 squared).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Operator Overloading (Strings and Lists)&lt;/strong&gt; 💬📜
A fascinating aspect of operators in Python is that some of them can have different meanings depending on the &lt;strong&gt;data types&lt;/strong&gt; they are used with. This is called &lt;strong&gt;operator overloading&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;String Concatenation (&lt;code&gt;+&lt;/code&gt;)&lt;/strong&gt;: When &lt;code&gt;+&lt;/code&gt; is used with two strings, it joins them together (concatenates) to form a new string.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;&amp;quot;Hello&amp;quot; + &amp;quot;Python&amp;quot;&lt;/code&gt; results in &lt;code&gt;&amp;quot;HelloPython&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caution&lt;/strong&gt;: You cannot directly mix numbers and strings with &lt;code&gt;+&lt;/code&gt;. For instance, &lt;code&gt;&amp;quot;abc&amp;quot; + 9&lt;/code&gt; would cause an error. You&amp;rsquo;d need to convert the number to a string first, e.g., &lt;code&gt;&amp;quot;abc&amp;quot; + str(9)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String Repetition (&lt;code&gt;*&lt;/code&gt;)&lt;/strong&gt;: When &lt;code&gt;*&lt;/code&gt; is used with a string and an integer, it repeats the string that many times.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;&amp;quot;Spam&amp;quot; * 3&lt;/code&gt; results in &lt;code&gt;&amp;quot;SpamSpamSpam&amp;quot;&lt;/code&gt;. This is useful for tasks like printing a line of dashes: &lt;code&gt;print(&amp;quot;-&amp;quot; * 80)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List Concatenation and Repetition&lt;/strong&gt;: Similar to strings, &lt;code&gt;+&lt;/code&gt; concatenates lists, and &lt;code&gt;*&lt;/code&gt; repeats a list.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt; +&lt;/code&gt; results in ``.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;['Hi!'] * 4&lt;/code&gt; results in &lt;code&gt;['Hi!', 'Hi!', 'Hi!', 'Hi!']&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Operator Precedence 🚦&lt;span class="hx-absolute -hx-mt-20" id="2-operator-precedence-"&gt;&lt;/span&gt;
&lt;a href="#2-operator-precedence-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When an expression contains more than one operator, Python follows &lt;strong&gt;precedence rules&lt;/strong&gt; to determine the order of computation. This is similar to how you learned in mathematics (e.g., multiplication before addition).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Parentheses First&lt;/strong&gt; 🥇: Expressions inside parentheses &lt;code&gt;()&lt;/code&gt; are always evaluated first. This is a great way to force the order you want and also makes your code more readable.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;10 + 13 * 2&lt;/code&gt; results in &lt;code&gt;36&lt;/code&gt; (because &lt;code&gt;13 * 2&lt;/code&gt; is &lt;code&gt;26&lt;/code&gt;, then &lt;code&gt;10 + 26&lt;/code&gt; is &lt;code&gt;36&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;(10 + 13) * 2&lt;/code&gt; results in &lt;code&gt;46&lt;/code&gt; (because &lt;code&gt;10 + 13&lt;/code&gt; is &lt;code&gt;23&lt;/code&gt;, then &lt;code&gt;23 * 2&lt;/code&gt; is &lt;code&gt;46&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Common Order&lt;/strong&gt; (from highest to lowest precedence):
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; (Exponentiation)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; (Multiplication, Division, Floor Division, Modulus)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; (Addition, Subtraction)
&lt;em&gt;If operators have the same precedence, they are usually evaluated from &lt;strong&gt;left to right&lt;/strong&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Variables and Literals (Quick Recap) 📦✍️&lt;span class="hx-absolute -hx-mt-20" id="3-variables-and-literals-quick-recap-"&gt;&lt;/span&gt;
&lt;a href="#3-variables-and-literals-quick-recap-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Literals&lt;/strong&gt; are the &lt;strong&gt;actual values&lt;/strong&gt; themselves, such as &lt;code&gt;10&lt;/code&gt; (an integer literal) or &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; (a string literal).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt; are &lt;strong&gt;names&lt;/strong&gt; that refer to these values in the computer&amp;rsquo;s memory.&lt;/li&gt;
&lt;li&gt;A variable is &lt;strong&gt;created&lt;/strong&gt; the moment you first assign a value to it.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;my_age = 30&lt;/code&gt;. Here, &lt;code&gt;my_age&lt;/code&gt; is the variable, and &lt;code&gt;30&lt;/code&gt; is the integer literal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Literals can &lt;em&gt;only&lt;/em&gt; be used on the &lt;strong&gt;right side&lt;/strong&gt; of an assignment (&lt;code&gt;=&lt;/code&gt;). Variables can be used on either side.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Relational (Comparison) Operators and Chaining ⚖️✅❌&lt;span class="hx-absolute -hx-mt-20" id="4-relational-comparison-operators-and-chaining-"&gt;&lt;/span&gt;
&lt;a href="#4-relational-comparison-operators-and-chaining-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These operators compare values and always return a &lt;strong&gt;Boolean&lt;/strong&gt; value: either &lt;code&gt;True&lt;/code&gt; ✅ or &lt;code&gt;False&lt;/code&gt; ❌. Python&amp;rsquo;s &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are distinct Boolean values, though they behave like &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; respectively in numerical contexts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Greater than (&lt;code&gt;&amp;gt;&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less than (&lt;code&gt;&amp;lt;&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Greater than or equal to (&lt;code&gt;&amp;gt;=&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less than or equal to (&lt;code&gt;&amp;lt;=&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equal to (&lt;code&gt;==&lt;/code&gt;)&lt;/strong&gt;. &lt;strong&gt;Note the double equals sign&lt;/strong&gt;; a single &lt;code&gt;=&lt;/code&gt; is for assignment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not equal to (&lt;code&gt;!=&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Chaining Comparison Operators&lt;/strong&gt; 🔗
Python allows you to chain multiple comparisons in a single expression, which is a shorthand for more complex logical tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;1 &amp;lt; x &amp;lt; 10&lt;/code&gt; is read as &amp;ldquo;is 1 less than x, AND is x less than 10?&amp;rdquo;. If &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;1 &amp;lt; 5 &amp;lt; 10&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;This is equivalent to &lt;code&gt;(1 &amp;lt; x) and (x &amp;lt; 10)&lt;/code&gt; but is often clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What will be the output of &lt;code&gt;(15 % 4) ** 2&lt;/code&gt;? Explain the steps. 🔢&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;name = &amp;quot;Alice&amp;quot;&lt;/code&gt; and &lt;code&gt;age = &amp;quot;30&amp;quot;&lt;/code&gt;, what will &lt;code&gt;name + age&lt;/code&gt; produce? What about &lt;code&gt;name * 2&lt;/code&gt;? Why do they behave this way? 💬&lt;/li&gt;
&lt;li&gt;Given the expression &lt;code&gt;result = 10 - 2 * 3 + 1&lt;/code&gt;, what is the value of &lt;code&gt;result&lt;/code&gt;? How can you change the expression to make &lt;code&gt;result&lt;/code&gt; become &lt;code&gt;15&lt;/code&gt;? 🧐&lt;/li&gt;
&lt;li&gt;Predict the output of the following comparison chains:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5 == 5 &amp;gt; 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10 != 10 &amp;lt;= 12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True + 1&lt;/code&gt; (Hint from our conversation!) ✅➕🔢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers to Practice Questions 💡&lt;span class="hx-absolute -hx-mt-20" id="answers-to-practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#answers-to-practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;9&lt;/code&gt; 🔢
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;15 % 4&lt;/code&gt;: The modulus operator gives the remainder. 15 divided by 4 is 3 with a remainder of 3. So, &lt;code&gt;15 % 4&lt;/code&gt; evaluates to &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 ** 2&lt;/code&gt;: The exponentiation operator raises 3 to the power of 2 (3 squared). This results in &lt;code&gt;9&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name + age&lt;/code&gt; will produce &lt;code&gt;&amp;quot;Alice30&amp;quot;&lt;/code&gt; 💬.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: When the &lt;code&gt;+&lt;/code&gt; operator is used with strings, it performs &lt;strong&gt;concatenation&lt;/strong&gt; (joins the strings together).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name * 2&lt;/code&gt; will produce &lt;code&gt;&amp;quot;AliceAlice&amp;quot;&lt;/code&gt; 💬.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: When the &lt;code&gt;*&lt;/code&gt; operator is used with a string and an integer, it performs &lt;strong&gt;repetition&lt;/strong&gt; (repeats the string that many times).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output of &lt;code&gt;result = 10 - 2 * 3 + 1&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;5&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: Python follows operator precedence.
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;2 * 3&lt;/code&gt; is calculated first (Multiplication has higher precedence than Subtraction or Addition), which equals &lt;code&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The expression becomes &lt;code&gt;10 - 6 + 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then, operations of the same precedence (&lt;code&gt;-&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt;) are evaluated from left to right. &lt;code&gt;10 - 6&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, &lt;code&gt;4 + 1&lt;/code&gt; is &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To make &lt;code&gt;result&lt;/code&gt; become &lt;code&gt;15&lt;/code&gt;&lt;/strong&gt;: You can use &lt;strong&gt;parentheses&lt;/strong&gt; to override the default precedence.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;result = (10 - 2) * 3 + 1&lt;/code&gt; (This becomes &lt;code&gt;8 * 3 + 1 = 24 + 1 = 25&lt;/code&gt;, not 15).&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s try &lt;code&gt;result = 10 - (2 * 3) + 1&lt;/code&gt; (This is already &lt;code&gt;5&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;To get &lt;code&gt;15&lt;/code&gt;, we could do &lt;code&gt;result = (10 - 2 + 1) * 3 / (3/3)&lt;/code&gt; no wait&amp;hellip;&lt;/li&gt;
&lt;li&gt;A simpler way to get &lt;code&gt;15&lt;/code&gt; would be &lt;code&gt;result = (10 - 2) * (3 - 1) + 1&lt;/code&gt; -&amp;gt; &lt;code&gt;8 * 2 + 1 = 16 + 1 = 17&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s think of another &lt;code&gt;result = 10 + 2 * (3 + 1) - 3&lt;/code&gt; -&amp;gt; &lt;code&gt;10 + 2 * 4 - 3&lt;/code&gt; -&amp;gt; &lt;code&gt;10 + 8 - 3&lt;/code&gt; -&amp;gt; &lt;code&gt;18 - 3 = 15&lt;/code&gt;. This works!&lt;/li&gt;
&lt;li&gt;So, a possible modification is: &lt;code&gt;result = 10 + 2 * (3 + 1) - 3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output Predictions&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5 == 5 &amp;gt; 3&lt;/code&gt;: &lt;code&gt;True&lt;/code&gt; ✅
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: This is a chained comparison. It&amp;rsquo;s evaluated as &lt;code&gt;(5 == 5) and (5 &amp;gt; 3)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5 == 5&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5 &amp;gt; 3&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True and True&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10 != 10 &amp;lt;= 12&lt;/code&gt;: &lt;code&gt;False&lt;/code&gt; ❌
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: This is a chained comparison, evaluated as &lt;code&gt;(10 != 10) and (10 &amp;lt;= 12)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10 != 10&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10 &amp;lt;= 12&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False and True&lt;/code&gt; results in &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True + 1&lt;/code&gt;: &lt;code&gt;2&lt;/code&gt; 🔢
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: As discussed, &lt;code&gt;True&lt;/code&gt; is essentially &lt;code&gt;1&lt;/code&gt; in numerical contexts. So, &lt;code&gt;1 + 1&lt;/code&gt; equals &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Operators and Expressions 2</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.10/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.10/</guid><description>
&lt;p&gt;Alright, let&amp;rsquo;s dive into the &amp;ldquo;second level&amp;rdquo; of &lt;strong&gt;Operators and Expressions&lt;/strong&gt; in Python, building on our previous chat! 🚀&lt;/p&gt;
&lt;p&gt;In Python, an &lt;strong&gt;expression&lt;/strong&gt; is basically anything that computes a value, like &lt;code&gt;5 + 3&lt;/code&gt; or &lt;code&gt;&amp;quot;Hello&amp;quot; + &amp;quot;World&amp;quot;&lt;/code&gt;. &lt;strong&gt;Operators&lt;/strong&gt; are the special symbols that tell Python &lt;em&gt;how&lt;/em&gt; to perform these computations. We&amp;rsquo;ve already looked at the basics of arithmetic, but there&amp;rsquo;s a lot more to explore, especially when it comes to making decisions and handling different types of data!&lt;/p&gt;
&lt;h3&gt;1. More on Arithmetic Operators 🔢&lt;span class="hx-absolute -hx-mt-20" id="1-more-on-arithmetic-operators-"&gt;&lt;/span&gt;
&lt;a href="#1-more-on-arithmetic-operators-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While we covered the core arithmetic operators like addition (&lt;code&gt;+&lt;/code&gt;), subtraction (&lt;code&gt;-&lt;/code&gt;), multiplication (&lt;code&gt;*&lt;/code&gt;), and standard division (&lt;code&gt;/&lt;/code&gt;) last time, let&amp;rsquo;s clarify a couple more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Floor Division (&lt;code&gt;//&lt;/code&gt;)&lt;/strong&gt;: This operator performs division but then &lt;strong&gt;rounds the result down to the nearest whole integer&lt;/strong&gt;. It essentially gives you only the integer part of the quotient.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;7 // 3&lt;/code&gt; results in &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;9 // 2&lt;/code&gt; results in &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modulus (&lt;code&gt;%&lt;/code&gt;)&lt;/strong&gt;: This operator gives you the &lt;strong&gt;remainder&lt;/strong&gt; after a division. It&amp;rsquo;s super useful for checking if a number is even or odd (&lt;code&gt;number % 2 == 0&lt;/code&gt;) or for &amp;ldquo;wrapping around&amp;rdquo; numbers, like in time calculations.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;7 % 3&lt;/code&gt; results in &lt;code&gt;1&lt;/code&gt; (because 7 divided by 3 is 2 with a remainder of 1).&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;30 % 26&lt;/code&gt; results in &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exponentiation (&lt;code&gt;**&lt;/code&gt;)&lt;/strong&gt;: Just a reminder, this raises a number to a power.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;6 ** 2&lt;/code&gt; results in &lt;code&gt;36&lt;/code&gt; (6 squared).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Assignment Operators (Shorthand) ➡️&lt;span class="hx-absolute -hx-mt-20" id="2-assignment-operators-shorthand-"&gt;&lt;/span&gt;
&lt;a href="#2-assignment-operators-shorthand-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You know that the single equals sign (&lt;code&gt;=&lt;/code&gt;) is the &lt;strong&gt;assignment operator&lt;/strong&gt; – it gives a value to a variable. But Python offers some neat shorthands for common operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Augmented Assignment (&lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, etc.)&lt;/strong&gt;: These operators combine an arithmetic operation with an assignment.
&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;count = count + 1&lt;/code&gt;, you can simply write &lt;code&gt;count += 1&lt;/code&gt;. This reduces repetitive typing and can even be quicker for certain mutable objects.&lt;/li&gt;
&lt;li&gt;You can use these shorthand operators with all arithmetic operators. For example: &lt;code&gt;count -= 1&lt;/code&gt;, &lt;code&gt;count *= 2&lt;/code&gt;, &lt;code&gt;count /= 2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Assignment (Sequence Unpacking)&lt;/strong&gt;: You can assign multiple variables on a single line.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;x, y = 1, 2&lt;/code&gt; assigns &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This is very useful for swapping values without a temporary variable: &lt;code&gt;x, y = y, x&lt;/code&gt;. Python temporarily saves the original values on the right side before assigning them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Relational (Comparison) Operators ⚖️&lt;span class="hx-absolute -hx-mt-20" id="3-relational-comparison-operators-"&gt;&lt;/span&gt;
&lt;a href="#3-relational-comparison-operators-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These operators are used to &lt;strong&gt;compare two values&lt;/strong&gt; and always return a &lt;strong&gt;Boolean&lt;/strong&gt; result: either &lt;code&gt;True&lt;/code&gt; ✅ or &lt;code&gt;False&lt;/code&gt; ❌. &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are actual Boolean values, though they behave like the integers &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; respectively in numerical contexts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Equal to (&lt;code&gt;==&lt;/code&gt;)&lt;/strong&gt;: Checks if two values are the same. &lt;strong&gt;Remember: a single &lt;code&gt;=&lt;/code&gt; is for assignment, &lt;code&gt;==&lt;/code&gt; is for comparison!&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;5 == 5&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;5 == 50&lt;/code&gt; results in &lt;code&gt;False&lt;/code&gt; ❌.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not Equal to (&lt;code&gt;!=&lt;/code&gt;)&lt;/strong&gt;: Checks if two values are different.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;5 != 50&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Greater than (&lt;code&gt;&amp;gt;&lt;/code&gt;)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;10 &amp;gt; 5&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less than (&lt;code&gt;&amp;lt;&lt;/code&gt;)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;5 &amp;lt; 10&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Greater than or equal to (&lt;code&gt;&amp;gt;=&lt;/code&gt;)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;5 &amp;gt;= 5&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less than or equal to (&lt;code&gt;&amp;lt;=&lt;/code&gt;)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;5 &amp;lt;= 5&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Chaining Comparison Operators&lt;/strong&gt; 🔗
Python allows you to chain multiple comparisons in a single expression, which is a concise way to perform range tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt; x &amp;lt; 10&lt;/code&gt;: This checks if &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;10&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;5&lt;/code&gt;, this expression evaluates to &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s equivalent to writing &lt;code&gt;(1 &amp;lt; x) and (x &amp;lt; 10)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Logical Operators 🤔&lt;span class="hx-absolute -hx-mt-20" id="4-logical-operators-"&gt;&lt;/span&gt;
&lt;a href="#4-logical-operators-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These operators combine Boolean expressions to produce a single Boolean result. Python uses words for these operators, not symbols.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;and&lt;/code&gt;&lt;/strong&gt;: Returns &lt;code&gt;True&lt;/code&gt; if &lt;strong&gt;both&lt;/strong&gt; operands are true. Otherwise, it&amp;rsquo;s &lt;code&gt;False&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-circuiting&lt;/strong&gt;: Python evaluates from left to right and stops at the &lt;strong&gt;first false operand&lt;/strong&gt; it finds. If the left operand is &lt;code&gt;False&lt;/code&gt;, it returns that operand immediately without checking the right one. If both are &lt;code&gt;True&lt;/code&gt;, it returns the rightmost one.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;True and False&lt;/code&gt; results in &lt;code&gt;False&lt;/code&gt; ❌.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;2 and 3&lt;/code&gt; results in &lt;code&gt;3&lt;/code&gt; (because 2 is true, it proceeds to evaluate 3, which is also true, and returns the last true operand).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;or&lt;/code&gt;&lt;/strong&gt;: Returns &lt;code&gt;True&lt;/code&gt; if &lt;strong&gt;at least one&lt;/strong&gt; of the operands is true. Otherwise, it&amp;rsquo;s &lt;code&gt;False&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-circuiting&lt;/strong&gt;: Python evaluates from left to right and stops at the &lt;strong&gt;first true operand&lt;/strong&gt; it finds. If the left operand is &lt;code&gt;True&lt;/code&gt;, it returns that operand immediately.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;True or False&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[] or 3&lt;/code&gt; results in &lt;code&gt;3&lt;/code&gt; (because &lt;code&gt;[]&lt;/code&gt; (an empty list) is false, it proceeds to evaluate &lt;code&gt;3&lt;/code&gt;, which is true, and returns &lt;code&gt;3&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;not&lt;/code&gt;&lt;/strong&gt;: Inverts the Boolean value of its operand.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;not True&lt;/code&gt; results in &lt;code&gt;False&lt;/code&gt; ❌.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;not (5 &amp;gt; 10)&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅ (because &lt;code&gt;5 &amp;gt; 10&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, and &lt;code&gt;not False&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;). You can use &lt;code&gt;not&lt;/code&gt; with or without parentheses around the expression, &lt;code&gt;not false&lt;/code&gt; and &lt;code&gt;not (false)&lt;/code&gt; give the same result.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. Operator Precedence (The Order of Operations Revisited) 🚦&lt;span class="hx-absolute -hx-mt-20" id="5-operator-precedence-the-order-of-operations-revisited-"&gt;&lt;/span&gt;
&lt;a href="#5-operator-precedence-the-order-of-operations-revisited-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When you combine different types of operators in a single expression, Python follows a strict &lt;strong&gt;order of precedence&lt;/strong&gt; to decide which part to calculate first.&lt;/p&gt;
&lt;p&gt;The order (from highest to lowest precedence) is generally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Parentheses (&lt;code&gt;()&lt;/code&gt;)&lt;/strong&gt;: Always evaluated first. Use them to force the order you want or to make your code clearer.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10 + 13 * 2&lt;/code&gt; results in &lt;code&gt;36&lt;/code&gt; (multiplication first).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(10 + 13) * 2&lt;/code&gt; results in &lt;code&gt;46&lt;/code&gt; (parentheses first).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exponentiation (&lt;code&gt;**&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiplication, Division, Floor Division, Modulus (&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Addition, Subtraction (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison Operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;)&lt;/strong&gt;. These have lower precedence than arithmetic operators.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logical Operators (&lt;code&gt;not&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;)&lt;/strong&gt;. &lt;code&gt;not&lt;/code&gt; has highest precedence among logical operators, then &lt;code&gt;and&lt;/code&gt;, then &lt;code&gt;or&lt;/code&gt;. These have the lowest precedence overall.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If operators have the same precedence (e.g., &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;), they are generally evaluated from &lt;strong&gt;left to right&lt;/strong&gt;. If you&amp;rsquo;re ever unsure about the order, &lt;strong&gt;use parentheses&lt;/strong&gt;!&lt;/p&gt;
&lt;h3&gt;6. Operator Overloading (The &amp;ldquo;Magic&amp;rdquo; Behind the Scenes) 🎭&lt;span class="hx-absolute -hx-mt-20" id="6-operator-overloading-the-magic-behind-the-scenes-"&gt;&lt;/span&gt;
&lt;a href="#6-operator-overloading-the-magic-behind-the-scenes-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You might have noticed that some operators, like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, behave differently depending on the data type they&amp;rsquo;re used with. For example, &lt;code&gt;+&lt;/code&gt; adds numbers but concatenates strings and lists. This concept is called &lt;strong&gt;operator overloading&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python allows built-in operators to have different meanings based on the &lt;strong&gt;types of objects&lt;/strong&gt; they operate on.&lt;/li&gt;
&lt;li&gt;When you define your own &lt;strong&gt;classes&lt;/strong&gt; (which you&amp;rsquo;ll learn about later in Python), you can actually make &lt;em&gt;your own objects&lt;/em&gt; respond to these operators in custom ways. This is done by defining special methods in your class, like:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__add__&lt;/code&gt; for &lt;code&gt;+&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__mul__&lt;/code&gt; for &lt;code&gt;*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__eq__&lt;/code&gt; for &lt;code&gt;==&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; for how your objects print themselves.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt; for creating objects (the &amp;ldquo;constructor&amp;rdquo;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows custom objects to &amp;ldquo;look and feel&amp;rdquo; like built-in types, providing a consistent and natural interface.&lt;/p&gt;
&lt;h3&gt;7. Other Important Operators 💡&lt;span class="hx-absolute -hx-mt-20" id="7-other-important-operators-"&gt;&lt;/span&gt;
&lt;a href="#7-other-important-operators-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Membership Operator (&lt;code&gt;in&lt;/code&gt;)&lt;/strong&gt;: Checks if a value exists within a sequence (like a string, list, or tuple) or a collection (like a set or dictionary). It returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;&amp;quot;k&amp;quot; in &amp;quot;hacker&amp;quot;&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;&amp;quot;apple&amp;quot; in [&amp;quot;banana&amp;quot;, &amp;quot;orange&amp;quot;]&lt;/code&gt; results in &lt;code&gt;False&lt;/code&gt; ❌.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identity Operator (&lt;code&gt;is&lt;/code&gt;)&lt;/strong&gt;: Checks if two variables refer to the &lt;strong&gt;exact same object in memory&lt;/strong&gt;, not just if they have the same value.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;True is 1&lt;/code&gt; results in &lt;code&gt;False&lt;/code&gt; ❌, even though &lt;code&gt;True == 1&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;. This is because &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are different objects, even if they have equivalent values in a numerical context. Use &lt;code&gt;==&lt;/code&gt; for most equality checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What will be the result of &lt;code&gt;17 // 5&lt;/code&gt; and &lt;code&gt;17 % 5&lt;/code&gt;? How do these operators differ from regular division &lt;code&gt;/&lt;/code&gt;? 📏&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;x = 10&lt;/code&gt;, what will be the value of &lt;code&gt;x&lt;/code&gt; after &lt;code&gt;x **= 2&lt;/code&gt;? What does the &lt;code&gt;**=&lt;/code&gt; operator do? 💥&lt;/li&gt;
&lt;li&gt;Evaluate the following expressions and explain your reasoning, paying attention to precedence and short-circuiting:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;result = 5 * 2 + 10 / 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output = True and (10 &amp;lt; 5 or 20 &amp;gt;= 20)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid = 10 &amp;gt; 5 == 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;my_list =&lt;/code&gt; and &lt;code&gt;item = 20&lt;/code&gt;, what will &lt;code&gt;item in my_list&lt;/code&gt; return? What about &lt;code&gt;item is 20&lt;/code&gt;? Explain the difference. 🤔&lt;/li&gt;
&lt;li&gt;You want to ensure a user&amp;rsquo;s &lt;code&gt;age&lt;/code&gt; is between 18 (inclusive) and 65 (exclusive). Write a single expression using chained comparison operators to check this. If &lt;code&gt;age = 45&lt;/code&gt;, what would the result be? 🧑‍🤝‍🧑&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers to Practice Questions 💡&lt;span class="hx-absolute -hx-mt-20" id="answers-to-practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#answers-to-practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;17 // 5&lt;/code&gt; results in &lt;code&gt;3&lt;/code&gt;&lt;/strong&gt;. The floor division operator (&lt;code&gt;//&lt;/code&gt;) performs division and then rounds the result down to the nearest whole integer.
&lt;strong&gt;&lt;code&gt;17 % 5&lt;/code&gt; results in &lt;code&gt;2&lt;/code&gt;&lt;/strong&gt;. The modulus operator (&lt;code&gt;%&lt;/code&gt;) returns the remainder of the division.
&lt;strong&gt;Difference from &lt;code&gt;/&lt;/code&gt;&lt;/strong&gt;: Regular division (&lt;code&gt;/&lt;/code&gt;) in Python 3.0 always returns a floating-point number (e.g., &lt;code&gt;17 / 5&lt;/code&gt; would be &lt;code&gt;3.4&lt;/code&gt;), preserving any fractional part. Floor division and modulus extract specific integer-related parts of the division.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;x&lt;/code&gt; will be &lt;code&gt;100&lt;/code&gt;. The &lt;code&gt;**=&lt;/code&gt; operator is an &lt;strong&gt;augmented assignment&lt;/strong&gt; operator for exponentiation. It is shorthand for &lt;code&gt;x = x ** 2&lt;/code&gt;. So, &lt;code&gt;10&lt;/code&gt; raised to the power of &lt;code&gt;2&lt;/code&gt; is &lt;code&gt;100&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;result = 5 * 2 + 10 / 2&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1 (Multiplication and Division)&lt;/strong&gt;: &lt;code&gt;5 * 2&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;. &lt;code&gt;10 / 2&lt;/code&gt; is &lt;code&gt;5.0&lt;/code&gt; (standard division returns a float).&lt;/li&gt;
&lt;li&gt;The expression becomes &lt;code&gt;10 + 5.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2 (Addition)&lt;/strong&gt;: &lt;code&gt;10 + 5.0&lt;/code&gt; is &lt;code&gt;15.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;15.0&lt;/code&gt;
&lt;strong&gt;&lt;code&gt;output = True and (10 &amp;lt; 5 or 20 &amp;gt;= 20)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1 (Innermost Parentheses - Comparison &lt;code&gt;10 &amp;lt; 5&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;10 &amp;lt; 5&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; ❌.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2 (Innermost Parentheses - Comparison &lt;code&gt;20 &amp;gt;= 20&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;20 &amp;gt;= 20&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;The expression becomes &lt;code&gt;True and (False or True)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3 (Parentheses - Logical &lt;code&gt;False or True&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;False or True&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; (because &lt;code&gt;or&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if at least one operand is &lt;code&gt;True&lt;/code&gt; and short-circuits if the left is &lt;code&gt;True&lt;/code&gt;, but here it evaluates the right as left is &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The expression becomes &lt;code&gt;True and True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4 (Logical &lt;code&gt;True and True&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;True and True&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;True&lt;/code&gt;
&lt;strong&gt;&lt;code&gt;is_valid = 10 &amp;gt; 5 == 5&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1 (Chained Comparison)&lt;/strong&gt;: This is evaluated as &lt;code&gt;(10 &amp;gt; 5) and (5 == 5)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2 (First Comparison &lt;code&gt;10 &amp;gt; 5&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;10 &amp;gt; 5&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3 (Second Comparison &lt;code&gt;5 == 5&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;5 == 5&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; ✅.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4 (Logical &lt;code&gt;True and True&lt;/code&gt;)&lt;/strong&gt;: &lt;code&gt;True and True&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;item in my_list&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; ✅&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: The &lt;code&gt;in&lt;/code&gt; operator checks for &lt;strong&gt;membership&lt;/strong&gt; – if the value of &lt;code&gt;item&lt;/code&gt; (&lt;code&gt;20&lt;/code&gt;) exists within the &lt;code&gt;my_list&lt;/code&gt;. Since &lt;code&gt;20&lt;/code&gt; is in the list, it&amp;rsquo;s &lt;code&gt;True&lt;/code&gt;.
&lt;strong&gt;&lt;code&gt;item is 20&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; ✅&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: The &lt;code&gt;is&lt;/code&gt; operator checks for &lt;strong&gt;identity&lt;/strong&gt; – if &lt;code&gt;item&lt;/code&gt; and the literal &lt;code&gt;20&lt;/code&gt; refer to the exact same object in memory. For small integers (usually -5 to 256) and some other common literals, Python often &amp;ldquo;interns&amp;rdquo; them, meaning it creates only one object in memory, so &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt; would indeed refer to the same object [158, this is an additional insight not explicitly sourced but related to &lt;code&gt;True is 1&lt;/code&gt; example].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difference&lt;/strong&gt;: &lt;code&gt;in&lt;/code&gt; checks if a value is present within a collection. &lt;code&gt;is&lt;/code&gt; checks if two variables or values point to the identical object in memory. While &lt;code&gt;item is 20&lt;/code&gt; might be &lt;code&gt;True&lt;/code&gt; for small integers due to Python&amp;rsquo;s internal optimizations, it&amp;rsquo;s safer and generally correct to use &lt;code&gt;==&lt;/code&gt; (&lt;code&gt;item == 20&lt;/code&gt;) for value equality checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expression&lt;/strong&gt;: &lt;code&gt;18 &amp;lt;= age &amp;lt; 65&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: This uses chained comparison operators. It checks if &lt;code&gt;age&lt;/code&gt; is greater than or equal to &lt;code&gt;18&lt;/code&gt; AND simultaneously less than &lt;code&gt;65&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;age = 45&lt;/code&gt;: &lt;code&gt;18 &amp;lt;= 45 &amp;lt; 65&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; ✅ (because &lt;code&gt;18 &amp;lt;= 45&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;45 &amp;lt; 65&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;True and True&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Introduction to Strings</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.11/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.11/</guid><description>
&lt;p&gt;Here&amp;rsquo;s an introduction to strings in Python, designed to be easy to understand! 🥳&lt;/p&gt;
&lt;h3&gt;What are Strings?&lt;span class="hx-absolute -hx-mt-20" id="what-are-strings"&gt;&lt;/span&gt;
&lt;a href="#what-are-strings" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In Python, &lt;strong&gt;strings are used to store and represent textual information&lt;/strong&gt; 📝. Think of them as a sequence (an ordered collection) of characters. Just like a list of items has an order, characters in a string maintain a left-to-right order.&lt;/p&gt;
&lt;p&gt;For example, your name, a sentence, or even the content of a text file loaded into memory are all examples of strings. Python does not have a separate type for individual characters; instead, it treats single characters as one-character strings.&lt;/p&gt;
&lt;h3&gt;How to Create Strings 🛠️&lt;span class="hx-absolute -hx-mt-20" id="how-to-create-strings-"&gt;&lt;/span&gt;
&lt;a href="#how-to-create-strings-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can create strings in Python in several straightforward ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single Quotes&lt;/strong&gt;: You can enclose characters in single quotes, like &lt;code&gt;'Hello Python!'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Double Quotes&lt;/strong&gt;: Double quotes work exactly the same way: &lt;code&gt;&amp;quot;Hello Python!&amp;quot;&lt;/code&gt;. Most people use single quotes unless an apostrophe appears within the string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Triple Quotes&lt;/strong&gt;: For &lt;strong&gt;multi-line strings&lt;/strong&gt; (strings that span across several lines) or for documentation strings (docstrings), you can use three consecutive single or double quotes, like &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;This is a multi-line string.&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;. This is useful for embedding things like HTML or XML code directly in your Python script.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic String Operations ✨&lt;span class="hx-absolute -hx-mt-20" id="basic-string-operations-"&gt;&lt;/span&gt;
&lt;a href="#basic-string-operations-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python provides simple operators for common string tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concatenation (&lt;code&gt;+&lt;/code&gt;)&lt;/strong&gt;: You can join two or more strings together using the &lt;code&gt;+&lt;/code&gt; operator. This creates a &lt;strong&gt;new string&lt;/strong&gt; object by placing one string next to the other.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Hello&amp;quot; + &amp;quot;World&amp;quot;&lt;/code&gt; would give &lt;code&gt;&amp;quot;HelloWorld&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Important Note&lt;/strong&gt;: You cannot mix numbers and strings directly with &lt;code&gt;+&lt;/code&gt;. If you try &lt;code&gt;&amp;quot;abc&amp;quot; + 9&lt;/code&gt;, it will result in an error. You need to convert the number to a string first, like &lt;code&gt;&amp;quot;abc&amp;quot; + str(9)&lt;/code&gt; which would give &lt;code&gt;&amp;quot;abc9&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repetition (&lt;code&gt;*&lt;/code&gt;)&lt;/strong&gt;: You can repeat a string a certain number of times using the &lt;code&gt;*&lt;/code&gt; operator.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Spam!&amp;quot; * 3&lt;/code&gt; would result in &lt;code&gt;&amp;quot;Spam!Spam!Spam!&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This can be surprisingly handy, for example, to print a line of 80 dashes, you can simply use &lt;code&gt;'-' * 80&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length (&lt;code&gt;len()&lt;/code&gt;)&lt;/strong&gt;: The built-in &lt;code&gt;len()&lt;/code&gt; function returns the number of characters in a string.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(&amp;quot;Python&amp;quot;)&lt;/code&gt; would return &lt;code&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Accessing Characters (Indexing) 🎯&lt;span class="hx-absolute -hx-mt-20" id="accessing-characters-indexing-"&gt;&lt;/span&gt;
&lt;a href="#accessing-characters-indexing-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Strings are ordered, so you can access individual characters by their position, known as their &lt;strong&gt;index&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Positive Indexing&lt;/strong&gt;: Indices start from &lt;code&gt;0&lt;/code&gt; for the first character.
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;S = &amp;quot;Python&amp;quot;&lt;/code&gt;, then &lt;code&gt;S&lt;/code&gt; would give &lt;code&gt;'P'&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt; would give &lt;code&gt;'y'&lt;/code&gt;, and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Negative Indexing&lt;/strong&gt;: You can also use negative indices to count from the end of the string.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S[-1]&lt;/code&gt; would give &lt;code&gt;'n'&lt;/code&gt; (the last character), &lt;code&gt;S[-2]&lt;/code&gt; would give &lt;code&gt;'o'&lt;/code&gt; (the second to last).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Out of Range Error&lt;/strong&gt;: If you try to access an index that doesn&amp;rsquo;t exist (e.g., &lt;code&gt;S&lt;/code&gt; for a short string), Python will throw an &lt;code&gt;IndexError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Extracting Parts of Strings (Slicing) ✂️&lt;span class="hx-absolute -hx-mt-20" id="extracting-parts-of-strings-slicing-"&gt;&lt;/span&gt;
&lt;a href="#extracting-parts-of-strings-slicing-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Slicing&lt;/strong&gt; allows you to extract a &lt;strong&gt;segment or a portion of a string&lt;/strong&gt;. It uses a similar bracket notation but with two indices separated by a colon: &lt;code&gt;[start:end]&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The slice includes characters from the &lt;code&gt;start&lt;/code&gt; index &lt;strong&gt;up to, but not including&lt;/strong&gt;, the &lt;code&gt;end&lt;/code&gt; index.&lt;/li&gt;
&lt;li&gt;If you omit the &lt;code&gt;start&lt;/code&gt; index, it defaults to &lt;code&gt;0&lt;/code&gt; (the beginning of the string).&lt;/li&gt;
&lt;li&gt;If you omit the &lt;code&gt;end&lt;/code&gt; index, it defaults to the length of the string (the end of the string).
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;S = &amp;quot;Sudarshan&amp;quot;&lt;/code&gt;, then &lt;code&gt;S[0:5]&lt;/code&gt; would give &lt;code&gt;&amp;quot;Sudar&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[3:]&lt;/code&gt; would give &lt;code&gt;&amp;quot;arshan&amp;quot;&lt;/code&gt; (from index 3 to the end).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[:5]&lt;/code&gt; would give &lt;code&gt;&amp;quot;Sudar&amp;quot;&lt;/code&gt; (from the beginning up to index 5).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[:]&lt;/code&gt; effectively creates a copy of the entire string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Third Index (Step Size)&lt;/strong&gt;: You can also include a third index to specify a &amp;ldquo;step size&amp;rdquo;. For example, &lt;code&gt;S[::2]&lt;/code&gt; would give every other character. &lt;code&gt;S[::-1]&lt;/code&gt; is a common trick to reverse a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Strings are Immutable 🧱&lt;span class="hx-absolute -hx-mt-20" id="strings-are-immutable-"&gt;&lt;/span&gt;
&lt;a href="#strings-are-immutable-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One fundamental property of strings in Python is that they are &lt;strong&gt;immutable&lt;/strong&gt;. This means &lt;strong&gt;you cannot change an existing string directly&lt;/strong&gt; once it has been created.&lt;/p&gt;
&lt;p&gt;If you try to change a character using indexing, like &lt;code&gt;S = 'X'&lt;/code&gt;, you will get a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead, to &amp;ldquo;change&amp;rdquo; a string, you create a &lt;strong&gt;new string&lt;/strong&gt; based on the original, using operations like concatenation or slicing, and then you can assign this new string back to a variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, to change &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;Jello&amp;quot;&lt;/code&gt;, you would do &lt;code&gt;'J' + &amp;quot;Hello&amp;quot;[1:]&lt;/code&gt;, which creates &lt;code&gt;&amp;quot;Jello&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Useful String Methods 🛠️ (Advanced but powerful!)&lt;span class="hx-absolute -hx-mt-20" id="useful-string-methods--advanced-but-powerful"&gt;&lt;/span&gt;
&lt;a href="#useful-string-methods--advanced-but-powerful" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python strings come with a powerful set of &lt;strong&gt;built-in methods&lt;/strong&gt; (functions that belong to the string object) that perform common text-processing tasks. Here are a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.upper()&lt;/code&gt;: Converts all characters in the string to uppercase.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;hello&amp;quot;.upper()&lt;/code&gt; returns &lt;code&gt;&amp;quot;HELLO&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.lower()&lt;/code&gt;: Converts all characters in the string to lowercase.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;WORLD&amp;quot;.lower()&lt;/code&gt; returns &lt;code&gt;&amp;quot;world&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.find(substring)&lt;/code&gt;: Returns the &lt;strong&gt;lowest index&lt;/strong&gt; where the substring is found, or &lt;code&gt;-1&lt;/code&gt; if not found.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;banana&amp;quot;.find(&amp;quot;na&amp;quot;)&lt;/code&gt; returns &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.replace(old, new)&lt;/code&gt;: Returns a &lt;strong&gt;new string&lt;/strong&gt; where all occurrences of &lt;code&gt;old&lt;/code&gt; are replaced with &lt;code&gt;new&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;apple&amp;quot;.replace(&amp;quot;p&amp;quot;, &amp;quot;x&amp;quot;)&lt;/code&gt; returns &lt;code&gt;&amp;quot;axxle&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.startswith(prefix)&lt;/code&gt; / &lt;code&gt;.endswith(suffix)&lt;/code&gt;: Checks if the string starts or ends with a specified prefix/suffix, returning &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.strip()&lt;/code&gt;: Removes leading and trailing whitespace characters (or specified characters) from the string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Formatted Printing (f-strings) 🎨&lt;span class="hx-absolute -hx-mt-20" id="formatted-printing-f-strings-"&gt;&lt;/span&gt;
&lt;a href="#formatted-printing-f-strings-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python offers powerful ways to create strings dynamically by embedding variables or expressions directly into them. One of the most convenient ways in modern Python is using &lt;strong&gt;f-strings&lt;/strong&gt; (formatted string literals).&lt;/p&gt;
&lt;p&gt;You prefix the string literal with &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; and put expressions inside curly braces &lt;code&gt;{}&lt;/code&gt; within the string:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name = &amp;quot;Alice&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;age = 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(f&amp;quot;Hello, {name}! You are {age} years old. 🎉&amp;quot;)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Output: &lt;code&gt;Hello, Alice! You are 30 years old. 🎉&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also use the &lt;code&gt;.format()&lt;/code&gt; method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Hello, {}! You are {} years old.&amp;quot;.format(&amp;quot;Alice&amp;quot;, 30)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;String Basics&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;What would be the output of &lt;code&gt;print(&amp;quot;Python&amp;quot; + &amp;quot; is &amp;quot; * 2 + &amp;quot;fun!&amp;quot;)&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What is the length of the string &lt;code&gt;&amp;quot;Hello\tWorld&amp;quot;&lt;/code&gt;? (Remember &lt;code&gt;\t&lt;/code&gt; is a single tab character).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing and Slicing&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Given &lt;code&gt;text = &amp;quot;Programming&amp;quot;&lt;/code&gt;, what character does &lt;code&gt;text&lt;/code&gt; represent?&lt;/li&gt;
&lt;li&gt;What substring would &lt;code&gt;text[-5:-2]&lt;/code&gt; extract?&lt;/li&gt;
&lt;li&gt;How would you get the string &lt;code&gt;&amp;quot;gnimmargorP&amp;quot;&lt;/code&gt; from &lt;code&gt;text&lt;/code&gt; using slicing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutability and Methods&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;word = &amp;quot;example&amp;quot;&lt;/code&gt;, can you change it to &lt;code&gt;&amp;quot;axample&amp;quot;&lt;/code&gt; by doing &lt;code&gt;word = 'a'&lt;/code&gt;? If not, how would you achieve this result by creating a new string?&lt;/li&gt;
&lt;li&gt;How would you check if the string &lt;code&gt;&amp;quot;apple&amp;quot;&lt;/code&gt; contains the substring &lt;code&gt;&amp;quot;ple&amp;quot;&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers to Practice Questions ✅&lt;span class="hx-absolute -hx-mt-20" id="answers-to-practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#answers-to-practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;String Basics&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Output: &lt;code&gt;&amp;quot;Python is is fun!&amp;quot;&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot; is &amp;quot; * 2&lt;/code&gt; becomes &lt;code&gt;&amp;quot; is is &amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;&amp;quot;Python&amp;quot; + &amp;quot; is is &amp;quot; + &amp;quot;fun!&amp;quot;&lt;/code&gt; concatenates to the final result.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Length: &lt;code&gt;len(&amp;quot;Hello\tWorld&amp;quot;)&lt;/code&gt; is &lt;strong&gt;11&lt;/strong&gt;. The tab character &lt;code&gt;\t&lt;/code&gt; counts as a single character.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing and Slicing&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; represents the character &lt;strong&gt;&lt;code&gt;'r'&lt;/code&gt;&lt;/strong&gt; (P-0, r-1, o-2, g-3, r-4).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text[-5:-2]&lt;/code&gt; would extract &lt;strong&gt;&lt;code&gt;&amp;quot;mmi&amp;quot;&lt;/code&gt;&lt;/strong&gt;. Negative indices count from the end:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P r o g r a m m i n g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 1 2 3 4 5 6 7 8 9 10&lt;/code&gt; (Positive indices)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1&lt;/code&gt; (Negative indices)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-5&lt;/code&gt; is &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;-4&lt;/code&gt; is &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;-3&lt;/code&gt; is &lt;code&gt;i&lt;/code&gt;. Slicing stops &lt;em&gt;before&lt;/em&gt; the end index, so &lt;code&gt;-2&lt;/code&gt; (&lt;code&gt;n&lt;/code&gt;) is excluded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To get &lt;code&gt;&amp;quot;gnimmargorP&amp;quot;&lt;/code&gt;: &lt;code&gt;text[::-1]&lt;/code&gt;. This uses a step of &lt;code&gt;-1&lt;/code&gt; to reverse the string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutability and Methods&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;No, you &lt;strong&gt;cannot&lt;/strong&gt; change &lt;code&gt;word = 'a'&lt;/code&gt; directly because strings are &lt;strong&gt;immutable&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;You can achieve the result &lt;code&gt;&amp;quot;axample&amp;quot;&lt;/code&gt; by creating a new string: &lt;code&gt;new_word = 'a' + word[1:]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You would check if the string &lt;code&gt;&amp;quot;apple&amp;quot;&lt;/code&gt; contains &lt;code&gt;&amp;quot;ple&amp;quot;&lt;/code&gt; using the &lt;code&gt;in&lt;/code&gt; operator: &lt;code&gt;'ple' in 'apple'&lt;/code&gt; which would return &lt;code&gt;True&lt;/code&gt;. Alternatively, you could use the &lt;code&gt;find()&lt;/code&gt; method: &lt;code&gt;'apple'.find('ple') != -1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy coding! 🎉&lt;/p&gt;</description></item><item><title>More on Strings</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.12/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.12/</guid><description>
&lt;p&gt;Building on our previous chat, let&amp;rsquo;s dive deeper into strings! 🥳&lt;/p&gt;
&lt;h3&gt;What are Strings? A Quick Recap!&lt;span class="hx-absolute -hx-mt-20" id="what-are-strings-a-quick-recap"&gt;&lt;/span&gt;
&lt;a href="#what-are-strings-a-quick-recap" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As we discussed, &lt;strong&gt;strings are Python&amp;rsquo;s way of handling text&lt;/strong&gt; 📝. Imagine them as an ordered line of characters – like letters, numbers, or symbols. They are fundamental for anything involving words or sentences. Python doesn&amp;rsquo;t have a separate type for individual characters; instead, a single character is simply a string of length one.&lt;/p&gt;
&lt;h3&gt;How to Create Strings (and more ways!) 🛠️&lt;span class="hx-absolute -hx-mt-20" id="how-to-create-strings-and-more-ways-"&gt;&lt;/span&gt;
&lt;a href="#how-to-create-strings-and-more-ways-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You already know about single and double quotes, like &lt;code&gt;'hello'&lt;/code&gt; or &lt;code&gt;&amp;quot;world&amp;quot;&lt;/code&gt;. Python considers these identical.&lt;/p&gt;
&lt;p&gt;Here are some more advanced ways and details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Triple Quotes (&lt;code&gt;'''&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;)&lt;/strong&gt;: These are super useful for strings that need to span multiple lines. Python collects all the text, including newlines, into a single string. They&amp;rsquo;re also often used for &lt;strong&gt;documentation strings (docstrings)&lt;/strong&gt;, which explain what your code does.
&lt;ul&gt;
&lt;li&gt;Example:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;multi_line_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&amp;#34;This is a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;that spans
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;multiple lines!&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multi_line_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escape Characters (&lt;code&gt;\&lt;/code&gt;)&lt;/strong&gt;: Sometimes you need to include special characters that Python might otherwise interpret differently. Escape characters, like &lt;code&gt;\n&lt;/code&gt; for a newline or &lt;code&gt;\t&lt;/code&gt; for a tab, allow you to do this. If you want to include a quote character within a string that&amp;rsquo;s defined with the same type of quote, you&amp;rsquo;d escape it (e.g., &lt;code&gt;'It\'s a beautiful day'&lt;/code&gt;).
&lt;ul&gt;
&lt;li&gt;Example:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;special_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Hello&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s2"&gt;World!&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# \n is newline, \t is tab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;special_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raw Strings (&lt;code&gt;r&amp;quot;...&amp;quot;&lt;/code&gt;)&lt;/strong&gt;: If your string contains many backslashes that you don&amp;rsquo;t want Python to interpret as escape characters (e.g., file paths on Windows), you can use a raw string by putting an &lt;code&gt;r&lt;/code&gt; before the opening quote.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;path = r&amp;quot;C:\new\folder\file.txt&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic String Operations (Revisited) ✨&lt;span class="hx-absolute -hx-mt-20" id="basic-string-operations-revisited-"&gt;&lt;/span&gt;
&lt;a href="#basic-string-operations-revisited-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concatenation (&lt;code&gt;+&lt;/code&gt;)&lt;/strong&gt;: This joins two or more strings together to form a brand &lt;strong&gt;new string&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Crucial Note&lt;/strong&gt;: Python &lt;strong&gt;does not allow&lt;/strong&gt; you to mix numbers and strings directly with &lt;code&gt;+&lt;/code&gt;. If you want to combine a number with a string, you must first convert the number to a string using &lt;code&gt;str()&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Age: &amp;quot; + str(30)&lt;/code&gt; would result in &lt;code&gt;&amp;quot;Age: 30&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repetition (&lt;code&gt;*&lt;/code&gt;)&lt;/strong&gt;: This creates a &lt;strong&gt;new string&lt;/strong&gt; by repeating the original string a specified number of times.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Go! &amp;quot; * 3&lt;/code&gt; gives &lt;code&gt;&amp;quot;Go! Go! Go! &amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length (&lt;code&gt;len()&lt;/code&gt;)&lt;/strong&gt;: The &lt;code&gt;len()&lt;/code&gt; function tells you how many characters are in a string.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(&amp;quot;Python&amp;quot;)&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Membership (&lt;code&gt;in&lt;/code&gt;)&lt;/strong&gt;: You can check if a character or a substring exists within a string using the &lt;code&gt;in&lt;/code&gt; operator, which returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'p' in 'apple'&lt;/code&gt; would be &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Accessing Characters (Indexing) 🎯&lt;span class="hx-absolute -hx-mt-20" id="accessing-characters-indexing-"&gt;&lt;/span&gt;
&lt;a href="#accessing-characters-indexing-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Strings are ordered collections, so each character has a specific position, or &lt;strong&gt;index&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Positive Indexing&lt;/strong&gt;: Starts from &lt;code&gt;0&lt;/code&gt; for the very first character.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S = &amp;quot;Coffee&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; is &lt;code&gt;'C'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; is &lt;code&gt;'f'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Negative Indexing&lt;/strong&gt;: Starts from &lt;code&gt;-1&lt;/code&gt; for the &lt;em&gt;last&lt;/em&gt; character, then &lt;code&gt;-2&lt;/code&gt; for the second to last, and so on. This is handy when you want to access characters from the end without knowing the string&amp;rsquo;s exact length.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S[-1]&lt;/code&gt; is &lt;code&gt;'e'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[-2]&lt;/code&gt; is &lt;code&gt;'e'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accessing an index that doesn&amp;rsquo;t exist will cause an &lt;code&gt;IndexError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Extracting Parts of Strings (Slicing) ✂️&lt;span class="hx-absolute -hx-mt-20" id="extracting-parts-of-strings-slicing-"&gt;&lt;/span&gt;
&lt;a href="#extracting-parts-of-strings-slicing-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Slicing&lt;/strong&gt; lets you grab a part of a string, called a &lt;strong&gt;substring&lt;/strong&gt;, by specifying a &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; index &lt;code&gt;[start:end]&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The slice includes characters from &lt;code&gt;start&lt;/code&gt; &lt;strong&gt;up to, but not including&lt;/strong&gt;, &lt;code&gt;end&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;start&lt;/code&gt; is omitted, it defaults to &lt;code&gt;0&lt;/code&gt; (the beginning).&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;end&lt;/code&gt; is omitted, it defaults to the end of the string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S = &amp;quot;Programming&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S[0:4]&lt;/code&gt; gives &lt;code&gt;&amp;quot;Prog&amp;quot;&lt;/code&gt; (characters at index 0, 1, 2, 3).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[7:]&lt;/code&gt; gives &lt;code&gt;&amp;quot;ming&amp;quot;&lt;/code&gt; (from index 7 to the end).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[:3]&lt;/code&gt; gives &lt;code&gt;&amp;quot;Pro&amp;quot;&lt;/code&gt; (from the beginning up to index 3).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[:]&lt;/code&gt; creates a copy of the entire string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step Size (&lt;code&gt;[start:end:step]&lt;/code&gt;)&lt;/strong&gt;: You can add a third number, the &lt;code&gt;step&lt;/code&gt;, to skip characters.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S[::2]&lt;/code&gt; would take every second character (&lt;code&gt;&amp;quot;Pormig&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S[::-1]&lt;/code&gt; is a common trick to &lt;strong&gt;reverse a string&lt;/strong&gt; (&lt;code&gt;&amp;quot;gnimmargorP&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Strings are Immutable 🧱&lt;span class="hx-absolute -hx-mt-20" id="strings-are-immutable-"&gt;&lt;/span&gt;
&lt;a href="#strings-are-immutable-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is a &lt;strong&gt;key concept&lt;/strong&gt;: strings in Python are &lt;strong&gt;immutable&lt;/strong&gt;. Once a string is created, &lt;strong&gt;you cannot change its characters directly&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you try &lt;code&gt;my_string = 'J'&lt;/code&gt;, Python will raise a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead, any operation that seems to &amp;ldquo;change&amp;rdquo; a string (like concatenation or methods like &lt;code&gt;replace()&lt;/code&gt;) actually creates a &lt;strong&gt;brand new string&lt;/strong&gt;. You then typically assign this new string back to a variable if you want to use the &amp;ldquo;changed&amp;rdquo; version.
&lt;ul&gt;
&lt;li&gt;To change &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;Jello&amp;quot;&lt;/code&gt;, you&amp;rsquo;d do &lt;code&gt;'J' + &amp;quot;Hello&amp;quot;[1:]&lt;/code&gt; to create a new string &lt;code&gt;&amp;quot;Jello&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Useful String Methods 🛠️ (The power tools!)&lt;span class="hx-absolute -hx-mt-20" id="useful-string-methods--the-power-tools"&gt;&lt;/span&gt;
&lt;a href="#useful-string-methods--the-power-tools" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python&amp;rsquo;s strings come with many built-in &lt;strong&gt;methods&lt;/strong&gt; (functions that perform actions on the string itself). These methods return &lt;strong&gt;new strings&lt;/strong&gt; with the desired modifications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.upper()&lt;/code&gt; / &lt;code&gt;.lower()&lt;/code&gt;: Convert all characters to uppercase or lowercase.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Hello&amp;quot;.upper()&lt;/code&gt; returns &lt;code&gt;&amp;quot;HELLO&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.find(substring)&lt;/code&gt;: Returns the lowest index of the first occurrence of the &lt;code&gt;substring&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; if not found.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;banana&amp;quot;.find(&amp;quot;an&amp;quot;)&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.replace(old, new)&lt;/code&gt;: Returns a new string with all occurrences of &lt;code&gt;old&lt;/code&gt; replaced by &lt;code&gt;new&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;apple&amp;quot;.replace(&amp;quot;p&amp;quot;, &amp;quot;x&amp;quot;)&lt;/code&gt; returns &lt;code&gt;&amp;quot;axxle&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.split(delimiter)&lt;/code&gt;: Splits the string into a &lt;code&gt;list&lt;/code&gt; of substrings based on a &lt;code&gt;delimiter&lt;/code&gt; (e.g., a space or comma).
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;one,two,three&amp;quot;.split(',')&lt;/code&gt; returns &lt;code&gt;['one', 'two', 'three']&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.join(iterable)&lt;/code&gt;: This is the reverse of &lt;code&gt;split()&lt;/code&gt;. It concatenates elements of an iterable (like a list) into a single string, using the string the method is called on as the separator.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;-&amp;quot;.join([&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;])&lt;/code&gt; returns &lt;code&gt;&amp;quot;apple-banana-cherry&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.strip()&lt;/code&gt;: Removes leading and trailing whitespace (or other specified characters).
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot; Hello World &amp;quot;.strip()&lt;/code&gt; returns &lt;code&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.startswith(prefix)&lt;/code&gt; / &lt;code&gt;.endswith(suffix)&lt;/code&gt;: Checks if the string begins or ends with a specific &lt;code&gt;prefix&lt;/code&gt; or &lt;code&gt;suffix&lt;/code&gt;, returning &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How to find more methods?&lt;/strong&gt; 🤔 You can use the built-in &lt;code&gt;dir()&lt;/code&gt; and &lt;code&gt;help()&lt;/code&gt; functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir(&amp;quot;&amp;quot;)&lt;/code&gt; will list all available methods and attributes for string objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help(&amp;quot;&amp;quot;.method_name)&lt;/code&gt; (e.g., &lt;code&gt;help(&amp;quot;&amp;quot;.replace)&lt;/code&gt;) will give you a detailed description of what that specific method does, including its arguments and what it returns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Formatted Printing (f-strings &amp;amp; &lt;code&gt;.format()&lt;/code&gt;) 🎨&lt;span class="hx-absolute -hx-mt-20" id="formatted-printing-f-strings--format-"&gt;&lt;/span&gt;
&lt;a href="#formatted-printing-f-strings--format-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To create strings with dynamic content (like variables), Python offers handy formatting tools.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;f-strings (Formatted String Literals)&lt;/strong&gt;: This is the most modern and recommended way. You put an &lt;code&gt;f&lt;/code&gt; before the opening quote, and then embed variable names or expressions directly inside curly braces &lt;code&gt;{}&lt;/code&gt; within the string.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name = &amp;quot;Alice&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;age = 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(f&amp;quot;Name: {name}, Age: {age}!&amp;quot;)&lt;/code&gt; outputs &lt;code&gt;Name: Alice, Age: 30!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.format()&lt;/code&gt; Method&lt;/strong&gt;: A slightly older but still widely used method. You use curly braces &lt;code&gt;{}&lt;/code&gt; as placeholders in the string, and then call &lt;code&gt;.format()&lt;/code&gt; on the string, passing the values in order or by keyword.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Name: {}, Age: {}!&amp;quot;.format(&amp;quot;Bob&amp;quot;, 25)&lt;/code&gt; outputs &lt;code&gt;Name: Bob, Age: 25!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practice Questions (with answers below!) 🤔&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-with-answers-below-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-with-answers-below-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating and Printing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a single string variable &lt;code&gt;quote&lt;/code&gt; that holds the following phrase: &lt;code&gt;She said, &amp;quot;It's a wonderful world!&amp;quot;&lt;/code&gt; using the appropriate quote types and escape characters.&lt;/li&gt;
&lt;li&gt;Print the &lt;code&gt;quote&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;What would &lt;code&gt;len(quote)&lt;/code&gt; return?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Combination &amp;amp; Repetition&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given &lt;code&gt;part1 = &amp;quot;Python&amp;quot;&lt;/code&gt; and &lt;code&gt;part2 = &amp;quot;Rocks!&amp;quot;&lt;/code&gt;, create a new string &lt;code&gt;message&lt;/code&gt; by concatenating &lt;code&gt;part1&lt;/code&gt; with a space, then &lt;code&gt;part2&lt;/code&gt;, and finally repeating &lt;code&gt;part2&lt;/code&gt; two more times.&lt;/li&gt;
&lt;li&gt;Print &lt;code&gt;message&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advanced Slicing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given &lt;code&gt;word = &amp;quot;Unbelievable&amp;quot;&lt;/code&gt;, use slicing to extract:
&lt;ul&gt;
&lt;li&gt;The first three characters.&lt;/li&gt;
&lt;li&gt;The last two characters using negative indexing.&lt;/li&gt;
&lt;li&gt;Every other character starting from the beginning.&lt;/li&gt;
&lt;li&gt;The word reversed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Immutability in Action&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suppose &lt;code&gt;original_string = &amp;quot;apple pie&amp;quot;&lt;/code&gt;. You want to change it to &lt;code&gt;&amp;quot;apricot pie&amp;quot;&lt;/code&gt;. Can you do &lt;code&gt;original_string = 'r'&lt;/code&gt;? Explain why or why not.&lt;/li&gt;
&lt;li&gt;How would you correctly achieve the desired change (&lt;code&gt;&amp;quot;apricot pie&amp;quot;&lt;/code&gt;) by creating a &lt;em&gt;new&lt;/em&gt; string?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;String Methods&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given &lt;code&gt;data = &amp;quot; Item1, Item2 , Item3 &amp;quot;&lt;/code&gt;, use string methods to:
&lt;ul&gt;
&lt;li&gt;Remove all leading and trailing whitespace.&lt;/li&gt;
&lt;li&gt;Then, split the resulting string into a list of individual items.&lt;/li&gt;
&lt;li&gt;Print the final list. (Hint: you might need to strip whitespace from individual items too!).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Formatted Printing (f-string)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have &lt;code&gt;item_name = &amp;quot;Laptop&amp;quot;&lt;/code&gt; and &lt;code&gt;price = 1200.50&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use an f-string to print a message like: &lt;code&gt;The Laptop costs £1200.50.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then, modify the f-string to display the price with only two decimal places.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers to Practice Questions ✅&lt;span class="hx-absolute -hx-mt-20" id="answers-to-practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#answers-to-practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating and Printing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quote = &amp;quot;She said, \&amp;quot;It's a wonderful world!\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(quote)&lt;/code&gt; will output: &lt;code&gt;She said, &amp;quot;It's a wonderful world!&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(quote)&lt;/code&gt; would return &lt;strong&gt;28&lt;/strong&gt;. (S-1, h-2, e-3, (space)-4, s-5, a-6, i-7, d-8, ,-9, (space)-10, &amp;ldquo;-11, I-12, t-13, &amp;lsquo;-14, s-15, (space)-16, a-17, (space)-18, w-19, o-20, n-21, d-22, e-23, r-24, f-25, u-26, l-27, (space)-28, w-29, o-30, r-31, l-32, d-33, !-34, &amp;ldquo;-35. Wait, let me recount the example: &lt;code&gt;She said, &amp;quot;It's a wonderful world!&amp;quot;&lt;/code&gt; (S,h,e, ,s,a,i,d,,, ,&amp;rdquo; ,I,t,&amp;rsquo;,s, ,a, ,w,o,n,d,e,r,f,u,l, ,w,o,r,l,d,!,&amp;rdquo;) =&amp;gt; 35 characters. The &lt;code&gt;\&lt;/code&gt; used in the code &lt;code&gt;\&amp;quot;&lt;/code&gt; represents a single character when stored in the string.&lt;/li&gt;
&lt;li&gt;Correct length for &lt;code&gt;quote = &amp;quot;She said, \&amp;quot;It's a wonderful world!\&amp;quot;&amp;quot;&lt;/code&gt; is 35.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Combination &amp;amp; Repetition&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;part1 = &amp;quot;Python&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;part2 = &amp;quot;Rocks!&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message = part1 + &amp;quot; &amp;quot; + part2 + part2 * 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(message)&lt;/code&gt; will output: &lt;code&gt;Python Rocks!Rocks!Rocks!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advanced Slicing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;word = &amp;quot;Unbelievable&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;First three characters: &lt;code&gt;word[0:3]&lt;/code&gt; or &lt;code&gt;word[:3]&lt;/code&gt; returns &lt;code&gt;&amp;quot;Unb&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Last two characters: &lt;code&gt;word[-2:]&lt;/code&gt; returns &lt;code&gt;&amp;quot;le&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Every other character: &lt;code&gt;word[::2]&lt;/code&gt; returns &lt;code&gt;&amp;quot;Ubelae&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Reversed word: &lt;code&gt;word[::-1]&lt;/code&gt; returns &lt;code&gt;&amp;quot;elbailebnU&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Immutability in Action&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No, you &lt;strong&gt;cannot&lt;/strong&gt; do &lt;code&gt;original_string = 'r'&lt;/code&gt; because strings are &lt;strong&gt;immutable&lt;/strong&gt; in Python. Once &lt;code&gt;&amp;quot;apple pie&amp;quot;&lt;/code&gt; is created, its individual characters cannot be changed directly in place.&lt;/li&gt;
&lt;li&gt;To correctly achieve &lt;code&gt;&amp;quot;apricot pie&amp;quot;&lt;/code&gt;, you would create a new string using slicing and concatenation:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new_string = original_string[:2] + &amp;quot;ricot&amp;quot; + original_string[5:]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alternatively, using &lt;code&gt;replace&lt;/code&gt;: &lt;code&gt;new_string = original_string.replace(&amp;quot;apple&amp;quot;, &amp;quot;apricot&amp;quot;)&lt;/code&gt; (though this might be too broad if &amp;ldquo;apple&amp;rdquo; appears elsewhere).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;String Methods&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data = &amp;quot; Item1, Item2 , Item3 &amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;stripped_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;items_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stripped_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;final_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items_list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Output: &lt;code&gt;['Item1', 'Item2', 'Item3']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Formatted Printing (f-string)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;item_name = &amp;quot;Laptop&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price = 1200.50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Message 1: &lt;code&gt;print(f&amp;quot;The {item_name} costs £{price}.&amp;quot;)&lt;/code&gt; outputs &lt;code&gt;The Laptop costs £1200.5.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Message 2 (price with two decimal places): &lt;code&gt;print(f&amp;quot;The {item_name} costs £{price:.2f}.&amp;quot;)&lt;/code&gt; outputs &lt;code&gt;The Laptop costs £1200.50.&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep practising! Coding is like learning a new language, and practice makes perfect! 👩‍💻✨.&lt;/p&gt;</description></item><item><title>Conclusion FAQs</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.13/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-1/lec1.13/</guid><description>
&lt;p&gt;Based on the sources and our conversation, while there isn&amp;rsquo;t a single section explicitly titled &amp;ldquo;Conclusion FAQs,&amp;rdquo; the provided learning material, particularly the &amp;ldquo;Learning_Python.pdf&amp;rdquo; source, incorporates a system of &lt;strong&gt;end-of-chapter quizzes and end-of-part exercises&lt;/strong&gt; that serve a similar purpose: to help you &lt;strong&gt;review and test your understanding&lt;/strong&gt; of the material covered. These sections act as concluding questions and answers for specific topics or parts of the book.&lt;/p&gt;
&lt;p&gt;The structure typically involves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A section titled &amp;ldquo;Test Your Knowledge: Quiz&amp;rdquo; at the end of each chapter.&lt;/li&gt;
&lt;li&gt;Immediately following the quiz questions, there is a section titled &amp;ldquo;Test Your Knowledge: Answers&amp;rdquo;. The solutions to these quizzes are typically provided right away.&lt;/li&gt;
&lt;li&gt;At the end of each major part of the book, there are &amp;ldquo;Test Your Knowledge: Part Exercises&amp;rdquo;. Solutions to these exercises are located in Appendix B.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These quizzes and exercises cover a wide range of topics, including those we have discussed, and often raise points or provide supplemental information not explicitly covered in the main text.&lt;/p&gt;
&lt;p&gt;Here are some examples of the types of questions and answers you might find in these concluding sections, drawing on concepts from the sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regarding String Operations:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; Can the string &lt;code&gt;find&lt;/code&gt; method be used to search a list?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; No, because methods are always type-specific; they only work on a single data type. Expressions like &lt;code&gt;X + Y&lt;/code&gt; and built-in functions like &lt;code&gt;len(X)&lt;/code&gt; are generic and may work on various types, such as the &lt;code&gt;in&lt;/code&gt; membership expression which can search both strings and lists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; How might you go about changing a string in Python?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; This question hints at the immutability of strings. The sources explain that strings cannot be changed in-place , and operations like concatenation create new string objects. While the quiz answer itself isn&amp;rsquo;t provided in the excerpts for this specific question, the underlying concept is that you generally create a &lt;em&gt;new&lt;/em&gt; string with the desired changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; Given a string S with the value &amp;ldquo;s,pa,m&amp;rdquo;, name two ways to extract the two characters in the middle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; This question relates to string slicing, a common operation on sequences like strings. The sources explain slicing fetches sections of a string. While the specific answer isn&amp;rsquo;t in the provided text, it would involve using slice notation like &lt;code&gt;S[1:3]&lt;/code&gt; to extract &amp;lsquo;pa&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regarding Basic Concepts and Objects:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; What is the Python interpreter?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The Python interpreter is a program that runs the Python programs you write.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; What is source code?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Source code is the statements you write for your program—it consists of text in text files that normally end with a .py extension.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; How can you start an interactive interpreter session?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You can start an interactive session by typing &lt;code&gt;python&lt;/code&gt; as a system command line in your system&amp;rsquo;s console window, or by launching IDLE, as its main shell window is an interactive session.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; How can you determine how large a tuple is? Why is this tool located where it is?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The built-in &lt;code&gt;len&lt;/code&gt; function returns the length (number of contained items) for any container object in Python, including tuples. It&amp;rsquo;s a built-in function, not a type method, because it applies to many different types of objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regarding Statements and Logic:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; How can you code a multiway branch in Python?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; An &lt;code&gt;if&lt;/code&gt; statement with multiple &lt;code&gt;elif&lt;/code&gt; clauses is often the most straightforward way. Dictionary indexing can also achieve the same result if the dictionary contains callable functions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; What’s the difference between &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The &lt;code&gt;break&lt;/code&gt; statement exits a loop immediately, taking you below the entire loop statement. The &lt;code&gt;continue&lt;/code&gt; statement jumps back to the top of the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regarding Functions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; What is the point of coding functions?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Functions help avoid code redundancy by factoring code so you only have one copy to update. They are the basic unit of code reuse. They also help divide complex systems into manageable parts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; What happens if you call a function without passing any argument (when it expects one)?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; (Based on the pattern of quiz answers and Python behavior) This would result in a &lt;code&gt;TypeError&lt;/code&gt; because the function expects an argument that wasn&amp;rsquo;t provided. While the specific answer isn&amp;rsquo;t in the excerpt, this kind of question tests understanding of function arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regarding Modules:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; How do you make a module?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; To create a module, you just write a text file containing Python statements; every source code file is automatically a module, and there is no syntax for declaring one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regarding Exceptions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;/strong&gt; Name three things that exception processing is good for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Exception processing is useful for error handling, termination actions, and event notification. It can also simplify handling special cases and implement alternative control flows.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These quizzes and exercises cover foundational knowledge about Python&amp;rsquo;s object types, operations, statements, and program structure, serving as essential review points throughout the learning process. They encourage you to actively recall information and apply concepts learned in each section.&lt;/p&gt;</description></item><item><title>Introduction</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.1/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.1/</guid><description>
&lt;p&gt;Based on the sources and our conversation, here is an introduction to Python programming:&lt;/p&gt;
&lt;p&gt;Python is a &lt;strong&gt;general-purpose interpreted, interactive, object-oriented, and high-level programming language&lt;/strong&gt;. It was created by Guido van Rossum during 1985–1990. Python is processed at runtime by the interpreter, meaning you do not need to compile your program before executing it. You can interact directly with the interpreter at a Python prompt. Python supports Object-Oriented style programming which encapsulates code within objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why learn Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is considered a &lt;strong&gt;very programmer friendly language&lt;/strong&gt;. From one perspective, it is the most programmer-friendly language that one source is aware of from 15-20 years of programming experience.
It is described as &lt;strong&gt;remarkably easy and fun to use&lt;/strong&gt;. Compared to other programming languages, the core Python language is &lt;strong&gt;remarkably easy to learn&lt;/strong&gt;. You can expect to be coding significant Python programs in a matter of days, or even hours if you&amp;rsquo;re already experienced. This makes it a great language for beginner-level programmers.&lt;/p&gt;
&lt;p&gt;Reasons people choose Python for programming tasks include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software Quality:&lt;/strong&gt; Python&amp;rsquo;s focus on developer productivity and software quality is seen as a strategic advantage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer Productivity:&lt;/strong&gt; Python programs are simpler, smaller, and more flexible than equivalent programs in languages like C, C++, and Java, eliminating much complexity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensive Libraries:&lt;/strong&gt; There are millions of library functions readily available for you to pick and simply use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Large Open Source Community:&lt;/strong&gt; Most open source software projects today, if you want to do something creative and see if someone has done it already, are likely in Python. Learning Python provides access to millions of open source projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portability:&lt;/strong&gt; Python code is portable and cross-platform compatible. Python is portable, meaning Python programs can run on many different computer types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Powerful:&lt;/strong&gt; Python is described as powerful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mixable:&lt;/strong&gt; Python can be easily integrated with components written in other languages like C++.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to Use:&lt;/strong&gt; Beyond a fast development cycle, Python offers a simple syntax and powerful built-in tools. Some have called it &amp;ldquo;executable pseudocode&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to Learn:&lt;/strong&gt; As mentioned, its simple structure, few keywords, and clear syntax make it easy for students to pick up quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to Read and Maintain:&lt;/strong&gt; Python code is clearly defined and visible, and its source code is fairly easy to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also noted that once you learn one programming language, trying to learn a second is not very difficult; it&amp;rsquo;s like learning a second human language after the first difficult one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What can you do with Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is used for both standalone programs and scripting applications across a wide variety of domains. It is often applied in scripting roles and is commonly defined as an object-oriented scripting language. The terms &amp;ldquo;script&amp;rdquo; and &amp;ldquo;program&amp;rdquo; are often used interchangeably for a Python code file, with &amp;ldquo;script&amp;rdquo; sometimes referring to a simpler top-level file and &amp;ldquo;program&amp;rdquo; to a more sophisticated multifile application.&lt;/p&gt;
&lt;p&gt;Potential applications mentioned in the sources include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Systems Programming:&lt;/strong&gt; Python can be used for coding operating-system-oriented scripts, performing tasks like processing text files and launching other programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GUIs (Graphical User Interfaces):&lt;/strong&gt; You can build GUIs using various toolkits like tkinter, wxPython, PyQt, and others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internet Scripting:&lt;/strong&gt; Python is used for server-side CGI scripts and web frameworks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component Integration:&lt;/strong&gt; Python is well-suited for integrating components coded in various languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Programming:&lt;/strong&gt; Python provides interfaces for accessing databases, including built-in support for SQLite and external libraries like PyMySQL for connecting to MySQL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rapid Prototyping:&lt;/strong&gt; Its ease of use and flexibility make it excellent for rapid prototyping.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Numeric and Scientific Programming:&lt;/strong&gt; Python is used in this domain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gaming, Images, Serial Ports, XML, Robots, and More:&lt;/strong&gt; Python has applications in many specialized areas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Analysis:&lt;/strong&gt; Python is used for solving data/information analysis problems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network Programming:&lt;/strong&gt; The &lt;code&gt;socket&lt;/code&gt; module provides tools for networking and interprocess communication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sending Email:&lt;/strong&gt; Python can be used to send emails using protocols like SMTP.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multithreaded Programming:&lt;/strong&gt; Python supports multithreading.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How to get started and run Python programs:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can start by running Python code using an &lt;strong&gt;interactive interpreter session&lt;/strong&gt;. This involves typing &lt;code&gt;python&lt;/code&gt; as a system command in your console or launching an environment like IDLE. In interactive mode, each command is run immediately after being entered. The interpreter displays a prompt (like &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) when it&amp;rsquo;s ready for input.&lt;/p&gt;
&lt;p&gt;For more complex programs, you &lt;strong&gt;write Python instructions into a file using a text editor&lt;/strong&gt;, which is called a &lt;strong&gt;script&lt;/strong&gt;. By convention, Python script files are given names that end in &lt;code&gt;.py&lt;/code&gt;. These files contain Python statements that are executed in order. You can run these script files by passing their names to the Python interpreter on the system command line (e.g., &lt;code&gt;python script0.py&lt;/code&gt;). On Unix-like systems, you can also make scripts directly executable by adding a special &lt;code&gt;#!&lt;/code&gt; line at the beginning.&lt;/p&gt;
&lt;p&gt;Integrated Development Environments (IDEs) like IDLE provide interactive prompts and text editors for writing and running code. Online platforms like Replit also offer an easy way to start typing and executing Python code in a browser.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic Concepts:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python programs are built from fundamental elements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Objects:&lt;/strong&gt; Data in Python takes the form of objects. These are pieces of memory with values and associated operations. Python provides &lt;strong&gt;core built-in data types&lt;/strong&gt;, including Numbers (integers, floats, complex numbers, booleans, etc.), Strings (sequences of characters), Lists (mutable sequences), Tuples (immutable sequences), and Dictionaries (key-value mappings). There are also other types like Files. You can check the type of a variable using the &lt;code&gt;type()&lt;/code&gt; command. Operations like concatenation (&lt;code&gt;+&lt;/code&gt;) and repetition (&lt;code&gt;*&lt;/code&gt;) work on sequences like strings and lists. String operations also include indexing and slicing. Strings are immutable, meaning they cannot be changed in place.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Statements:&lt;/strong&gt; Statements are instructions that tell Python what to do. Python is a procedural, statement-based language. Statements execute one after another by default, but control flow statements like &lt;code&gt;if&lt;/code&gt; and loops can alter this order. Python uses indentation to define blocks of code. Examples of statements include &lt;code&gt;print&lt;/code&gt; (for displaying output), assignment (&lt;code&gt;=&lt;/code&gt;) for creating variables, &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; for conditional execution, &lt;code&gt;while&lt;/code&gt; loops for general repetition, and &lt;code&gt;for&lt;/code&gt; loops for iterating over sequences. Other statements like &lt;code&gt;break&lt;/code&gt; (exits a loop) and &lt;code&gt;continue&lt;/code&gt; (jumps to the top of a loop) are used within loops. &lt;code&gt;try&lt;/code&gt; statements are used to handle exceptions (errors).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expressions:&lt;/strong&gt; Statements contain expressions. Expressions are combinations of values, variables, operators, and function calls that evaluate to a value. Operators perform computations (e.g., &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; for exponentiation). Variables are names used to keep track of information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modules:&lt;/strong&gt; Programs are composed of modules. A module is essentially a text file containing Python statements that can be used in other programs. You can import modules to access their functions and objects. Python comes with a broad standard library of precoded modules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions:&lt;/strong&gt; Functions are higher-level program structure tools used to package code for reuse and avoid redundancy. They are defined using the &lt;code&gt;def&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classes:&lt;/strong&gt; Classes are Python&amp;rsquo;s main object-oriented programming (OOP) tool used to implement new kinds of objects that support inheritance. They are created with the &lt;code&gt;class&lt;/code&gt; statement. OOP involves factoring code to minimise redundancy and writing new programs by customising existing code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The learning material focuses on the core Python language fundamentals, providing a solid grounding in its concepts and syntax.&lt;/p&gt;</description></item><item><title>An Intersting Cipher:- Move on Strings</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.7/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.7/</guid><description>
&lt;p&gt;Based on the sources and our conversation history, the &amp;ldquo;Interesting Cipher&amp;rdquo; discussed is the &lt;strong&gt;Caesar Cipher&lt;/strong&gt;. It is presented as a simple form of secrecy or encryption.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the cipher and how it&amp;rsquo;s approached using Python in the video:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Concept&lt;/strong&gt;: The Caesar Cipher involves &amp;ldquo;&lt;strong&gt;rotating&lt;/strong&gt;&amp;rdquo; or shifting each letter in a message by a fixed number of places in the alphabet. The key is the number of places the letters are shifted. If a shift goes beyond the end of the alphabet (e.g., shifting &amp;lsquo;Z&amp;rsquo; by 1), it &lt;strong&gt;wraps around&lt;/strong&gt; to the beginning. For instance, &amp;lsquo;A&amp;rsquo; rotated by 3 is &amp;lsquo;D&amp;rsquo;, and &amp;lsquo;Z&amp;rsquo; rotated by 1 is &amp;lsquo;A&amp;rsquo;. Rotating a word means rotating each letter by the same amount.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goal in the Video&lt;/strong&gt;: The specific task demonstrated is shifting a string, like the name &amp;ldquo;sudarshan&amp;rdquo;, by &lt;strong&gt;one letter&lt;/strong&gt; to produce &amp;ldquo;tvebstibo&amp;rdquo;. This is a Caesar Cipher with a shift of 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Python Implementation Approach&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An alphabet string, called &lt;code&gt;alpha&lt;/code&gt;, is used to represent all lowercase letters from &amp;lsquo;a&amp;rsquo; to &amp;lsquo;z&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;To shift a letter, its &lt;strong&gt;index&lt;/strong&gt; within the alphabet string &lt;code&gt;alpha&lt;/code&gt; is found. The built-in string function &lt;code&gt;index&lt;/code&gt; is mentioned for this purpose.&lt;/li&gt;
&lt;li&gt;The shift is applied to this index (e.g., adding 1 for a one-letter shift).&lt;/li&gt;
&lt;li&gt;To handle wrapping around the alphabet, the &lt;strong&gt;modulo operator (%)&lt;/strong&gt; with 26 (the number of letters) is used on the shifted index. This ensures the resulting index stays within the range 0-25. For example, 25 modulo 26 is 25, which corresponds to &amp;lsquo;z&amp;rsquo;, and if the shifted index was 26, 26 modulo 26 is 0, corresponding to &amp;lsquo;a&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;The character at this new, calculated index in the &lt;code&gt;alpha&lt;/code&gt; string is the shifted letter.&lt;/li&gt;
&lt;li&gt;A new string (e.g., &lt;code&gt;t&lt;/code&gt;) is built by appending or &lt;strong&gt;concatenating&lt;/strong&gt; these shifted letters one by one. String concatenation can be done using the &lt;code&gt;+&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;The process involves iterating through the original string, letter by letter, performing the shift for each, and adding the result to the new string. The video notes that automating this repetitive process with code will be discussed later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose (Simple Secrecy)&lt;/strong&gt;: The Caesar Cipher is described as a method in &lt;strong&gt;cryptography&lt;/strong&gt;. If you shift a message by a particular amount &lt;code&gt;k&lt;/code&gt;, you can use &lt;code&gt;k&lt;/code&gt; as a key and tell someone that they need to shift back by &lt;code&gt;k&lt;/code&gt; units to understand the original text. It&amp;rsquo;s presented as a basic, &amp;ldquo;very, very naivest form&amp;rdquo; of encoding text so that nobody understands it, considered a &amp;ldquo;toy example&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Related Concepts Mentioned Elsewhere&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String indexing is a fundamental operation used to access individual characters or slices of a string by their position (offset). This includes negative indexing, where negative numbers count from the end of the string.&lt;/li&gt;
&lt;li&gt;String slicing is used to extract segments of a string. A slice like &lt;code&gt;S[i:j]&lt;/code&gt; includes characters from index &lt;code&gt;i&lt;/code&gt; up to, but not including, index &lt;code&gt;j&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The concept of converting characters to numeric codes (&lt;code&gt;ord&lt;/code&gt;) and numeric codes back to characters (&lt;code&gt;chr&lt;/code&gt;) is also mentioned in the context of rotating letters in the alphabet. &lt;code&gt;ord('c') - ord('a')&lt;/code&gt; gives the position relative to &amp;lsquo;a&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This specific application of string manipulation (shifting letters using indexing, modulo, and concatenation) is a clear demonstration of how basic Python string operations can be used for simple tasks like encoding.&lt;/p&gt;</description></item><item><title>Different ways to import a library</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.11/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.11/</guid><description>
&lt;p&gt;In Python, what are often referred to as &amp;ldquo;libraries&amp;rdquo; are more formally known as &lt;strong&gt;modules&lt;/strong&gt;. A module is essentially a file containing Python code that organises related functions, classes, and variables. The primary purpose of modules is &lt;strong&gt;code reuse&lt;/strong&gt;. To use code defined in one module within another Python program, you must explicitly import that module using the &lt;code&gt;import&lt;/code&gt; statement. If you try to use something from a module without importing it, you will encounter a &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The sources describe several different ways to import libraries (modules) or their contents into your Python program:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importing the Entire Module (&lt;code&gt;import module_name&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the most basic and common way to import a module.&lt;/li&gt;
&lt;li&gt;The statement &lt;code&gt;import module_name&lt;/code&gt; loads the entire module into your program.&lt;/li&gt;
&lt;li&gt;It creates a &lt;strong&gt;module object&lt;/strong&gt; named &lt;code&gt;module_name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To access any function, variable, or class defined within the module, you must use &lt;strong&gt;dot notation&lt;/strong&gt; (e.g., &lt;code&gt;module_name.attribute_name&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;For example, to use the &lt;code&gt;month&lt;/code&gt; function from the &lt;code&gt;calendar&lt;/code&gt; library, you would write &lt;code&gt;import calendar&lt;/code&gt; and then &lt;code&gt;calendar.month(...)&lt;/code&gt;. Similarly, for the &lt;code&gt;sqrt&lt;/code&gt; function from the &lt;code&gt;math&lt;/code&gt; library, it would be &lt;code&gt;math.sqrt()&lt;/code&gt; (though &lt;code&gt;math&lt;/code&gt; isn&amp;rsquo;t explicitly shown with this import style for &lt;code&gt;sqrt&lt;/code&gt;, it&amp;rsquo;s the implication based on the general explanation). For &lt;code&gt;random.random()&lt;/code&gt;, you&amp;rsquo;d use &lt;code&gt;import random&lt;/code&gt; and then &lt;code&gt;random.random()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This method is recommended when you are using most or all features of a library. It also helps avoid name clashes in your current program because all imported items are enclosed within the module&amp;rsquo;s namespace, which you access via the module name.&lt;/li&gt;
&lt;li&gt;An important point is that Python only imports a module &lt;em&gt;once&lt;/em&gt; per process execution. Subsequent &lt;code&gt;import&lt;/code&gt; statements for the same module simply fetch the already loaded module object from an internal table (&lt;code&gt;sys.modules&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Access contents using:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# module_name.function_name()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# module_name.variable_name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importing Specific Attributes (&lt;code&gt;from module_name import attribute_name&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This method allows you to import only specific names (like functions, classes, or variables) from a module directly into your current program&amp;rsquo;s namespace.&lt;/li&gt;
&lt;li&gt;The syntax is &lt;code&gt;from module_name import name1[, name2[, ... nameN]]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After using this statement, you can use the imported names &lt;strong&gt;directly&lt;/strong&gt; without prefixing them with the module name. For example, you could directly call &lt;code&gt;fib(100)&lt;/code&gt; after &lt;code&gt;from fib import fib&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This method is considered more ideal if you are using only one or two features from a specific library. It requires less typing as you don&amp;rsquo;t need the dot notation each time you use an imported item.&lt;/li&gt;
&lt;li&gt;However, the sources note that using &lt;code&gt;from&lt;/code&gt; copies the names from the module into your current scope. This can potentially overwrite existing variables in your program if they have the same name.&lt;/li&gt;
&lt;li&gt;Conceptually, &lt;code&gt;from module import name&lt;/code&gt; is roughly equivalent to &lt;code&gt;import module; name = module.name; del module&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;specific_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Access specific_name directly:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# specific_name()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# specific_name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can import multiple names:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importing All Attributes (&lt;code&gt;from module_name import *&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This variation of the &lt;code&gt;from&lt;/code&gt; statement imports &lt;em&gt;all&lt;/em&gt; top-level names from a module directly into your current namespace.&lt;/li&gt;
&lt;li&gt;The syntax is &lt;code&gt;from module_name import *&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similar to the specific &lt;code&gt;from&lt;/code&gt; import, you can use the imported names directly without qualification. The sources use the example of &lt;code&gt;from calendar import star&lt;/code&gt; (which is likely a typo in the transcript and should be &lt;code&gt;from calendar import *&lt;/code&gt;) to import everything from the &lt;code&gt;calendar&lt;/code&gt; library and then being able to call &lt;code&gt;calendar(...)&lt;/code&gt; directly.&lt;/li&gt;
&lt;li&gt;While it requires minimal typing, this method is generally &lt;strong&gt;discouraged&lt;/strong&gt; because it can lead to significant namespace pollution and make it very difficult to determine which module a particular name came from, especially if you use &lt;code&gt;from *&lt;/code&gt; from multiple modules.&lt;/li&gt;
&lt;li&gt;By default, names starting with a single underscore (&lt;code&gt;_&lt;/code&gt;) are not copied out by &lt;code&gt;from *&lt;/code&gt;, although this behaviour can be affected by a module&amp;rsquo;s &lt;code&gt;__all__&lt;/code&gt; list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Access contents directly:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# function_name()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# variable_name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importing with Renaming (&lt;code&gt;as&lt;/code&gt; keyword)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; statements can use the &lt;code&gt;as&lt;/code&gt; keyword to assign a different name (an alias) to the imported module or attribute in your current script.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Importing an entire module with an alias:&lt;/strong&gt; &lt;code&gt;import module_name as alias&lt;/code&gt;. This imports the whole module, but you access its contents using &lt;code&gt;alias.attribute_name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Importing a specific attribute with an alias:&lt;/strong&gt; &lt;code&gt;from module_name import attribute_name as alias&lt;/code&gt;. This imports the specific attribute, and you access it directly using &lt;code&gt;alias&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This feature is helpful for saving time writing long library names, providing shorter synonyms, or avoiding name clashes if the original module/attribute name conflicts with something else in your script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Rename module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;reallylongmodulename&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;shortname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;shortname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Rename specific attribute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;confusing_function_name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;clear_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;clear_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition to these fundamental syntax variations, the sources also discuss &lt;strong&gt;package imports&lt;/strong&gt;, which extend the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; statements to navigate directory hierarchies containing modules. This is done using dotted paths, like &lt;code&gt;import dir1.dir2.mod&lt;/code&gt; or &lt;code&gt;from dir1.dir2.mod import x&lt;/code&gt;. This structure helps organise larger systems. Python also supports &lt;strong&gt;relative imports&lt;/strong&gt; within packages using leading dots (&lt;code&gt;.&lt;/code&gt;) in &lt;code&gt;from&lt;/code&gt; statements (e.g., &lt;code&gt;from . import string&lt;/code&gt; or &lt;code&gt;from .. import sibling_module&lt;/code&gt;), which explicitly refers to modules within the same package structure.&lt;/p&gt;</description></item><item><title>Escape characters and types of quotes</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.5/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.5/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s explore escape characters and the different types of quotes used for strings in Python, based on the sources you provided and our conversation history.&lt;/p&gt;
&lt;p&gt;As we&amp;rsquo;ve discussed, strings are used to record textual information. In Python, you define string literals by enclosing characters within quotation marks. The sources highlight several ways to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Quotes (&lt;code&gt;'&lt;/code&gt;) and Double Quotes (&lt;code&gt;&amp;quot;&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python accepts both single quotes and double quotes to denote string literals.&lt;/li&gt;
&lt;li&gt;Functionally, &lt;strong&gt;single-quoted and double-quoted strings are treated the same&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You must match the quotes you use to start and end the string. If you open with a single quote, you must close with a single quote; if you open with a double quote, you must close with a double quote. Using a combination will not work.&lt;/li&gt;
&lt;li&gt;Quotes are required around the message you want to print as a string.&lt;/li&gt;
&lt;li&gt;All quotation marks must be &amp;ldquo;straight quotes&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;A common issue arises when you want to include a quote character within a string that is delimited by the &lt;em&gt;same&lt;/em&gt; type of quote. For example, trying to print &amp;ldquo;It&amp;rsquo;s a beautiful day&amp;rdquo; using single quotes &lt;code&gt;print('It's a beautiful day')&lt;/code&gt; will cause an error because the apostrophe in &amp;ldquo;It&amp;rsquo;s&amp;rdquo; is interpreted as the end of the string. Similarly, using a double quote inside a double-quoted string will cause an invalid syntax error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Escape Characters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To solve the problem of including special characters like quotes within a string, Python uses &lt;strong&gt;escape characters&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An escape character is a mechanism that allows you to add specific characters or symbols in a string that you usually cannot type directly or would conflict with the string&amp;rsquo;s definition.&lt;/li&gt;
&lt;li&gt;The syntax for an escape character is a &lt;strong&gt;backslash (&lt;code&gt;\&lt;/code&gt;) followed by the character&lt;/strong&gt; you want to insert.&lt;/li&gt;
&lt;li&gt;When Python encounters a backslash followed by a specific character, it &lt;strong&gt;translates these two (or more) characters into a single special entity&lt;/strong&gt;. The original backslash characters are not stored in the string itself.&lt;/li&gt;
&lt;li&gt;Examples of common escape characters include:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\'&lt;/code&gt; to insert a single quote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt; to insert a double quote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\\&lt;/code&gt; to insert a literal backslash.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt; represents a &lt;strong&gt;newline&lt;/strong&gt; character. This allows you to print text on different lines within a single print statement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt; represents a &lt;strong&gt;tab&lt;/strong&gt; character. This is used to add extra space, similar to pressing the Tab key.&lt;/li&gt;
&lt;li&gt;Other standard escapes include &lt;code&gt;\a&lt;/code&gt; (Bell), &lt;code&gt;\b&lt;/code&gt; (Backspace), &lt;code&gt;\f&lt;/code&gt; (Formfeed), &lt;code&gt;\r&lt;/code&gt; (Carriage return), &lt;code&gt;\v&lt;/code&gt; (Vertical tab).&lt;/li&gt;
&lt;li&gt;You can also embed absolute binary values using hexadecimal escapes (&lt;code&gt;\xhh&lt;/code&gt;) or octal escapes (&lt;code&gt;\ooo&lt;/code&gt;). In Python, the null byte (&lt;code&gt;\0&lt;/code&gt;) does not terminate a string.&lt;/li&gt;
&lt;li&gt;Unicode characters can be represented using Unicode escapes (&lt;code&gt;\uhhhh&lt;/code&gt;, &lt;code&gt;\Uhhhhhhhh&lt;/code&gt;), though in Python 3.0 the standard &lt;code&gt;str&lt;/code&gt; type supports Unicode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If a backslash is followed by a character that doesn&amp;rsquo;t form a valid escape sequence, Python may simply keep the backslash in the resulting string, although relying on this is not recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Triple Quotes (&lt;code&gt;'''&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python supports a third type of quote: triple quotes (three consecutive single quotes &lt;code&gt;'''&lt;/code&gt; or three consecutive double quotes &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The primary use of triple quotes is for &lt;strong&gt;coding multiline string literals&lt;/strong&gt;. This is a syntactic convenience for including text that spans multiple lines directly in your code.&lt;/li&gt;
&lt;li&gt;When you use triple quotes, all the lines within the quotes are collected into a single string object. Line breaks in your code become embedded newline characters (&lt;code&gt;\n&lt;/code&gt;) in the string.&lt;/li&gt;
&lt;li&gt;An advantage of triple quotes is that you &lt;strong&gt;can embed single or double quotes within the string without needing to escape them&lt;/strong&gt;, as the string only ends when the closing sequence of three matching, unescaped quotes is found.&lt;/li&gt;
&lt;li&gt;Triple-quoted strings are useful for embedding blocks of text like error messages, HTML, or XML code.&lt;/li&gt;
&lt;li&gt;They are also commonly used for documentation strings (docstrings), which are string literals that Python can associate with modules, functions, classes, and methods as documentation; anything inside these three quotes will not be executed as code. They can also be used as a temporary, &amp;ldquo;hackish&amp;rdquo; way to disable blocks of code during development, though Python still technically makes a string out of the disabled lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Raw Strings (&lt;code&gt;r'...'&lt;/code&gt; or &lt;code&gt;r&amp;quot;...&amp;quot;&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python also provides a special syntax called &lt;strong&gt;raw strings&lt;/strong&gt;, indicated by preceding the opening quote with the letter &lt;code&gt;r&lt;/code&gt; (either &lt;code&gt;r&lt;/code&gt; or &lt;code&gt;R&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Raw strings &lt;strong&gt;suppress the backslash escape mechanism&lt;/strong&gt;. In a raw string, backslashes are treated literally and do not initiate escape sequences.&lt;/li&gt;
&lt;li&gt;This is particularly useful when you need strings that contain many backslashes, such as Windows directory paths (&lt;code&gt;r'C:\new\text.dat'&lt;/code&gt;) or regular expressions, where backslashes often have a special meaning (&lt;code&gt;r'expression'&lt;/code&gt;). Using a raw string avoids the need to double up backslashes (&lt;code&gt;'C:\\new\\text.dat'&lt;/code&gt;) to represent literal backslashes.&lt;/li&gt;
&lt;li&gt;A raw string cannot end in a single backslash because that backslash would try to escape the closing quote.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Byte Strings and Unicode Strings&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sources also mention &lt;strong&gt;byte strings&lt;/strong&gt; (&lt;code&gt;b'...'&lt;/code&gt;) which represent raw bytes, particularly in Python 3.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicode strings&lt;/strong&gt; (&lt;code&gt;u'...'&lt;/code&gt;) were a distinct type in Python 2.6, but in Python 3.0, the standard &lt;code&gt;str&lt;/code&gt; type handles Unicode text, including non-ASCII characters.&lt;/li&gt;
&lt;li&gt;In Python 3.0, &lt;code&gt;str&lt;/code&gt; (text) and &lt;code&gt;bytes&lt;/code&gt; (binary data) types do not automatically mix in operations; manual encoding and decoding methods are needed to convert between them. These types and their operations are discussed in more advanced sections of the source material.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, Python&amp;rsquo;s flexible approach to string quoting and the use of escape characters and raw strings provide powerful ways to represent various forms of text data, from simple words to multiline blocks and paths, accommodating special characters and different encodings.&lt;/p&gt;</description></item><item><title>Introduction to "import library"</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.10/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.10/</guid><description>
&lt;p&gt;Based on the sources, let&amp;rsquo;s look at the concept of &amp;ldquo;importing a library&amp;rdquo; in Python.&lt;/p&gt;
&lt;p&gt;Firstly, in Python, what are often referred to as &amp;ldquo;libraries&amp;rdquo; are more formally called &lt;strong&gt;modules&lt;/strong&gt;. A module is essentially a file containing Python code. It allows you to logically organise your code by grouping related functions, classes, and variables together. Think of a module as a &lt;strong&gt;self-contained package of variables&lt;/strong&gt;. Every file of Python source code ending in a &lt;code&gt;.py&lt;/code&gt; extension is a module.&lt;/p&gt;
&lt;p&gt;The main purpose of modules is &lt;strong&gt;code reuse&lt;/strong&gt;. Instead of writing the same functions or classes repeatedly, you can define them in a module file and then use them in other programs.&lt;/p&gt;
&lt;p&gt;Now, why do you need to &amp;ldquo;import&amp;rdquo; a module or library? Python programs are often composed of &lt;strong&gt;multiple module files&lt;/strong&gt;. One module file cannot see the names (variables, functions, etc.) defined in another file unless it explicitly imports that other file. The &lt;strong&gt;&lt;code&gt;import&lt;/code&gt; statement&lt;/strong&gt; is the primary way to link these files together at runtime.&lt;/p&gt;
&lt;p&gt;Using the analogy from one source, importing a module is like going to a library and bringing a book home for reference. Once you bring it home, you can open it up and start reading or using its contents. If you try to use something from a module without importing it, Python won&amp;rsquo;t know where to find it, leading to a &amp;ldquo;name is not defined&amp;rdquo; error.&lt;/p&gt;
&lt;p&gt;The basic way to import an entire module is using the &lt;strong&gt;&lt;code&gt;import&lt;/code&gt; statement&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When you use &lt;code&gt;import module_name&lt;/code&gt;, Python loads the entire module into your program. This statement creates a &lt;strong&gt;module object&lt;/strong&gt; named &lt;code&gt;module_name&lt;/code&gt;. After importing, to access anything defined inside that module (like a function or variable), you use &lt;strong&gt;dot notation&lt;/strong&gt;: you write the module name, followed by a dot, and then the name of the item you want to use. For example, to use the &lt;code&gt;sqrt&lt;/code&gt; function from the &lt;code&gt;math&lt;/code&gt; module, you would write &lt;code&gt;math.sqrt()&lt;/code&gt;. Similarly, to print the calendar for a month from the &lt;code&gt;calendar&lt;/code&gt; library, you would use &lt;code&gt;calendar.month()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Python comes with a &lt;strong&gt;large collection of utility modules&lt;/strong&gt; known as the standard library. These are not part of the core language itself but provide support for common tasks. You access these standard tools by importing the appropriate modules. Examples mentioned include the &lt;code&gt;math&lt;/code&gt; library for mathematical functions, the &lt;code&gt;random&lt;/code&gt; library for generating random numbers, and the &lt;code&gt;calendar&lt;/code&gt; library for calendar-related operations.&lt;/p&gt;
&lt;p&gt;When you issue an &lt;code&gt;import&lt;/code&gt; statement for the first time for a specific module during a program&amp;rsquo;s execution, Python goes through a process to locate and load the module. The key steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Find It:&lt;/strong&gt; Python searches for the module file. This search happens along a defined list of directories called the &lt;strong&gt;module search path&lt;/strong&gt; (also known as &lt;code&gt;sys.path&lt;/code&gt;). The simple name you use in the &lt;code&gt;import&lt;/code&gt; statement (like &lt;code&gt;calendar&lt;/code&gt;) does not include the &lt;code&gt;.py&lt;/code&gt; suffix or directory path. Python finds the first file matching the name on this path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compile It (Maybe):&lt;/strong&gt; If the source file (&lt;code&gt;.py&lt;/code&gt;) is found and hasn&amp;rsquo;t been compiled recently, Python compiles it into byte code (&lt;code&gt;.pyc&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run It:&lt;/strong&gt; Python executes the module&amp;rsquo;s byte code from top to bottom. Any assignments made at the top level of the module file become &lt;strong&gt;attributes&lt;/strong&gt; of the resulting module object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subsequent imports of the same module within the same program execution are faster; Python simply fetches the already loaded module object from its internal table (&lt;code&gt;sys.modules&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In summary, importing a library (module) is the fundamental mechanism in Python for accessing and reusing code defined in separate files, allowing programs to be structured as interconnected components. The basic &lt;code&gt;import&lt;/code&gt; statement brings the module into your program&amp;rsquo;s namespace, and you then access its contents using dot notation.&lt;/p&gt;</description></item><item><title>Introduction to the if statement</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.8/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.8/</guid><description>
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement is a very powerful possibility in any programming language, serving as the &lt;strong&gt;main statement used for selecting from alternative actions based on test results&lt;/strong&gt;. It is the primary selection tool in Python and represents much of the logic a Python program possesses. Python uses &lt;code&gt;if&lt;/code&gt; tests to code logic in scripts.&lt;/p&gt;
&lt;p&gt;In simple terms, the Python &lt;code&gt;if&lt;/code&gt; statement selects actions to perform. It evaluates expressions which produce &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; as the outcome, and based on this outcome, you determine which action to take and which statements to execute.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic Syntax and Structure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement is Python&amp;rsquo;s first compound statement. Like all compound Python statements, it consists of a header line followed by an indented body.
The general form begins with the word &lt;code&gt;if&lt;/code&gt;, followed by an expression that is interpreted as a true or false result. The header line ends with a colon (&lt;code&gt;:&lt;/code&gt;).
The block of code to run if the test is true is associated with the header and must be indented. All statements in a nested block must be indented the same amount. In Python, these groups of statements making up a single code block are called suites.&lt;/p&gt;
&lt;p&gt;A simple &lt;code&gt;if&lt;/code&gt; statement looks like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If the boolean expression evaluates to &lt;code&gt;TRUE&lt;/code&gt;, then the block of statement(s) inside the &lt;code&gt;if&lt;/code&gt; statement is executed. If the condition is true, the indented statement runs. There must be at least one statement in the body, or you can use the &lt;code&gt;pass&lt;/code&gt; statement as a placeholder if you don&amp;rsquo;t want any code to execute yet.&lt;/p&gt;
&lt;p&gt;Python assumes any non-zero and non-null values as &lt;code&gt;TRUE&lt;/code&gt;, and any zero or null values as &lt;code&gt;FALSE&lt;/code&gt;. For example, a non-empty string is True, while an empty string is False; a non-zero number is True, while 0.0 is False. This means you can test an object directly (&lt;code&gt;if X:&lt;/code&gt;) instead of comparing it to an empty value (&lt;code&gt;if X != ''&lt;/code&gt;). The built-in words &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are essentially predefined to have the same meanings as integer 1 and 0 respectively.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternative Execution (&lt;code&gt;else&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A second form of the &lt;code&gt;if&lt;/code&gt; statement is &amp;ldquo;alternative execution,&amp;rdquo; which handles the case when the initial condition is false. This is achieved using an optional &lt;code&gt;else&lt;/code&gt; statement.
The &lt;code&gt;else&lt;/code&gt; statement contains a block of code that executes if the conditional expression in the &lt;code&gt;if&lt;/code&gt; statement resolves to &lt;code&gt;FALSE&lt;/code&gt;. The &lt;code&gt;else&lt;/code&gt; part also has an associated block of nested statements, indented under the header line. Exactly one of the alternatives (&lt;code&gt;if&lt;/code&gt; block or &lt;code&gt;else&lt;/code&gt; block) will run.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Executed if expression is TRUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Executed if expression is FALSE&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Chained Conditionals (&lt;code&gt;elif&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes there are more than two possibilities, requiring more than two branches. For this, you can use one or more optional &lt;code&gt;elif&lt;/code&gt; (&amp;ldquo;else if&amp;rdquo;) tests.
The &lt;code&gt;elif&lt;/code&gt; statement allows you to check another condition if the previous &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; conditions were false. Each &lt;code&gt;elif&lt;/code&gt; also has an associated indented block of statements.
The conditions are checked in order from top to bottom. Python executes the block of code associated with the first test that evaluates to true. If one of them is true, the corresponding branch runs and the statement ends. If all &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;elif&lt;/code&gt; tests are false, the optional &lt;code&gt;else&lt;/code&gt; block (if present) is executed.&lt;/p&gt;
&lt;p&gt;The general form with &lt;code&gt;elif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# if test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Associated block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Optional elifs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Optional else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There is no limit on the number of &lt;code&gt;elif&lt;/code&gt; statements. This structure is often the most straightforward way to code a multiway branch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nested Conditionals&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can write an &lt;code&gt;if&lt;/code&gt; statement within another &lt;code&gt;if&lt;/code&gt; statement, or inside another &lt;code&gt;if...elif...else&lt;/code&gt; construct. When code is conditional or repeated, you simply indent it further to the right. This allows for arbitrarily nested logic.&lt;/p&gt;
&lt;p&gt;For example, an &lt;code&gt;if&lt;/code&gt; statement nested in the &lt;code&gt;else&lt;/code&gt; clause of another &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# ... code for even numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# ... code for odd but divisible by 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# ... code for odd and not divisible by 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; parts are associated as part of the same statement because they line up vertically (share the same level of indentation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other &lt;code&gt;if&lt;/code&gt; Statement Variations and Concepts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single Statement Suites&lt;/strong&gt;: If the block of an &lt;code&gt;if&lt;/code&gt; clause is only a single line, it can sometimes go on the same line as the header statement after the colon. This is often seen for simple &lt;code&gt;if&lt;/code&gt; statements with a single test and action. Example: &lt;code&gt;if var == 100 : print (&amp;quot;Value of expression is 100&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison and Logical Operators&lt;/strong&gt;: &lt;code&gt;if&lt;/code&gt; statements use comparison operators (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;) and logical operators (&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;) to form boolean expressions (conditions).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditional Expression (Ternary Operator)&lt;/strong&gt;: For simple assignments or returns based on a condition, Python (since 2.5) offers a concise alternative to the full &lt;code&gt;if/else&lt;/code&gt; statement. The syntax is &lt;code&gt;Y if X else Z&lt;/code&gt;, which evaluates to &lt;code&gt;Y&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is true, and &lt;code&gt;Z&lt;/code&gt; otherwise. It has the exact same effect as a four-line &lt;code&gt;if&lt;/code&gt; statement (&lt;code&gt;if X: A = Y else: A = Z&lt;/code&gt;), but is simpler to code for simple cases. Like the boolean operators, it short-circuits, meaning only the necessary expression (&lt;code&gt;Y&lt;/code&gt; or &lt;code&gt;Z&lt;/code&gt;) is evaluated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pass Statement&lt;/strong&gt;: As mentioned, &lt;code&gt;pass&lt;/code&gt; can be used in an &lt;code&gt;if&lt;/code&gt; block where a statement is syntactically required but you don&amp;rsquo;t want any code to execute yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement is a control-flow statement that allows programs to execute different code depending on the state of the program. It is used in almost every piece of code and is considered a fundamental statement form in Python.&lt;/p&gt;</description></item><item><title>More on Variables, Operators and Expressions</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.4/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.4/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s delve deeper into variables, operators, and expressions in Python, drawing from the sources and our previous conversation.&lt;/p&gt;
&lt;p&gt;Building on our discussion of variables as names that refer to values or objects, these variables are frequently used within &lt;strong&gt;expressions&lt;/strong&gt; and are manipulated by &lt;strong&gt;operators&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt;
In Python, an expression is a combination of values, variables, and operators that the Python interpreter evaluates to produce a result. A simple value or a variable by itself can also be considered an expression. When a variable appears in an expression, it is immediately replaced with the object it currently refers to [Variable&amp;rsquo;s Perspective turn]. Examples of legal expressions include a variable name, a literal value, or combinations using operators. For instance, if &lt;code&gt;n&lt;/code&gt; is a variable holding the value 17, both &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;n + 25&lt;/code&gt; are expressions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operators&lt;/strong&gt;
Operators are constructs that can manipulate the value of operands. Operands are the values on which an operator operates, such as the numbers 4 and 5 in the expression &lt;code&gt;4 + 5&lt;/code&gt;. Python supports various types of operators. The sources categorise them as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Arithmetic Operators&lt;/strong&gt;: These perform mathematical operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; (Addition): Adds values on either side. Also used for string concatenation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; (Subtraction): Subtracts the right operand from the left.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; (Multiplication): Multiplies values. Also used for string repetition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; (Division): Divides the left operand by the right. This operator typically returns a float in Python 3.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt; (Floor Division): Divides and rounds down to the nearest whole number (integer quotient).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; (Modulus): Returns the remainder after division.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; (Exponentiation): Raises the left operand to the power of the right.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Comparison (Relational) Operators&lt;/strong&gt;: These compare values and return a Boolean result (&lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;). You may have encountered these in previous computational thinking studies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; (Equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt; (Not equal to). Note that the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator for inequality was removed in Python 3.0 as it was redundant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; (Greater than)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; (Less than)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; (Greater than or equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; (Less than or equal to)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logical Operators&lt;/strong&gt;: These combine Boolean expressions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;: If both operands are true, the condition becomes true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;: If any of the two operands are non-zero (true), the condition becomes true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt;: Used to reverse the logical state of its operand.
Note that &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators return an object, which is either the left or right operand, rather than always returning a simple &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assignment Operators&lt;/strong&gt;: The most basic is &lt;code&gt;=&lt;/code&gt;, which assigns the value of the right operand to the left operand (a variable). Augmented assignment operators provide a shorthand for performing an operation and assignment simultaneously.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; (Simple assignment)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+=&lt;/code&gt; (Add AND)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-=&lt;/code&gt; (Subtract AND)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*=&lt;/code&gt; (Multiply AND)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/=&lt;/code&gt; (Divide AND)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%=&lt;/code&gt; (Modulus AND)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**=&lt;/code&gt; (Exponent AND)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//=&lt;/code&gt; (Floor Division AND)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Membership Operators&lt;/strong&gt;: These test for membership in sequences (like strings, lists, tuples) or sets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;: Evaluates to true if it finds a variable (or value) in the specified sequence or set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not in&lt;/code&gt;: Evaluates to true if it does not find a variable (or value) in the specified sequence or set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identity Operators&lt;/strong&gt;: These compare the memory locations of two objects to see if they are the same object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt;: Evaluates to true if the operands refer to the same object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is not&lt;/code&gt;: Evaluates to true if the operands do not refer to the same object. It&amp;rsquo;s important to distinguish &lt;code&gt;is&lt;/code&gt; (object identity) from &lt;code&gt;==&lt;/code&gt; (value equality).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bitwise Operators&lt;/strong&gt;: These operate on individual bits. The source briefly mentions that the &lt;code&gt;^&lt;/code&gt; operator is used for bitwise XOR in Python, not exponentiation as in some other languages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other operators mentioned include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indexing (&lt;code&gt;[]&lt;/code&gt;) and Slicing (&lt;code&gt;[::]&lt;/code&gt;) operators for accessing elements or subsequences in sequences (strings, lists, tuples) and mappings (dictionaries). Slicing is considered a sequence operation.&lt;/li&gt;
&lt;li&gt;The Call operator (&lt;code&gt;()&lt;/code&gt;) used to call functions, methods, or instances of classes that are callable.&lt;/li&gt;
&lt;li&gt;The Attribute reference operator (&lt;code&gt;.&lt;/code&gt;) used to access attributes or methods of an object.&lt;/li&gt;
&lt;li&gt;The Ternary Expression (&lt;code&gt;x if y else z&lt;/code&gt;) which provides a concise way to choose between two values based on a condition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lambda args: expression&lt;/code&gt; which creates anonymous functions and is considered an expression.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yield x&lt;/code&gt; used in generator functions, which can sometimes be coded as an expression statement.&lt;/li&gt;
&lt;li&gt;The string formatting operator (&lt;code&gt;%&lt;/code&gt;) and the &lt;code&gt;.format()&lt;/code&gt; string method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Operator Precedence&lt;/strong&gt;
In expressions with multiple operators, the order in which operations are performed is determined by operator precedence. Operators with higher precedence are evaluated before those with lower precedence. Parentheses &lt;code&gt;()&lt;/code&gt; can be used to override the default precedence rules, forcing the expression within the parentheses to be evaluated first. The sources provide a table listing operators and their precedence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;
A powerful feature in Python is operator overloading, which allows objects created with classes to intercept and respond to operations that work on built-in types, such as addition, slicing, or printing. This is achieved by defining special methods (e.g., &lt;code&gt;__add__&lt;/code&gt; for &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;__getitem__&lt;/code&gt; for &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;__str__&lt;/code&gt; for &lt;code&gt;str()&lt;/code&gt;) within a class. Operator overloading allows user-defined objects to support the same expected object interface as built-in types, making them compatible with functions or operations designed for those built-in types. The sources detail many of these special methods that implement operator behaviour.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expression Statements&lt;/strong&gt;
While expressions compute a value, they can also be used as statements, known as expression statements. For example, simply typing a variable name or an expression in the interactive interpreter will cause Python to evaluate and echo its result; this serves as a shorthand for using &lt;code&gt;print&lt;/code&gt; statements. Function calls and method calls are also common forms of expression statements. In Python 3.0, &lt;code&gt;print&lt;/code&gt; itself is a function call, usually coded as an expression statement on a line by itself.&lt;/p&gt;
&lt;p&gt;In essence, expressions combine variables (which refer to objects/values) and operators (which perform manipulations) to compute new values. Understanding the different types of operators, their precedence, and how they interact with various object types is fundamental to writing effective Python code.&lt;/p&gt;</description></item><item><title>String Methods</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.6/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.6/</guid><description>
&lt;p&gt;Based on the sources and our conversation history, let&amp;rsquo;s delve into Python&amp;rsquo;s string methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are String Methods?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;String methods are functions that are specifically associated with string objects in Python. They are described as type-specific operations, distinct from generic sequence operations that work across multiple sequence types like strings, lists, and tuples. Methods are implemented as attributes attached to objects that reference callable functions.&lt;/p&gt;
&lt;p&gt;From an abstract perspective, methods provide behaviour for objects. From a programming perspective, methods work in much the same way as simple functions, except that a method&amp;rsquo;s first argument typically receives the instance object that is the subject of the method call. String methods are generally specific to string objects and typically work only on them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Purpose of String Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Strings are used to record textual information and represent text-based information. While basic operations like concatenation (&lt;code&gt;+&lt;/code&gt;), repetition (&lt;code&gt;*&lt;/code&gt;), indexing (&lt;code&gt;S[i]&lt;/code&gt;), slicing (&lt;code&gt;S[i:j]&lt;/code&gt;), and length (&lt;code&gt;len(S)&lt;/code&gt;) are available as sequence operations for strings and other sequence types, string methods implement more sophisticated text-processing tasks that are specific to strings.&lt;/p&gt;
&lt;p&gt;They serve as the first line of text-processing tools in Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax for Calling String Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Methods are called using &amp;ldquo;dot notation&amp;rdquo; or &amp;ldquo;method syntax&amp;rdquo;. The syntax is &lt;code&gt;object.method(arguments)&lt;/code&gt;.
An expression of the form &lt;code&gt;object.attribute&lt;/code&gt; first fetches the value of the attribute in the object. An expression of the form &lt;code&gt;function(arguments)&lt;/code&gt; invokes the code of the function, passing arguments and returning a result. Combining these, the method call &lt;code&gt;object.method(arguments)&lt;/code&gt; first fetches the method of the object and then calls it, passing in the arguments.
The string object itself is often referred to as the &amp;ldquo;subject&amp;rdquo; of the method invocation.&lt;/p&gt;
&lt;p&gt;For example, instead of a function syntax like &lt;code&gt;upper(word)&lt;/code&gt;, you use the method syntax &lt;code&gt;word.upper()&lt;/code&gt;. The empty parentheses &lt;code&gt;()&lt;/code&gt; indicate that the &lt;code&gt;upper&lt;/code&gt; method takes no arguments. Calling a method is also referred to as an &amp;ldquo;invocation&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String Immutability and Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A key characteristic of Python strings is that they are &lt;strong&gt;immutable&lt;/strong&gt;. This means that the characters they contain cannot be changed in-place.&lt;/p&gt;
&lt;p&gt;Consequently, string methods that appear to modify a string (like &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;lower&lt;/code&gt;) actually return a &lt;em&gt;new&lt;/em&gt; string object containing the result of the operation. The original string object remains unchanged. To effectively &amp;ldquo;change&amp;rdquo; a string, you typically call a method that returns a new string and then assign the result back to the variable name. This behaviour contrasts with many list methods, which can modify the list in-place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Common String Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sources list and describe a variety of common string methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;find(sub[, start[, end]])&lt;/code&gt;&lt;/strong&gt;: Searches for a substring and returns the offset of the first occurrence, or &lt;code&gt;-1&lt;/code&gt; if not found. It can take optional &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; arguments to search within a specific range.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;replace(old, new [, count])&lt;/code&gt;&lt;/strong&gt;: Returns a new string with occurrences of &lt;code&gt;old&lt;/code&gt; replaced by &lt;code&gt;new&lt;/code&gt;. An optional &lt;code&gt;count&lt;/code&gt; limits the number of replacements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;split([sep[, maxsplit]])&lt;/code&gt;&lt;/strong&gt;: Returns a list of substrings by splitting the string around a delimiter (&lt;code&gt;sep&lt;/code&gt;). If &lt;code&gt;sep&lt;/code&gt; is not provided, it splits on whitespace. &lt;code&gt;maxsplit&lt;/code&gt; is an optional argument.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;join(iterable)&lt;/code&gt;&lt;/strong&gt;: A method of strings that takes an iterable (like a list of strings) and concatenates its elements into a single string, using the method&amp;rsquo;s subject string as the separator between elements. This is often faster than concatenating strings individually.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Case Conversions&lt;/strong&gt;: Methods like &lt;code&gt;upper()&lt;/code&gt;, &lt;code&gt;lower()&lt;/code&gt;, &lt;code&gt;swapcase()&lt;/code&gt;, and &lt;code&gt;title()&lt;/code&gt; return new strings with characters converted to uppercase, lowercase, inverted case, or title case respectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whitespace/Character Removal&lt;/strong&gt;: Methods like &lt;code&gt;strip([chars])&lt;/code&gt;, &lt;code&gt;lstrip([chars])&lt;/code&gt;, and &lt;code&gt;rstrip([chars])&lt;/code&gt; return new strings with leading/trailing whitespace (by default) or specified characters removed. &lt;code&gt;strip&lt;/code&gt; performs both left and right stripping.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Tests&lt;/strong&gt;: Methods like &lt;code&gt;isalpha()&lt;/code&gt;, &lt;code&gt;isdigit()&lt;/code&gt;, &lt;code&gt;isalnum()&lt;/code&gt;, &lt;code&gt;isspace()&lt;/code&gt;, &lt;code&gt;istitle()&lt;/code&gt;, &lt;code&gt;isupper()&lt;/code&gt;, etc., check the content of the string and return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prefix/Suffix Tests&lt;/strong&gt;: &lt;code&gt;startswith(prefix [, start [, end]])&lt;/code&gt; and &lt;code&gt;endswith(suffix [, start [, end]])&lt;/code&gt; check if the string begins or ends with a given substring. These can also be achieved with slicing and indexing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;count(sub[, start[, end]])&lt;/code&gt;&lt;/strong&gt;: Counts how many times a substring &lt;code&gt;sub&lt;/code&gt; occurs within the string or a specified substring.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;encode()&lt;/code&gt; and &lt;code&gt;decode()&lt;/code&gt;&lt;/strong&gt;: In Python 3.0, &lt;code&gt;str&lt;/code&gt; objects (Unicode text) have an &lt;code&gt;encode()&lt;/code&gt; method to convert them to &lt;code&gt;bytes&lt;/code&gt; objects, while &lt;code&gt;bytes&lt;/code&gt; objects have a &lt;code&gt;decode()&lt;/code&gt; method to convert them to &lt;code&gt;str&lt;/code&gt; objects. This conversion requires specifying an encoding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not an exhaustive list; there are many more string methods available.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String Formatting Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Besides the older &lt;code&gt;%&lt;/code&gt; formatting expression, Python 2.6 and 3.0 introduced a newer way to format strings using a method call, specifically the &lt;code&gt;.format()&lt;/code&gt; method. This method uses the subject string as a template, with curly braces &lt;code&gt;{}&lt;/code&gt; indicating substitution targets. Values to be substituted can be inserted by position (e.g., &lt;code&gt;{0}&lt;/code&gt;) or keyword (e.g., &lt;code&gt;{food}&lt;/code&gt;). While it largely overlaps with the functionality of formatting expressions, it has some extra features and handles argument passing differently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other Types with Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The concept of methods is used throughout Python. Objects of other core types like lists, dictionaries, and files also have type-specific methods. Even user-defined classes can have methods. Python 3.0 also has &lt;code&gt;bytes&lt;/code&gt; and &lt;code&gt;bytearray&lt;/code&gt; types, which have their own sets of methods, some overlapping with &lt;code&gt;str&lt;/code&gt; and some unique, especially &lt;code&gt;bytearray&lt;/code&gt; which has mutable methods similar to lists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finding and Learning String Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can discover the methods available for a string object by using the built-in &lt;code&gt;dir()&lt;/code&gt; function on a string literal (e.g., &lt;code&gt;dir('')&lt;/code&gt;) or the &lt;code&gt;str&lt;/code&gt; type name (&lt;code&gt;dir(str)&lt;/code&gt;). This returns a list of attributes, including methods. Names starting and ending with double underscores (&lt;code&gt;__&lt;/code&gt;) are related to the implementation and operator overloading and can generally be ignored initially.&lt;/p&gt;
&lt;p&gt;To understand what a specific method does, you can use the built-in &lt;code&gt;help()&lt;/code&gt; function, passing the method itself (e.g., &lt;code&gt;help(S.method)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Remembering all string methods takes time, but you can use resources like the Python library manual, reference books, cheat sheets, or interactive experimentation with &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Historical Note: String Module vs. Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Historically, in older Python versions (prior to 2.0), many common string operations were available as functions in a standard library module called &lt;code&gt;string&lt;/code&gt;. In Python 2.0, these functions were made available as methods of string objects. Although the module was retained for backward compatibility in Python 2.X, the module functions have been entirely removed in Python 3.0. You should use string object methods instead of the old &lt;code&gt;string&lt;/code&gt; module functions today, as methods are generally cleaner (no import needed for basic operations) and faster. The &lt;code&gt;string&lt;/code&gt; module still exists in 3.0 but contains only other tools like predefined constants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String Methods and Pattern Matching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that none of the standard string object methods support pattern-based text processing. For advanced pattern matching, you need to use the &lt;code&gt;re&lt;/code&gt; (regular expression) module from Python&amp;rsquo;s standard library.&lt;/p&gt;</description></item><item><title>Tutorial on if, else and else-if (elif) conditions</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.9/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.9/</guid><description>
&lt;p&gt;Based on the sources and our conversation, the &lt;code&gt;if&lt;/code&gt; statement is a fundamental and powerful tool in Python programming used for &lt;strong&gt;decision making&lt;/strong&gt; or &lt;strong&gt;selecting from alternative actions based on test results&lt;/strong&gt;. It is considered the &lt;strong&gt;primary selection tool in Python&lt;/strong&gt; and represents much of the logic a Python program possesses. The &lt;code&gt;if&lt;/code&gt; statement evaluates expressions that produce &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; outcomes, and based on this outcome, the program determines which statements to execute.&lt;/p&gt;
&lt;p&gt;The concept of &lt;code&gt;if&lt;/code&gt; is part of a core triangle of powerful programming entities, along with &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;, which are crucial for understanding programming completely. The &lt;code&gt;if&lt;/code&gt; statement is used in &lt;strong&gt;almost every piece of code&lt;/strong&gt; and is found in 99 percent of code written.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the &lt;code&gt;if&lt;/code&gt; statement in Python as described in the sources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic &lt;code&gt;if&lt;/code&gt; Statement&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The simplest form consists of the word &lt;code&gt;if&lt;/code&gt;, followed by an expression (the condition) that is interpreted as a true or false result.&lt;/li&gt;
&lt;li&gt;The header line ends with a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;block&lt;/strong&gt; or &lt;strong&gt;suite&lt;/strong&gt; of code follows the header. This block contains the statement(s) to run &lt;strong&gt;if the test is true&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;All statements within this block &lt;strong&gt;must be indented&lt;/strong&gt; the same amount. Indentation is how Python groups statements into blocks; there are no braces or &amp;ldquo;begin/end&amp;rdquo; delimiters like in C-like languages.&lt;/li&gt;
&lt;li&gt;If the boolean expression evaluates to &lt;code&gt;TRUE&lt;/code&gt;, the block of statements is executed. If it&amp;rsquo;s &lt;code&gt;FALSE&lt;/code&gt;, nothing associated with that &lt;code&gt;if&lt;/code&gt; block is executed, and the program continues after the &lt;code&gt;if&lt;/code&gt; statement&amp;rsquo;s block.&lt;/li&gt;
&lt;li&gt;There must be at least one statement in the body, or you can use the &lt;code&gt;pass&lt;/code&gt; statement as a placeholder. &lt;code&gt;pass&lt;/code&gt; is a no-operation placeholder used when syntax requires a statement but you have nothing to do.&lt;/li&gt;
&lt;li&gt;Example syntax:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# indented block&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alternative Execution (&lt;code&gt;else&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;if&lt;/code&gt; statement can be followed by an optional &lt;code&gt;else&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;else&lt;/code&gt; statement contains a block of code that executes &lt;strong&gt;if the conditional expression in the &lt;code&gt;if&lt;/code&gt; statement resolves to &lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;else&lt;/code&gt; part also has an associated block of nested statements, indented under the &lt;code&gt;else:&lt;/code&gt; header.&lt;/li&gt;
&lt;li&gt;Exactly one of the alternatives (&lt;code&gt;if&lt;/code&gt; block or &lt;code&gt;else&lt;/code&gt; block) will run.&lt;/li&gt;
&lt;li&gt;There can be at most one &lt;code&gt;else&lt;/code&gt; statement following an &lt;code&gt;if&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Example syntax:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Executed if expression is TRUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Executed if expression is FALSE&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;An example given is checking if a number is even or odd or calculating a discount based on an amount.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chained Conditionals (&lt;code&gt;elif&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When there are &lt;strong&gt;more than two possibilities&lt;/strong&gt;, you can use one or more optional &lt;code&gt;elif&lt;/code&gt; (&amp;ldquo;else if&amp;rdquo;) tests.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;elif&lt;/code&gt; statement allows you to &lt;strong&gt;check another condition if the previous &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; conditions were false&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;elif&lt;/code&gt; also has an associated indented block of statements.&lt;/li&gt;
&lt;li&gt;The conditions (&lt;code&gt;if&lt;/code&gt;, then &lt;code&gt;elif&lt;/code&gt;s) are checked in order from top to bottom. Python executes the block of code associated with the &lt;strong&gt;first test that evaluates to true&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If one condition is true, its corresponding block runs, and the entire &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statement ends.&lt;/li&gt;
&lt;li&gt;If all &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;elif&lt;/code&gt; tests are false, the optional &lt;code&gt;else&lt;/code&gt; block (if present) is executed.&lt;/li&gt;
&lt;li&gt;There is no limit on the number of &lt;code&gt;elif&lt;/code&gt; statements.&lt;/li&gt;
&lt;li&gt;This structure is the most straightforward way to code a multiway branch. Python does &lt;strong&gt;not have a &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;case&lt;/code&gt; statement&lt;/strong&gt; like some other languages; multiway branching is typically done with &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; or by using dictionaries.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;elif&lt;/code&gt; can make code cleaner compared to nested &lt;code&gt;if&lt;/code&gt; statements, especially when checking ranges of values (like for grading based on marks).&lt;/li&gt;
&lt;li&gt;Example syntax:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# if test, associated block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Optional elif, associated block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# ... more elifs ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Optional else, associated block&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;An example shows checking a variable &lt;code&gt;x&lt;/code&gt; against different values (&amp;lsquo;roger&amp;rsquo;, &amp;lsquo;bugs&amp;rsquo;) using &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;elif&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Truth Tests and Boolean Values&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; statements rely on &lt;strong&gt;truth tests&lt;/strong&gt; or &lt;strong&gt;Boolean expressions&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Python interprets &lt;strong&gt;any non-zero and non-null values as &lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;any zero or null values as &lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. For example, a non-empty string or list is &lt;code&gt;True&lt;/code&gt;, while an empty string (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;), empty list (&lt;code&gt;[]&lt;/code&gt;), empty dictionary (&lt;code&gt;{}&lt;/code&gt;), or the value &lt;code&gt;None&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;. A non-zero number (like &lt;code&gt;1&lt;/code&gt;) is &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;0.0&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This means you can test an object directly (&lt;code&gt;if X:&lt;/code&gt;) instead of comparing it to an empty value (&lt;code&gt;if X != '':&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The built-in values &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are essentially predefined to have the same meanings as integer 1 and 0, respectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison operators&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;) are used to create boolean expressions. They return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logical operators&lt;/strong&gt; (&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;) are used to combine boolean expressions. In Python, these are typed as words. &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; perform &lt;strong&gt;short-circuit evaluation&lt;/strong&gt;. For &lt;code&gt;or&lt;/code&gt;, Python returns the first true operand it finds; for &lt;code&gt;and&lt;/code&gt;, it returns the first false operand. The &lt;code&gt;not&lt;/code&gt; operator negates a boolean expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nested Conditionals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can write an &lt;code&gt;if&lt;/code&gt; statement within another &lt;code&gt;if&lt;/code&gt; statement, or inside another &lt;code&gt;if...elif...else&lt;/code&gt; construct.&lt;/li&gt;
&lt;li&gt;When code is conditional or repeated, you simply indent it further to the right.&lt;/li&gt;
&lt;li&gt;An example shows an &lt;code&gt;if&lt;/code&gt; statement nested in the &lt;code&gt;else&lt;/code&gt; clause of another &lt;code&gt;if&lt;/code&gt; statement. While possible, deeply nested conditionals can become difficult to read.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Statement Suites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the block of an &lt;code&gt;if&lt;/code&gt; clause is only a single line, it can sometimes go on the same line as the header statement after the colon. Example: &lt;code&gt;if var == 100 : print (&amp;quot;Value of expression is 100&amp;quot;)&lt;/code&gt;. This saves an extra line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conditional Expression (Ternary Operator)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For simple cases, Python (since 2.5) offers a concise way to express a simple &lt;code&gt;if/else&lt;/code&gt; that returns or assigns a value.&lt;/li&gt;
&lt;li&gt;The syntax is &lt;code&gt;Y if X else Z&lt;/code&gt;. It evaluates to &lt;code&gt;Y&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is true, and &lt;code&gt;Z&lt;/code&gt; otherwise.&lt;/li&gt;
&lt;li&gt;It has the same effect as a four-line &lt;code&gt;if&lt;/code&gt; statement (&lt;code&gt;if X: A = Y else: A = Z&lt;/code&gt;) but is simpler to code for basic scenarios.&lt;/li&gt;
&lt;li&gt;Like &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;, it short-circuits, evaluating only the necessary expression (&lt;code&gt;Y&lt;/code&gt; or &lt;code&gt;Z&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;It can be used to simplify code, such as in recursive functions or handling default values.&lt;/li&gt;
&lt;li&gt;The sources mention an older &lt;code&gt;and/or&lt;/code&gt; combination that achieved a similar effect but was trickier and less preferred. The &lt;code&gt;Y if X else Z&lt;/code&gt; form is recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, the &lt;code&gt;if&lt;/code&gt; statement and its variations (&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;elif&lt;/code&gt;) are fundamental control-flow statements in Python that allow programs to execute different code paths based on conditions evaluated as true or false. Indentation is critical for defining the blocks of code associated with each part of the statement.&lt;/p&gt;</description></item><item><title>Variables :- A Programmer's Perspective</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.2/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.2/</guid><description>
&lt;p&gt;Understanding variables from a programmer&amp;rsquo;s perspective is fundamental to learning Python. Think of variables as &lt;strong&gt;named storage locations&lt;/strong&gt; in a computer&amp;rsquo;s memory that hold values. They are like containers or baskets where you can put different kinds of &amp;ldquo;stuff&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an easy-to-understand breakdown:&lt;/p&gt;
&lt;h3&gt;What are Variables? 🧺&lt;span class="hx-absolute -hx-mt-20" id="what-are-variables-"&gt;&lt;/span&gt;
&lt;a href="#what-are-variables-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Containers for Values&lt;/strong&gt;: Variables are names that refer to a value. For example, when you write &lt;code&gt;a = 10&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is the variable, and &lt;code&gt;10&lt;/code&gt; is the value it holds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Nature&lt;/strong&gt;: In Python, you &lt;strong&gt;don&amp;rsquo;t need to explicitly declare a variable&amp;rsquo;s type&lt;/strong&gt; before using it. Python automatically determines the data type of the value you assign to it.
&lt;ul&gt;
&lt;li&gt;For instance, if you assign &lt;code&gt;n = 10&lt;/code&gt;, Python recognises &lt;code&gt;n&lt;/code&gt; as an integer (&lt;code&gt;int&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If you then assign &lt;code&gt;n = &amp;quot;Sudarshan&amp;quot;&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; becomes a string (&lt;code&gt;str&lt;/code&gt;). It&amp;rsquo;s like using the same jar in your kitchen to store rice or water – the jar (variable) remains, but its content (value and type) changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutability&lt;/strong&gt;: The values stored in variables &lt;strong&gt;can be changed&lt;/strong&gt; throughout your program. This is why they&amp;rsquo;re called &amp;ldquo;variables&amp;rdquo; – their values can vary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why Use Variables? (A Programmer&amp;rsquo;s Perspective) 🤔&lt;span class="hx-absolute -hx-mt-20" id="why-use-variables-a-programmers-perspective-"&gt;&lt;/span&gt;
&lt;a href="#why-use-variables-a-programmers-perspective-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Programmers use variables for several key reasons that make code more flexible, readable, and maintainable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Self-Explanatory Names&lt;/strong&gt; 🏷️: Instead of using vague names like &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt; for different values, it&amp;rsquo;s a good practice to use names that clearly describe what the variable represents, like &lt;code&gt;ram_bank_balance&lt;/code&gt; or &lt;code&gt;lakshman_loan&lt;/code&gt;. This makes your code much easier to understand, especially when you revisit it later or when others read it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility and Interaction&lt;/strong&gt; 💬: Variables allow your programs to be interactive and dynamic. Instead of hardcoding values directly into your operations (literals), you can store user inputs or changing data in variables. For example, a program asking for a user&amp;rsquo;s name can store it in a &lt;code&gt;name&lt;/code&gt; variable and use it to personalise greetings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt; ♻️: Once a value is assigned to a variable, you can use that variable multiple times in different parts of your code without having to retype the actual value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clarity in Calculations&lt;/strong&gt; 🧮: For values that are constant (like Pi, &lt;code&gt;3.14&lt;/code&gt;), you might use them as literals. However, for values that might change (like the radius of a circle or a person&amp;rsquo;s age), using variables is essential.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How Variables Work with Code: Operations and Concepts 💡&lt;span class="hx-absolute -hx-mt-20" id="how-variables-work-with-code-operations-and-concepts-"&gt;&lt;/span&gt;
&lt;a href="#how-variables-work-with-code-operations-and-concepts-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignment Operator (&lt;code&gt;=&lt;/code&gt;)&lt;/strong&gt;: This is how you give a value to a variable. The value on the right of the &lt;code&gt;=&lt;/code&gt; sign is assigned to the variable on the left.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;age = 30&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using Variables in Expressions&lt;/strong&gt;: Variables can be used in mathematical or other expressions. Python replaces the variable with its current value when the expression is evaluated.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;total = price + tax&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incrementing and Decrementing (Updating Variables)&lt;/strong&gt; 📈📉: A very common operation is to update a variable&amp;rsquo;s value based on its existing value.
&lt;ul&gt;
&lt;li&gt;You can write &lt;code&gt;count = count + 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Python offers a &lt;strong&gt;shorthand operator&lt;/strong&gt; for this: &lt;code&gt;count += 1&lt;/code&gt;. This is equivalent and makes your code more concise. This also applies to other arithmetic operations like multiplication (&lt;code&gt;count *= 2&lt;/code&gt;) or division (&lt;code&gt;count /= 2&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Assignment&lt;/strong&gt; 👯: Python allows you to assign values to multiple variables in a single line.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assigning different values&lt;/strong&gt;: &lt;code&gt;x, y = 1, 2&lt;/code&gt; assigns &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;. The order of values matters here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assigning the same value&lt;/strong&gt;: &lt;code&gt;x = y = z = 10&lt;/code&gt; assigns the value &lt;code&gt;10&lt;/code&gt; to all three variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swapping Values&lt;/strong&gt; 🔄: A neat trick in Python is to swap the values of two variables without needing a temporary variable, using multiple assignment:
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;nudge, wink = wink, nudge&lt;/code&gt;. This internally creates a temporary tuple to hold the values, then assigns them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Variables&lt;/strong&gt;: You can remove a variable from memory using the &lt;code&gt;del&lt;/code&gt; keyword. Once deleted, trying to use it will result in an error.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;del x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Important Concept: Shared References (A &amp;ldquo;Gotcha&amp;rdquo; to Watch Out For!) ⚠️&lt;span class="hx-absolute -hx-mt-20" id="important-concept-shared-references-a-gotcha-to-watch-out-for-"&gt;&lt;/span&gt;
&lt;a href="#important-concept-shared-references-a-gotcha-to-watch-out-for-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When you assign one variable to another, like &lt;code&gt;L2 = L1&lt;/code&gt;, both variables end up &lt;strong&gt;referencing the exact same object&lt;/strong&gt; in memory. This is called a &lt;strong&gt;shared reference&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;immutable&lt;/strong&gt; objects (like numbers, strings, and tuples), this usually isn&amp;rsquo;t an issue because you can&amp;rsquo;t change them in place. If you reassign &lt;code&gt;L1&lt;/code&gt; to a new object, &lt;code&gt;L2&lt;/code&gt; will still point to the original object.&lt;/li&gt;
&lt;li&gt;However, for &lt;strong&gt;mutable&lt;/strong&gt; objects (like lists and dictionaries), if you modify the object through one variable, the changes will be reflected when you access it through the other variable, because they both point to the &lt;em&gt;same&lt;/em&gt; object.
&lt;ul&gt;
&lt;li&gt;Example:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;L1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;L2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;L1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: -- L2 also changed!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;To create a true copy of a mutable object, you often need to use slicing (&lt;code&gt;L2 = L1[:]&lt;/code&gt;) or specific copy methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Common Mistakes with Variables 😅&lt;span class="hx-absolute -hx-mt-20" id="common-mistakes-with-variables-"&gt;&lt;/span&gt;
&lt;a href="#common-mistakes-with-variables-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using Python Keywords&lt;/strong&gt;: You cannot use Python&amp;rsquo;s reserved words (like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;) as variable names. These words have special meaning to the Python interpreter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Invalid Naming Rules&lt;/strong&gt;: Variable names must start with an alphabet (A-Z, a-z) or an underscore (&lt;code&gt;_&lt;/code&gt;). They cannot start with a number (&lt;code&gt;1a&lt;/code&gt; is invalid). They can contain alphanumeric characters and underscores.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Case Sensitivity&lt;/strong&gt;: Python variable names are &lt;strong&gt;case-sensitive&lt;/strong&gt;. &lt;code&gt;roll&lt;/code&gt;, &lt;code&gt;Roll&lt;/code&gt;, and &lt;code&gt;ROLL&lt;/code&gt; are treated as three distinct variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using Unassigned Variables&lt;/strong&gt;: You must assign a value to a variable &lt;strong&gt;before&lt;/strong&gt; you can use it in an expression. Trying to use an unassigned variable will result in a &lt;code&gt;NameError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Literals on the Left&lt;/strong&gt;: You cannot assign a value to a literal (e.g., &lt;code&gt;30 = 30 + 1&lt;/code&gt; or &lt;code&gt;42 = n&lt;/code&gt;). The left side of an assignment must be a variable name or something that can be assigned to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confusing Assignment and Equality&lt;/strong&gt;: Remember that &lt;code&gt;=&lt;/code&gt; is for assignment, while &lt;code&gt;==&lt;/code&gt; is for checking if two values are equal.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What is a variable in Python, in simple terms?&lt;/li&gt;
&lt;li&gt;Which of the following are valid Python variable names, and why?
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_my_variable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1st_number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;totalAmount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explain the difference between &lt;code&gt;x = 5&lt;/code&gt; and &lt;code&gt;y = x&lt;/code&gt;. If you then run &lt;code&gt;x = 10&lt;/code&gt;, what will be the value of &lt;code&gt;y&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;You have a list &lt;code&gt;my_list =&lt;/code&gt;. If you then say &lt;code&gt;another_list = my_list&lt;/code&gt;, and later &lt;code&gt;another_list.append(4)&lt;/code&gt;, what will &lt;code&gt;my_list&lt;/code&gt; contain? Why?&lt;/li&gt;
&lt;li&gt;How would you swap the values of two variables, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, in a single line of Python code?&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers 📜&lt;span class="hx-absolute -hx-mt-20" id="answers-"&gt;&lt;/span&gt;
&lt;a href="#answers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;A variable in Python is like a named container or label in the computer&amp;rsquo;s memory that holds a value. Its value can be changed, and Python automatically figures out the type of data it holds.&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_my_variable&lt;/code&gt;: &lt;strong&gt;Valid&lt;/strong&gt; ✅. Starts with an underscore and uses alphanumeric characters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1st_number&lt;/code&gt;: &lt;strong&gt;Invalid&lt;/strong&gt; ❌. Variable names cannot start with a number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;totalAmount&lt;/code&gt;: &lt;strong&gt;Valid&lt;/strong&gt; ✅. Uses only alphanumeric characters and starts with an alphabet. Python variable names are case-sensitive, so &lt;code&gt;totalAmount&lt;/code&gt; is different from &lt;code&gt;totalamount&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;: &lt;strong&gt;Invalid&lt;/strong&gt; ❌. &lt;code&gt;if&lt;/code&gt; is a reserved keyword in Python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price$&lt;/code&gt;: &lt;strong&gt;Invalid&lt;/strong&gt; ❌. Variable names can only contain alphanumeric characters and underscores. The &lt;code&gt;$&lt;/code&gt; symbol is not allowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x = 5&lt;/code&gt;: This assigns the integer value &lt;code&gt;5&lt;/code&gt; to the variable named &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y = x&lt;/code&gt;: This assigns the value currently held by &lt;code&gt;x&lt;/code&gt; (which is &lt;code&gt;5&lt;/code&gt;) to the variable named &lt;code&gt;y&lt;/code&gt;. At this point, both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; hold the value &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you then run &lt;code&gt;x = 10&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is reassigned to a new value, &lt;code&gt;10&lt;/code&gt;. &lt;strong&gt;The value of &lt;code&gt;y&lt;/code&gt; will remain &lt;code&gt;5&lt;/code&gt;&lt;/strong&gt;. This is because numbers (integers) are immutable; changing &lt;code&gt;x&lt;/code&gt; to refer to a new object &lt;code&gt;10&lt;/code&gt; does not affect &lt;code&gt;y&lt;/code&gt; which still refers to the original object &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you say &lt;code&gt;my_list =&lt;/code&gt;, and then &lt;code&gt;another_list = my_list&lt;/code&gt;, both &lt;code&gt;my_list&lt;/code&gt; and &lt;code&gt;another_list&lt;/code&gt; are pointing to (referencing) the &lt;strong&gt;same list object&lt;/strong&gt; in memory.
&lt;ul&gt;
&lt;li&gt;When you then execute &lt;code&gt;another_list.append(4)&lt;/code&gt;, you are modifying the shared list object in place.&lt;/li&gt;
&lt;li&gt;Therefore, &lt;code&gt;my_list&lt;/code&gt; will contain ``.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To swap the values of two variables, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, in a single line, you can use Python&amp;rsquo;s multiple assignment feature:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a, b = b, a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This is a concise and common Pythonic way to swap variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Variables Revisited:- Dynamic Typing</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.3/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-2/lec2.3/</guid><description>
&lt;p&gt;Let&amp;rsquo;s dive into &amp;ldquo;Variables Revisited - Dynamic Typing&amp;rdquo; in Python! 🐍&lt;/p&gt;
&lt;h3&gt;Variables Revisited: Dynamic Typing ✨&lt;span class="hx-absolute -hx-mt-20" id="variables-revisited-dynamic-typing-"&gt;&lt;/span&gt;
&lt;a href="#variables-revisited-dynamic-typing-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In Python, variables are quite flexible, which is a key concept known as &lt;strong&gt;dynamic typing&lt;/strong&gt;. Unlike some other programming languages where you have to explicitly state what &lt;em&gt;type&lt;/em&gt; of data a variable will hold (like &amp;ldquo;this variable will always hold numbers&amp;rdquo;), Python figures out the type of data automatically at runtime.&lt;/p&gt;
&lt;p&gt;Imagine a variable as a &lt;strong&gt;label&lt;/strong&gt; 🏷️ or a &lt;strong&gt;basket&lt;/strong&gt; 🧺. You can put different &lt;em&gt;types&lt;/em&gt; of &amp;ldquo;stuff&amp;rdquo; (values) into the same basket at different times.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how it works in detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Types Live with Objects, Not Variables&lt;/strong&gt; 🧠&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you assign a value to a variable, Python doesn&amp;rsquo;t attach the data type to the variable name itself. Instead, the &lt;strong&gt;type information is stored with the object&lt;/strong&gt; (the actual value) in memory.&lt;/li&gt;
&lt;li&gt;For example, if you say &lt;code&gt;A = 10&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; is a variable, and &lt;code&gt;10&lt;/code&gt; is an integer object. If you then say &lt;code&gt;A = &amp;quot;India&amp;quot;&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; now refers to a string object. The variable &lt;code&gt;A&lt;/code&gt; itself didn&amp;rsquo;t change its type; it just started &lt;strong&gt;referencing a different object&lt;/strong&gt; that has a different type. It&amp;rsquo;s like using the same jar for rice, then later for water – the jar remains, but its content and content type change.&lt;/li&gt;
&lt;li&gt;This &amp;ldquo;dynamic typing&amp;rdquo; offers &lt;strong&gt;flexibility&lt;/strong&gt; for you to use a variable for an integer and then later make it a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Variables, Objects, and References&lt;/strong&gt; 🔗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you assign a value (e.g., &lt;code&gt;a = 3&lt;/code&gt;), Python performs three steps:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Creates an object&lt;/strong&gt; to represent the value (e.g., the integer &lt;code&gt;3&lt;/code&gt;). These objects are pieces of allocated memory with space for their value and header fields like a type designator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Creates the variable&lt;/strong&gt; (e.g., &lt;code&gt;a&lt;/code&gt;), if it doesn&amp;rsquo;t already exist. Variables are just &lt;strong&gt;names&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Links the variable to the new object&lt;/strong&gt;. These links are called &lt;strong&gt;references&lt;/strong&gt;. Variables always link to objects, not other variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When you use a variable in an expression, it&amp;rsquo;s immediately replaced with the object it currently refers to.&lt;/li&gt;
&lt;li&gt;Variables are created automatically when they are first assigned values. They do not need to be declared ahead of time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutability and Shared References (The &amp;ldquo;Gotcha&amp;rdquo; ⚠️)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A crucial concept tied to dynamic typing is &lt;strong&gt;shared references&lt;/strong&gt;. When you assign one variable to another (e.g., &lt;code&gt;B = A&lt;/code&gt;), both variables end up &lt;strong&gt;referencing the exact same object&lt;/strong&gt; in memory.&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;immutable&lt;/strong&gt; objects (like numbers 🔢, strings 📜, and tuples 🪢), this usually isn&amp;rsquo;t an issue. If you reassign &lt;code&gt;A&lt;/code&gt; to a &lt;em&gt;new&lt;/em&gt; object, &lt;code&gt;B&lt;/code&gt; will still point to the &lt;em&gt;original&lt;/em&gt; object. This is because immutable objects cannot be changed in-place. Operations on them, like string concatenation (&lt;code&gt;S + 'xyz'&lt;/code&gt;), create &lt;em&gt;new&lt;/em&gt; string objects rather than modifying the original.&lt;/li&gt;
&lt;li&gt;However, for &lt;strong&gt;mutable&lt;/strong&gt; objects (like lists 📝 and dictionaries 📖), if you modify the object through &lt;em&gt;one&lt;/em&gt; variable, the changes will be visible when you access it through the &lt;em&gt;other&lt;/em&gt; variable, because they both point to the &lt;em&gt;same&lt;/em&gt; object. This is a common pitfall.
&lt;ul&gt;
&lt;li&gt;Example: If &lt;code&gt;L1 =&lt;/code&gt; and &lt;code&gt;L2 = L1&lt;/code&gt;, then &lt;code&gt;L1&lt;/code&gt; and &lt;code&gt;L2&lt;/code&gt; refer to the same list. If you do &lt;code&gt;L2.append(4)&lt;/code&gt;, &lt;code&gt;L1&lt;/code&gt; will also show ``.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You must be careful about using mutable objects in multiple-target assignments (e.g., &lt;code&gt;a = b = []&lt;/code&gt;) or augmented assignments (e.g., &lt;code&gt;a +=&lt;/code&gt;), as in-place changes may affect other variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why use dynamic typing?&lt;/strong&gt; 🤔&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It leads to &lt;strong&gt;less code&lt;/strong&gt; for you to write.&lt;/li&gt;
&lt;li&gt;It enables &lt;strong&gt;polymorphism&lt;/strong&gt;, where the same operation (like &lt;code&gt;*&lt;/code&gt;) can mean different things (multiplication for numbers, repetition for strings), depending on the objects involved. This makes Python code highly &lt;strong&gt;flexible&lt;/strong&gt; and adaptable.&lt;/li&gt;
&lt;li&gt;Python has &lt;strong&gt;automatic memory management&lt;/strong&gt; (&amp;ldquo;garbage collection&amp;rdquo;), which reclaims objects when they are no longer used, so you don&amp;rsquo;t have to manage low-level memory details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Variable Operations&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignment Operator (&lt;code&gt;=&lt;/code&gt;)&lt;/strong&gt;: Assigns a value to a variable. The left side must be a variable name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updating Variables&lt;/strong&gt;: New value depends on the old (&lt;code&gt;x = x + 1&lt;/code&gt;). This is called an &lt;strong&gt;increment&lt;/strong&gt; if adding, or &lt;strong&gt;decrement&lt;/strong&gt; if subtracting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Augmented Assignment Operators (&lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, etc.)&lt;/strong&gt;: A shorthand for updating variables (e.g., &lt;code&gt;count += 1&lt;/code&gt; is equivalent to &lt;code&gt;count = count + 1&lt;/code&gt;). They make code concise and often run faster by performing in-place updates for mutable objects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Assignment&lt;/strong&gt; 👯: Assign values to multiple variables in one line.
&lt;ul&gt;
&lt;li&gt;Different values: &lt;code&gt;x, y = 1, 2&lt;/code&gt;. The sequence of values on the right is important.&lt;/li&gt;
&lt;li&gt;Same value: &lt;code&gt;x = y = z = 10&lt;/code&gt;. All variables refer to the &lt;em&gt;same&lt;/em&gt; object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swapping Values&lt;/strong&gt;: A common use of multiple assignment is to swap variable values without a temporary variable (e.g., &lt;code&gt;nudge, wink = wink, nudge&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Variables&lt;/strong&gt;: Use the &lt;code&gt;del&lt;/code&gt; keyword to remove a variable from memory. After deletion, the variable is &amp;ldquo;not defined&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;What is the core idea of &amp;ldquo;dynamic typing&amp;rdquo; in Python? How does it differ from &amp;ldquo;static typing&amp;rdquo; in other languages?&lt;/li&gt;
&lt;li&gt;Consider the following Python code:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
What will be printed? Explain why, relating it to variable references and object immutability.&lt;/li&gt;
&lt;li&gt;Now consider this code:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
What will be printed? Explain why, relating it to shared references and object mutability.&lt;/li&gt;
&lt;li&gt;You have a variable &lt;code&gt;score = 50&lt;/code&gt;. How would you use an augmented assignment operator to increase its value by 10?&lt;/li&gt;
&lt;li&gt;Is &lt;code&gt;20 = x + 5&lt;/code&gt; a valid assignment in Python? Why or why not?&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Answers 📜&lt;span class="hx-absolute -hx-mt-20" id="answers-"&gt;&lt;/span&gt;
&lt;a href="#answers-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;The core idea of &lt;strong&gt;dynamic typing&lt;/strong&gt; in Python is that &lt;strong&gt;you do not need to explicitly declare the data type of a variable before using it&lt;/strong&gt;. Python automatically determines the data type of the value assigned to a variable at runtime. This is different from &amp;ldquo;static typing&amp;rdquo; (found in languages like C++ or Java), where you &lt;em&gt;must&lt;/em&gt; declare the variable&amp;rsquo;s type (e.g., &lt;code&gt;int age;&lt;/code&gt; or &lt;code&gt;String name;&lt;/code&gt;) before you can assign a value to it, and that variable can &lt;em&gt;only&lt;/em&gt; hold values of that declared type. In Python, the type lives with the object, not the variable.&lt;/li&gt;
&lt;li&gt;The code will print: &lt;code&gt;dog&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Initially, &lt;code&gt;pet&lt;/code&gt; is assigned the string &lt;code&gt;&amp;quot;dog&amp;quot;&lt;/code&gt;, and &lt;code&gt;animal&lt;/code&gt; is assigned the value of &lt;code&gt;pet&lt;/code&gt;, so both variables &lt;code&gt;pet&lt;/code&gt; and &lt;code&gt;animal&lt;/code&gt; refer to the same string object &lt;code&gt;&amp;quot;dog&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Strings in Python are &lt;strong&gt;immutable&lt;/strong&gt;. This means their value cannot be changed after they are created.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;pet = &amp;quot;cat&amp;quot;&lt;/code&gt; is executed, a &lt;em&gt;new&lt;/em&gt; string object &lt;code&gt;&amp;quot;cat&amp;quot;&lt;/code&gt; is created, and the variable &lt;code&gt;pet&lt;/code&gt; is &lt;em&gt;reassigned&lt;/em&gt; to refer to this new object. The variable &lt;code&gt;animal&lt;/code&gt; still refers to the &lt;em&gt;original&lt;/em&gt; string object &lt;code&gt;&amp;quot;dog&amp;quot;&lt;/code&gt;. Therefore, printing &lt;code&gt;animal&lt;/code&gt; yields &lt;code&gt;&amp;quot;dog&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The code will print: ``
&lt;ul&gt;
&lt;li&gt;Initially, &lt;code&gt;list1&lt;/code&gt; is assigned a list object ``. When &lt;code&gt;list2 = list1&lt;/code&gt; is executed, both &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; become &lt;strong&gt;shared references&lt;/strong&gt; to the &lt;em&gt;same&lt;/em&gt; list object in memory.&lt;/li&gt;
&lt;li&gt;Lists in Python are &lt;strong&gt;mutable&lt;/strong&gt;. This means their contents &lt;em&gt;can&lt;/em&gt; be changed in-place.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;list2.append(4)&lt;/code&gt; is called, the &lt;code&gt;append()&lt;/code&gt; method modifies the actual list object that &lt;code&gt;list2&lt;/code&gt; refers to. Since &lt;code&gt;list1&lt;/code&gt; refers to the &lt;em&gt;exact same object&lt;/em&gt;, the change is reflected when &lt;code&gt;list1&lt;/code&gt; is printed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You would use the augmented assignment operator &lt;code&gt;+=&lt;/code&gt;:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# This is equivalent to score = score + 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 60&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
This is a shorthand operator that is concise and often quicker to run.&lt;/li&gt;
&lt;li&gt;No, &lt;code&gt;20 = x + 5&lt;/code&gt; is &lt;strong&gt;not a valid assignment&lt;/strong&gt; in Python.
&lt;ul&gt;
&lt;li&gt;The left side of an assignment operator (&lt;code&gt;=&lt;/code&gt;) must be a &lt;strong&gt;variable name&lt;/strong&gt; (or something that can be assigned to, like a list element or dictionary key), not a literal value or an expression.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;20&lt;/code&gt; is a &lt;strong&gt;literal&lt;/strong&gt; integer value. You cannot assign a value &lt;em&gt;to&lt;/em&gt; a literal. Python would raise a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Introduction to while loop</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.2/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.2/</guid><description>
&lt;p&gt;Alright, let&amp;rsquo;s dive into the world of &lt;code&gt;while&lt;/code&gt; loops in Python! 🐍💻&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; loop is a powerful tool in programming used to repeat a block of code multiple times. It&amp;rsquo;s particularly useful when you need the computer to perform an action over and over again.&lt;/p&gt;
&lt;p&gt;Think of it like telling Python: &amp;ldquo;Keep doing this thing &lt;strong&gt;while&lt;/strong&gt; a certain condition is true&amp;rdquo; ✨. This is different from an &lt;code&gt;if&lt;/code&gt; statement, which only checks a condition once and performs an action &lt;em&gt;if&lt;/em&gt; it&amp;rsquo;s true. A &lt;code&gt;while&lt;/code&gt; loop, on the other hand, &lt;em&gt;continues&lt;/em&gt; to repeat its actions as long as the condition remains true.&lt;/p&gt;
&lt;p&gt;One key situation where you&amp;rsquo;ll often choose a &lt;code&gt;while&lt;/code&gt; loop is when &lt;strong&gt;you don&amp;rsquo;t know in advance how many times you need to repeat something&lt;/strong&gt; 🤔. For example, if you want to keep asking a user for input until they type a specific word like &amp;ldquo;stop&amp;rdquo;, or calculating the number of digits in a number, a &lt;code&gt;while&lt;/code&gt; loop is a great fit because you can&amp;rsquo;t predict how many attempts or digits there will be beforehand. In contrast, a &lt;code&gt;for&lt;/code&gt; loop is often preferred when you &lt;em&gt;do&lt;/em&gt; know the number of iterations required, like repeating something exactly 10 times. The &lt;code&gt;while&lt;/code&gt; loop is considered a more general way of executing repetitive tasks.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the basic structure of a &lt;code&gt;while&lt;/code&gt; loop in Python:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;condition_is_true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This block of code will repeat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# as long as the condition is true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Make sure something in here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# eventually makes the condition false!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s break down the parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;while&lt;/code&gt; keyword&lt;/strong&gt;: This tells Python you&amp;rsquo;re starting a while loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: This is an expression that Python checks before each repetition. It evaluates to either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. The loop keeps running &lt;em&gt;only&lt;/em&gt; as long as this condition is &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colon &lt;code&gt;:&lt;/code&gt;&lt;/strong&gt;: Just like with &lt;code&gt;if&lt;/code&gt; statements, compound statements like &lt;code&gt;while&lt;/code&gt; loops require a colon at the end of the header line. Forgetting the colon is noted as a very common coding mistake for beginners.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indented block&lt;/strong&gt;: The lines of code that are indented directly below the &lt;code&gt;while&lt;/code&gt; header make up the &lt;strong&gt;loop body&lt;/strong&gt;. These are the statements that get executed repeatedly. Python uses indentation to define blocks of code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python first checks if the &lt;code&gt;condition_is_true&lt;/code&gt; is actually &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it&amp;rsquo;s &lt;code&gt;True&lt;/code&gt;, Python executes all the statements in the indented block. After executing the last statement in the block, Python jumps back up to the &lt;code&gt;while&lt;/code&gt; line and checks the &lt;code&gt;condition_is_true&lt;/code&gt; again.&lt;/li&gt;
&lt;li&gt;If the condition is now &lt;code&gt;False&lt;/code&gt;, Python skips the indented block entirely and moves on to execute the statement immediately following the &lt;code&gt;while&lt;/code&gt; loop (the first line that is &lt;em&gt;not&lt;/em&gt; indented under the &lt;code&gt;while&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If the condition is initially &lt;code&gt;False&lt;/code&gt; when the loop is first encountered, the loop body is never executed at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important Note: Avoiding Infinite Loops&lt;/strong&gt; ⚠️&lt;/p&gt;
&lt;p&gt;A critical part of writing a &lt;code&gt;while&lt;/code&gt; loop is making sure that something inside the loop body changes the condition so that it will eventually become &lt;code&gt;False&lt;/code&gt;. If the condition &lt;em&gt;never&lt;/em&gt; becomes &lt;code&gt;False&lt;/code&gt;, the loop will repeat forever, which is called an &lt;strong&gt;infinite loop&lt;/strong&gt; 🔄. This can cause your program to hang or become unresponsive.&lt;/p&gt;
&lt;p&gt;You might also encounter statements like &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; within loops. &lt;code&gt;break&lt;/code&gt; allows you to immediately exit the loop entirely, while &lt;code&gt;continue&lt;/code&gt; lets you skip the rest of the current iteration and jump straight back to the top to check the condition again for the next iteration. There is also an optional &lt;code&gt;else&lt;/code&gt; clause for &lt;code&gt;while&lt;/code&gt; loops that runs if the loop finishes normally (without hitting a &lt;code&gt;break&lt;/code&gt; statement).&lt;/p&gt;
&lt;p&gt;Learning to program, especially understanding concepts like loops, takes patience and practice. It might seem complex at first, and you might find yourself needing to review examples multiple times to grasp what&amp;rsquo;s happening. Using tools like a pen and paper to diagram the flow of execution can be very helpful. But with time and practice, it will become much easier! 😊👍&lt;/p&gt;</description></item><item><title>While loop to Compute Factorial</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.3/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.3/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s write some Python code to calculate the factorial of a number using a &lt;code&gt;while&lt;/code&gt; loop! 😊 As we discussed before, the &lt;code&gt;while&lt;/code&gt; loop is great for repeating actions as long as a condition is true ✨. It&amp;rsquo;s particularly useful when you don&amp;rsquo;t know exactly how many times you need to repeat something beforehand.&lt;/p&gt;
&lt;p&gt;Calculating the factorial of a number means multiplying all positive integers less than or equal to that number down to 1. For example, the factorial of 5 (written as 5!) is 5 * 4 * 3 * 2 * 1 = 120. The sources mention this concept and show how to implement it in code.&lt;/p&gt;
&lt;p&gt;Here is a basic Python code snippet that uses a &lt;code&gt;while&lt;/code&gt; loop to compute the factorial of a positive integer:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We first get a number from the user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We use int(input(...)) to make sure the input is an integer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Enter a non-negative integer: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We need a variable to store the result of the factorial&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Factorial of 0 is 1, so we initialise it to 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We also need a variable that will change in the loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# and help us count down from the number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Let&amp;#39;s start with the number itself&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Now, the while loop!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We keep multiplying as long as &amp;#39;i&amp;#39; is greater than 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Multiply the current factorial by the current value of i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# We are building up the factorial step by step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This is the *crucial* step for a while loop! 👇&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# We must decrease i in each repetition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This makes sure the condition &amp;#39;i &amp;gt; 0&amp;#39; will eventually become False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# If we don&amp;#39;t change i, the loop would run forever (infinite loop! ⚠️)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# This can also be written as i -= 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Once the condition &amp;#39;i &amp;gt; 0&amp;#39; is False (when i becomes 0), the loop stops&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# The code execution continues here, outside the loop body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We print the final result! 🎉&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The factorial of&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We might want to add a check for negative numbers, as factorial is not defined for them&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Let&amp;#39;s put the core logic inside an else block for that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Here is a more complete version including the check for negative numbers:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Enter a non-negative integer: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Check if the number is negative&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Factorial is not defined for negative numbers.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Factorial of 0 is 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The factorial of 0 is 1&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="c1"&gt;# Start the counter from the number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Continue as long as the counter is positive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="c1"&gt;# Multiply the factorial by the current counter value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Decrease the counter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The factorial of&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s break down how the &lt;code&gt;while&lt;/code&gt; loop works in this code:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Initialization:&lt;/strong&gt; We start with &lt;code&gt;num&lt;/code&gt; (the number the user entered), &lt;code&gt;factorial&lt;/code&gt; set to 1 (because 1 is the base case for multiplication), and &lt;code&gt;i&lt;/code&gt; set to &lt;code&gt;num&lt;/code&gt;. &lt;code&gt;i&lt;/code&gt; is our counter that we&amp;rsquo;ll use to control the loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Condition Check:&lt;/strong&gt; The &lt;code&gt;while i &amp;gt; 0:&lt;/code&gt; line checks if the value of &lt;code&gt;i&lt;/code&gt; is currently greater than 0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loop Body Execution:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;i&lt;/code&gt; is greater than 0 (the condition is &lt;code&gt;True&lt;/code&gt;), the code inside the &lt;code&gt;while&lt;/code&gt; loop (the indented lines) is executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;factorial = factorial * i&lt;/code&gt; takes the current value of &lt;code&gt;factorial&lt;/code&gt;, multiplies it by the current value of &lt;code&gt;i&lt;/code&gt;, and stores the result back in the &lt;code&gt;factorial&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i = i - 1&lt;/code&gt; decreases the value of &lt;code&gt;i&lt;/code&gt; by 1. This is essential! It moves &lt;code&gt;i&lt;/code&gt; closer to 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loop Repetition:&lt;/strong&gt; After the last indented line is executed, Python goes back up to the &lt;code&gt;while&lt;/code&gt; line and checks the condition &lt;code&gt;i &amp;gt; 0&lt;/code&gt; again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Termination:&lt;/strong&gt; Steps 3 and 4 repeat as long as &lt;code&gt;i&lt;/code&gt; is greater than 0. When &lt;code&gt;i&lt;/code&gt; finally becomes 0, the condition &lt;code&gt;i &amp;gt; 0&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;. At this point, the &lt;code&gt;while&lt;/code&gt; loop stops executing. Python then moves on to the first line of code that is &lt;em&gt;not&lt;/em&gt; indented under the &lt;code&gt;while&lt;/code&gt; (the &lt;code&gt;print&lt;/code&gt; statement).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using a &lt;code&gt;while&lt;/code&gt; loop for factorial is suitable here because, while we could technically use a &lt;code&gt;for&lt;/code&gt; loop with a range, the &lt;code&gt;while&lt;/code&gt; loop highlights the concept of repeating an action (multiplication and decrementing a counter) &lt;em&gt;while&lt;/em&gt; a condition (&lt;code&gt;i &amp;gt; 0&lt;/code&gt;) remains true. The sources note that &lt;code&gt;while&lt;/code&gt; is a more general looping tool.&lt;/p&gt;
&lt;p&gt;Remember, programming takes practice! Don&amp;rsquo;t worry if it seems a bit tricky at first. Trying out the code and even drawing diagrams of how the variables change can help you understand what&amp;rsquo;s happening inside the loop. Keep practising, and you&amp;rsquo;ll get the hang of it! 😊👍&lt;/p&gt;</description></item><item><title>Tutorial on while loop</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.4/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.4/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s dive deeper into the &lt;strong&gt;&lt;code&gt;while&lt;/code&gt; loop&lt;/strong&gt;! 😊 It&amp;rsquo;s a really fundamental concept in programming for making your computer do repetitive tasks.&lt;/p&gt;
&lt;p&gt;Think of the &lt;code&gt;while&lt;/code&gt; loop like setting a condition for Python and telling it: &amp;ldquo;&lt;strong&gt;Keep doing this set of actions ✨ as long as this condition remains true&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is different from an &lt;code&gt;if&lt;/code&gt; statement, which checks a condition just &lt;em&gt;once&lt;/em&gt;. A &lt;code&gt;while&lt;/code&gt; loop keeps checking the condition and repeating its work. The code inside the loop will execute over and over again as long as the condition is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A key reason to choose a &lt;code&gt;while&lt;/code&gt; loop is often when &lt;strong&gt;you don&amp;rsquo;t know beforehand exactly how many times you need to repeat something&lt;/strong&gt; 🤔. For example, if you want to keep asking a user for input until they type a specific word like &amp;ldquo;stop&amp;rdquo;, a &lt;code&gt;while&lt;/code&gt; loop is perfect because you don&amp;rsquo;t know how many tries it will take. In contrast, a &lt;code&gt;for&lt;/code&gt; loop is often used when you &lt;em&gt;do&lt;/em&gt; know the number of repetitions, like repeating something exactly 10 times. The sources describe &lt;code&gt;while&lt;/code&gt; as a more general way of executing repetitive tasks compared to &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the basic structure, or &lt;strong&gt;syntax&lt;/strong&gt;, of a &lt;code&gt;while&lt;/code&gt; loop in Python:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;condition_is_true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This block of code is the &amp;#39;loop body&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# It gets repeated while the condition is True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Remember, these lines must be indented! 👇&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Something here MUST change so the condition eventually becomes False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# ... other statements ...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s break down the parts based on the sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;while&lt;/code&gt; keyword&lt;/strong&gt;: This keyword signals the start of a while loop. It is one of the reserved words in Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Condition (or &lt;code&gt;expression&lt;/code&gt;)&lt;/strong&gt;: This is a test that Python checks before each repetition of the loop. It needs to evaluate to either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. The loop continues only if this condition is &lt;code&gt;True&lt;/code&gt;. Any non-zero value is considered &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colon &lt;code&gt;:&lt;/code&gt;&lt;/strong&gt;: Just like with other compound statements such as &lt;code&gt;if&lt;/code&gt;, a colon is needed at the end of the &lt;code&gt;while&lt;/code&gt; line. Forgetting the colon is noted as a common coding mistake for beginners.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indented block&lt;/strong&gt;: The lines of code that are indented directly below the &lt;code&gt;while&lt;/code&gt; header form the &lt;strong&gt;loop body&lt;/strong&gt;. These are the statements that are repeatedly executed. Python uses indentation to define these blocks of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How the &lt;code&gt;while&lt;/code&gt; loop works (Flow of Execution)&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python checks the &lt;code&gt;condition_is_true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the condition is &lt;code&gt;False&lt;/code&gt;, the loop body is skipped entirely, and execution continues at the first statement &lt;em&gt;after&lt;/em&gt; the indented block. If the condition is initially false, the loop body is never run.&lt;/li&gt;
&lt;li&gt;If the condition is &lt;code&gt;True&lt;/code&gt;, Python executes all the statements in the indented block (the loop body).&lt;/li&gt;
&lt;li&gt;After executing the last statement in the loop body, Python jumps back up to the &lt;code&gt;while&lt;/code&gt; line and checks the &lt;code&gt;condition_is_true&lt;/code&gt; again. This repeats from step 2.
This process is often called &lt;strong&gt;iteration&lt;/strong&gt; or &lt;strong&gt;looping&lt;/strong&gt; because it repeats.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Crucially: Avoiding Infinite Loops&lt;/strong&gt; ⚠️🔄&lt;/p&gt;
&lt;p&gt;It is absolutely &lt;strong&gt;essential&lt;/strong&gt; that something inside the &lt;code&gt;while&lt;/code&gt; loop&amp;rsquo;s body changes a variable used in the condition, so that the condition will eventually become &lt;code&gt;False&lt;/code&gt;. If the condition never becomes &lt;code&gt;False&lt;/code&gt;, the loop will run forever, which is called an &lt;strong&gt;infinite loop&lt;/strong&gt;. This can make your program unresponsive. You must be cautious when using &lt;code&gt;while&lt;/code&gt; loops because of this possibility.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Useful Statements Inside Loops&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;You can also use special statements within loops to control their execution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;break&lt;/code&gt;&lt;/strong&gt;: This statement immediately exits the current loop entirely. The program continues execution at the first statement &lt;em&gt;after&lt;/em&gt; the loop. &lt;code&gt;break&lt;/code&gt; can sometimes help avoid nesting. Using &lt;code&gt;while True&lt;/code&gt; with a &lt;code&gt;break&lt;/code&gt; inside is a common pattern for loops where the exit condition is checked somewhere in the middle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/strong&gt;: This statement skips the rest of the current iteration of the loop and immediately jumps back to the top to check the condition again (for a &lt;code&gt;while&lt;/code&gt; loop). It can also help avoid nesting in some cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/strong&gt;: This is an empty statement that does nothing. It&amp;rsquo;s sometimes used as a placeholder where a statement is syntactically required but you don&amp;rsquo;t want to do anything yet. It&amp;rsquo;s not tied only to loops but is often discussed with &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;. &lt;code&gt;while True: pass&lt;/code&gt; would be an infinite loop that does nothing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;else&lt;/code&gt; clause&lt;/strong&gt;: &lt;code&gt;while&lt;/code&gt; loops (and &lt;code&gt;for&lt;/code&gt; loops) in Python can have an optional &lt;code&gt;else&lt;/code&gt; clause. The code in the &lt;code&gt;else&lt;/code&gt; block is executed &lt;em&gt;only&lt;/em&gt; if the loop finishes normally, without hitting a &lt;code&gt;break&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learning programming, including understanding loops, takes patience and practice. It might seem confusing at first. Looking back at examples and trying them yourself multiple times can help. Using tools like a pen and paper to draw diagrams of how your variables change step-by-step inside the loop can be very helpful.&lt;/p&gt;
&lt;p&gt;We recently looked at calculating the factorial of a number using a &lt;code&gt;while&lt;/code&gt; loop in our conversation. That was a great example of using the loop to repeat the multiplication and decrementing a counter (&lt;code&gt;i = i - 1&lt;/code&gt;) until the condition (&lt;code&gt;i &amp;gt; 0&lt;/code&gt;) became false, ensuring the loop terminated correctly.&lt;/p&gt;
&lt;p&gt;Keep practising, and you&amp;rsquo;ll master &lt;code&gt;while&lt;/code&gt; loops! 😊👍&lt;/p&gt;</description></item><item><title>Introduction to for loop</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.5/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.5/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s introduce the &lt;strong&gt;&lt;code&gt;for&lt;/code&gt; loop&lt;/strong&gt;! 😊 It&amp;rsquo;s another super useful tool in Python for making your computer repeat things ✨, just like the &lt;code&gt;while&lt;/code&gt; loop we discussed.&lt;/p&gt;
&lt;p&gt;While the &lt;code&gt;while&lt;/code&gt; loop is great for repeating actions &lt;strong&gt;as long as a condition is true&lt;/strong&gt;, the &lt;code&gt;for&lt;/code&gt; loop is typically used for two main scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you know &lt;strong&gt;exactly how many times&lt;/strong&gt; you want to repeat something.&lt;/li&gt;
&lt;li&gt;When you want to go through (or &lt;strong&gt;iterate over&lt;/strong&gt;) &lt;strong&gt;each item&lt;/strong&gt; in a sequence or collection, like a string, list, or tuple.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Think of the &lt;code&gt;for&lt;/code&gt; loop as saying to Python: &amp;ldquo;&lt;strong&gt;For each item in this collection&lt;/strong&gt;, or &lt;strong&gt;for each number in this range, do this set of actions&lt;/strong&gt;&amp;rdquo;. It automates the process of moving from one item or step to the next.&lt;/p&gt;
&lt;p&gt;Here is the basic structure, or &lt;strong&gt;syntax&lt;/strong&gt;, of a &lt;code&gt;for&lt;/code&gt; loop in Python:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This block of code is the &amp;#39;loop body&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# It gets repeated for each &amp;#39;item&amp;#39; in the &amp;#39;collection&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Remember, these lines must be indented! 👇&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Inside the loop, the &amp;#39;item&amp;#39; variable holds the current item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# ... other statements ...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s break down the parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt; keyword&lt;/strong&gt;: Signals the start of a &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; (or &lt;code&gt;item&lt;/code&gt;)&lt;/strong&gt;: This is a variable name you choose. In each repetition (or iteration), Python automatically assigns the &lt;em&gt;next&lt;/em&gt; item from the &lt;code&gt;collection&lt;/code&gt; to this variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt; keyword&lt;/strong&gt;: Connects the target variable to the collection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; (or &lt;code&gt;collection&lt;/code&gt;)&lt;/strong&gt;: This is the sequence or iterable object that the loop will go through. It could be a string, a list, a tuple, or anything that is &amp;ldquo;iterable&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colon &lt;code&gt;:&lt;/code&gt;&lt;/strong&gt;: Required at the end of the &lt;code&gt;for&lt;/code&gt; line. Forgetting it is a very common beginner mistake.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indented block&lt;/strong&gt;: The statements that are repeated. They must be indented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How the &lt;code&gt;for&lt;/code&gt; loop works (Flow of Execution)&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python gets the first item from the &lt;code&gt;collection&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It assigns this item to the &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;It executes the code in the indented loop body.&lt;/li&gt;
&lt;li&gt;After the body finishes, Python goes back to the top of the loop and gets the &lt;em&gt;next&lt;/em&gt; item from the &lt;code&gt;collection&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Steps 2-4 repeat for every item in the &lt;code&gt;collection&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once there are no more items left in the &lt;code&gt;collection&lt;/code&gt;, the loop finishes, and execution continues at the first line &lt;em&gt;after&lt;/em&gt; the indented block.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Common Ways to Use &lt;code&gt;for&lt;/code&gt; Loops&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Looping a fixed number of times&lt;/strong&gt; using &lt;code&gt;range()&lt;/code&gt;: The &lt;code&gt;range()&lt;/code&gt; function generates a sequence of numbers.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Repeat something 5 times&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# i will take values 0, 1, 2, 3, 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello! 👋&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This line runs 5 times&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;code&gt;range()&lt;/code&gt; can also start from a different number (&lt;code&gt;range(1, 11)&lt;/code&gt;) or count in steps (&lt;code&gt;range(0, 10, 2)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterating directly over a sequence&lt;/strong&gt; (sometimes called &amp;ldquo;for each&amp;rdquo;):
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Go through each character in the string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;letter&amp;#39; will be &amp;#39;P&amp;#39;, then &amp;#39;y&amp;#39;, then &amp;#39;t&amp;#39;, etc.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
This is often simpler and more direct than using a &lt;code&gt;while&lt;/code&gt; loop with manual indexing for traversing sequences.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is a &amp;ldquo;generic sequence iterator&amp;rdquo; and is generally simpler to code and sometimes quicker for stepping through sequences compared to a &lt;code&gt;while&lt;/code&gt; loop. It is part of the &amp;ldquo;iteration protocol&amp;rdquo; in Python which many tools use.&lt;/p&gt;
&lt;p&gt;Learning programming concepts like loops takes practice. Don&amp;rsquo;t hesitate to write out code, try small examples, or even draw diagrams on paper to trace how variables change during the loop.&lt;/p&gt;
&lt;p&gt;Happy coding! 😊👍&lt;/p&gt;</description></item><item><title>for loop to add the first n numbers</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.6/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.6/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s use a &lt;strong&gt;&lt;code&gt;for&lt;/code&gt; loop&lt;/strong&gt; to add up the first &amp;rsquo;n&amp;rsquo; numbers! 🤩 This is a classic programming task that helps you see how loops can automate repetition for calculations.&lt;/p&gt;
&lt;p&gt;Remember how we introduced the &lt;code&gt;for&lt;/code&gt; loop? It&amp;rsquo;s great for when you want to do something a specific number of times or go through items in a sequence ✨. To add the first &amp;rsquo;n&amp;rsquo; numbers, we know exactly how many times we need to add: &amp;rsquo;n&amp;rsquo; times!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the goal: We want to calculate the sum, like 0 + 1 + 2 + 3 + &amp;hellip; + (n-1) (if we start from 0) or 1 + 2 + 3 + &amp;hellip; + n (if we start from 1). Let&amp;rsquo;s follow an example from the sources which adds 0 through 9, resulting in 45.&lt;/p&gt;
&lt;p&gt;To do this with a &lt;code&gt;for&lt;/code&gt; loop, we need two main things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An &lt;strong&gt;accumulator&lt;/strong&gt; variable: This is a variable that will start at 0 and &amp;ldquo;accumulate&amp;rdquo; or collect the sum as we go along. Think of it like an empty bucket 🪣 that you drop numbers into one by one. We often call this variable &lt;code&gt;sum&lt;/code&gt; or &lt;code&gt;answer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A way to generate the numbers we want to add (0, 1, 2, &amp;hellip; up to n-1 or 1, 2, &amp;hellip; up to n). The &lt;strong&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/strong&gt; function is perfect for this! 🔢.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s the basic code structure based on the sources:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 1. Initialize the accumulator bucket! 🪣&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# Start the sum at zero&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 2. Use a for loop with range() to get the numbers 🔢&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# range(10) gives numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 3. Inside the loop, add the current number (i) to the accumulator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="c1"&gt;# Or the shorthand: answer += i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This line runs for each number produced by range()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 4. After the loop finishes (no more numbers in the range),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# the &amp;#39;answer&amp;#39; variable holds the final sum. 🎉&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Display the result&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s trace what happens step-by-step when the loop runs for &lt;code&gt;range(10)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before the loop: &lt;code&gt;answer&lt;/code&gt; is 0.&lt;/li&gt;
&lt;li&gt;Loop starts. The &lt;code&gt;for&lt;/code&gt; loop gives the first number from &lt;code&gt;range(10)&lt;/code&gt; to the variable &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Iteration 1: &lt;code&gt;i&lt;/code&gt; becomes 0.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 0 + 0&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 2: &lt;code&gt;i&lt;/code&gt; becomes 1.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 0 + 1&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 3: &lt;code&gt;i&lt;/code&gt; becomes 2.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 1 + 2&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 4: &lt;code&gt;i&lt;/code&gt; becomes 3.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 3 + 3&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 5: &lt;code&gt;i&lt;/code&gt; becomes 4.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 6 + 4&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 6: &lt;code&gt;i&lt;/code&gt; becomes 5.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 10 + 5&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 15.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 7: &lt;code&gt;i&lt;/code&gt; becomes 6.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 15 + 6&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 21.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 8: &lt;code&gt;i&lt;/code&gt; becomes 7.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 21 + 7&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 28.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 9: &lt;code&gt;i&lt;/code&gt; becomes 8.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 28 + 8&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 36.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iteration 10: &lt;code&gt;i&lt;/code&gt; becomes 9.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;answer = answer + i&lt;/code&gt; becomes &lt;code&gt;answer = 36 + 9&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; is now 45.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(10)&lt;/code&gt; is exhausted (it only goes up to 9). The loop finishes.&lt;/li&gt;
&lt;li&gt;The code after the loop runs. &lt;code&gt;print(answer)&lt;/code&gt; displays 45! ✅.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This demonstrates how the &lt;code&gt;for&lt;/code&gt; loop, combined with &lt;code&gt;range()&lt;/code&gt;, makes adding a sequence of numbers much easier and more efficient than doing it manually. It&amp;rsquo;s a fundamental pattern you&amp;rsquo;ll use frequently in programming! 💪😊&lt;/p&gt;</description></item><item><title>for loop for multiplication tables</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.7/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.7/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s create a &lt;strong&gt;multiplication table&lt;/strong&gt; using a &lt;code&gt;for&lt;/code&gt; loop! ✨ This is a perfect example to show how a &lt;code&gt;for&lt;/code&gt; loop helps automate tasks we&amp;rsquo;d otherwise have to repeat manually.&lt;/p&gt;
&lt;p&gt;Imagine you want to print the multiplication table for a number, say 5. You&amp;rsquo;d normally do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 times 1 equals 5&lt;/li&gt;
&lt;li&gt;5 times 2 equals 10&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;5 times 10 equals 50&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing all those lines manually would be tedious! 😩 But with a &lt;code&gt;for&lt;/code&gt; loop, we can tell the computer: &amp;ldquo;&lt;strong&gt;For each number&lt;/strong&gt; from 1 to 10, calculate and print the result of multiplying our number by that number.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s why a &lt;code&gt;for&lt;/code&gt; loop is a great choice for this task: we &lt;strong&gt;know exactly how many times&lt;/strong&gt; we need to repeat the multiplication – 10 times (for multiplying by 1 through 10). When the number of iterations is known, the &lt;code&gt;for&lt;/code&gt; loop is generally more suitable than a &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use the &lt;strong&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/strong&gt; function again! 🔢 Remember, &lt;code&gt;range()&lt;/code&gt; generates a sequence of numbers.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the basic code structure for a multiplication table, drawing from the sources:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Let&amp;#39;s pick a number for the table 🍎&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We need to multiply &amp;#39;num&amp;#39; by numbers 1 through 10.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# range(1, 11) will give us the numbers 1, 2, 3, ..., 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# The variable &amp;#39;i&amp;#39; will be 1, then 2, then 3, ... up to 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Inside the loop, for each value of &amp;#39;i&amp;#39;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Calculate the result: num multiplied by the current value of i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Print the line of the table. We can use formatted printing for a nice output!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This line runs 10 times!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# After the loop finishes (i.e., range(1, 11) is exhausted), the program continues here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Finished printing the table! 👍&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s trace what happens in the loop:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The variable &lt;code&gt;num&lt;/code&gt; is set to 5.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;for&lt;/code&gt; loop starts, using &lt;code&gt;range(1, 11)&lt;/code&gt;. This generates numbers starting from 1 and going up to (but not including) 11. So, &lt;code&gt;i&lt;/code&gt; will take values 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First Iteration:&lt;/strong&gt; &lt;code&gt;i&lt;/code&gt; is 1.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;result&lt;/code&gt; is calculated as &lt;code&gt;num * i&lt;/code&gt; which is &lt;code&gt;5 * 1&lt;/code&gt;, so &lt;code&gt;result&lt;/code&gt; is 5.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(f&amp;quot;{num} times {i} is {result}&amp;quot;)&lt;/code&gt; prints &amp;ldquo;5 times 1 is 5&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second Iteration:&lt;/strong&gt; &lt;code&gt;i&lt;/code&gt; is 2.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;result&lt;/code&gt; is calculated as &lt;code&gt;num * i&lt;/code&gt; which is &lt;code&gt;5 * 2&lt;/code&gt;, so &lt;code&gt;result&lt;/code&gt; is 10.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(f&amp;quot;{num} times {i} is {result}&amp;quot;)&lt;/code&gt; prints &amp;ldquo;5 times 2 is 10&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This continues for every number generated by &lt;code&gt;range(1, 11)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Last Iteration:&lt;/strong&gt; &lt;code&gt;i&lt;/code&gt; is 10.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;result&lt;/code&gt; is calculated as &lt;code&gt;num * i&lt;/code&gt; which is &lt;code&gt;5 * 10&lt;/code&gt;, so &lt;code&gt;result&lt;/code&gt; is 50.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(f&amp;quot;{num} times {i} is {result}&amp;quot;)&lt;/code&gt; prints &amp;ldquo;5 times 10 is 50&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(1, 11)&lt;/code&gt; has no more numbers. The loop finishes.&lt;/li&gt;
&lt;li&gt;The code after the loop runs: &lt;code&gt;print(&amp;quot;Finished printing the table! 👍&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way, the &lt;code&gt;for&lt;/code&gt; loop automatically handles going through each number (1 to 10) and performing the multiplication and printing for us! 🎉 It replaces the need to write 10 separate &lt;code&gt;print&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;range(start, stop)&lt;/code&gt; is shown in the sources to specify the starting and ending points for the loop. If we had used &lt;code&gt;range(10)&lt;/code&gt; as in some basic examples, &lt;code&gt;i&lt;/code&gt; would go from 0 to 9, which might not be what we want for a standard multiplication table. &lt;code&gt;range(1, 11)&lt;/code&gt; correctly gives us the numbers 1 through 10.&lt;/p&gt;
&lt;p&gt;Just like calculating factorial or adding numbers, multiplication tables are a clear instance where the predictable number of steps makes the &lt;code&gt;for&lt;/code&gt; loop with &lt;code&gt;range()&lt;/code&gt; the perfect tool. You can easily adapt this code to print the table for any number by changing the value of the &lt;code&gt;num&lt;/code&gt; variable. 👍&lt;/p&gt;</description></item><item><title>More on range and for loop wihout range</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.8/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.8/</guid><description>
&lt;p&gt;Right, let&amp;rsquo;s dive deeper into the &lt;code&gt;range()&lt;/code&gt; function and explore a cool alternative way to use &lt;code&gt;for&lt;/code&gt; loops, drawing from the video &amp;ldquo;More on range and for loop without range&amp;rdquo; and our previous chats about loops! 😊&lt;/p&gt;
&lt;p&gt;As we&amp;rsquo;ve discussed, &lt;strong&gt;&lt;code&gt;for&lt;/code&gt; loops are excellent for repetitive tasks&lt;/strong&gt;. They&amp;rsquo;re often used when you know how many times you need to repeat something or when you want to go through items in a sequence. The &lt;strong&gt;&lt;code&gt;range()&lt;/code&gt; function&lt;/strong&gt; is a very common tool to use &lt;em&gt;with&lt;/em&gt; &lt;code&gt;for&lt;/code&gt; loops to generate a sequence of numbers.&lt;/p&gt;
&lt;h3&gt;More on &lt;code&gt;range()&lt;/code&gt; 🔢&lt;span class="hx-absolute -hx-mt-20" id="more-on-range-"&gt;&lt;/span&gt;
&lt;a href="#more-on-range-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ve seen &lt;code&gt;range(10)&lt;/code&gt; which gives you numbers from 0 up to (but not including) 10, i.e., 0, 1, 2, &amp;hellip;, 9.
The &amp;ldquo;More on range&amp;rdquo; part of the video explains that &lt;code&gt;range()&lt;/code&gt; can take more than one argument, allowing you to control where the sequence starts and how it increments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;range(start, stop)&lt;/code&gt;&lt;/strong&gt;: This generates numbers starting from &lt;code&gt;start&lt;/code&gt; and going up to, but &lt;em&gt;not including&lt;/em&gt;, &lt;code&gt;stop&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;range(1, 11)&lt;/code&gt; generates numbers from 1 up to (not including) 11. This gives you 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. This is super useful, like when we made the multiplication table starting from 1 times the number.&lt;/li&gt;
&lt;li&gt;Another example from the sources is &lt;code&gt;range(5, 11)&lt;/code&gt; which starts at 5 and goes up to 10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;range(start, stop, step)&lt;/code&gt;&lt;/strong&gt;: This adds a third argument, &lt;code&gt;step&lt;/code&gt;, which controls how much the number increases (or decreases) each time. The default step is 1.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to count down, you can use a negative step!. For instance, &lt;code&gt;range(9, -1, -1)&lt;/code&gt; would start at 9, go down to -1 (stopping &lt;em&gt;before&lt;/em&gt; -1, so it includes 0), decrementing by 1 each time. This would give you 9, 8, 7, 6, 5, 4, 3, 2, 1, 0.&lt;/li&gt;
&lt;li&gt;You can also use a step like -2 to get odd numbers in reverse order or a positive step like 2 to skip items.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;code&gt;range()&lt;/code&gt; like this with a &lt;code&gt;for&lt;/code&gt; loop is one way to create loops that count or iterate through indexes.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;for&lt;/code&gt; loop Without &lt;code&gt;range()&lt;/code&gt; ✨&lt;span class="hx-absolute -hx-mt-20" id="for-loop-without-range-"&gt;&lt;/span&gt;
&lt;a href="#for-loop-without-range-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The video then introduces a way to use a &lt;code&gt;for&lt;/code&gt; loop &lt;strong&gt;without using &lt;code&gt;range()&lt;/code&gt;&lt;/strong&gt;. This might seem surprising at first, as many examples show &lt;code&gt;for i in range(...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, a &lt;code&gt;for&lt;/code&gt; loop is actually a &lt;strong&gt;generic sequence iterator&lt;/strong&gt;. This means it can step through the items of &lt;em&gt;any&lt;/em&gt; sequence object, not just the numbers generated by &lt;code&gt;range()&lt;/code&gt;. Sequences include strings, lists, and tuples.&lt;/p&gt;
&lt;p&gt;This alternative usage is sometimes called a &lt;strong&gt;&amp;ldquo;for each&amp;rdquo; loop&lt;/strong&gt;. Instead of the loop variable taking numbers from &lt;code&gt;range()&lt;/code&gt;, it directly takes each &lt;em&gt;item&lt;/em&gt; from the sequence you provide, one by one, until there are no more items left in the sequence.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the example from the source:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;India&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Here&amp;#39;s our sequence (a string) 🇮🇳&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Use a for loop directly on the string!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;letter&amp;#39; will take each character&amp;#39;s value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Print the current character&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# I&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s trace this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;for&lt;/code&gt; loop starts, looking at the &lt;code&gt;country&lt;/code&gt; string &amp;ldquo;India&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First iteration:&lt;/strong&gt; The variable &lt;code&gt;letter&lt;/code&gt; is assigned the first character of &amp;ldquo;India&amp;rdquo;, which is &amp;lsquo;I&amp;rsquo;. The code inside the loop runs, printing &amp;lsquo;I&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second iteration:&lt;/strong&gt; &lt;code&gt;letter&lt;/code&gt; is assigned the next character, &amp;rsquo;n&amp;rsquo;. The loop body runs, printing &amp;rsquo;n&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;This continues for &amp;rsquo;d&amp;rsquo;, &amp;lsquo;i&amp;rsquo;, and &amp;lsquo;a&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Last iteration:&lt;/strong&gt; &lt;code&gt;letter&lt;/code&gt; is assigned the last character, &amp;lsquo;a&amp;rsquo;. The loop body runs, printing &amp;lsquo;a&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;There are no more characters in the string. The loop finishes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The video points out that this &lt;code&gt;for letter in country&lt;/code&gt; code is a more efficient and easier-to-write way to achieve the same result as writing multiple &lt;code&gt;print(country[index])&lt;/code&gt; lines manually. It automatically handles going through each item without you needing to manage an index variable or use &lt;code&gt;range(len(country))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;for&lt;/code&gt; loop is Python&amp;rsquo;s primary tool for iterating over sequences.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range()&lt;/code&gt; is often used with &lt;code&gt;for&lt;/code&gt; to generate sequences of numbers, and it has flexible &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt; arguments.&lt;/li&gt;
&lt;li&gt;You can also use a &lt;code&gt;for&lt;/code&gt; loop directly on sequences like strings, lists, or tuples, without &lt;code&gt;range()&lt;/code&gt;. The loop variable takes the value of each item in the sequence turn by turn. This &amp;ldquo;for each&amp;rdquo; style is often preferred when you just need the items themselves and not their numerical index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Understanding these different ways to use &lt;code&gt;for&lt;/code&gt; loops makes them incredibly powerful for handling repetitive tasks with collections of data! 💪&lt;/p&gt;</description></item><item><title>Formatted Printing</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.9/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.9/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s talk about &lt;strong&gt;Formatted Printing&lt;/strong&gt; in Python! ✨ This is a really neat way to make your output look exactly how you want it, combining regular text with the values stored in your variables. Think of it like filling in blanks in a sentence or arranging data neatly in columns. 📝&lt;/p&gt;
&lt;p&gt;Why do we need it? When you use the basic &lt;code&gt;print()&lt;/code&gt; function, it often just puts spaces between items and moves to the next line. But what if you want things joined together, lined up, or numbers shown with a specific number of decimal places? 🤔 That&amp;rsquo;s where formatted printing comes in! It&amp;rsquo;s especially useful when you&amp;rsquo;re printing things repeatedly, like inside a loop.&lt;/p&gt;
&lt;p&gt;The sources describe a few different ways to achieve formatted printing, evolving through Python versions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Old Way: Using the &lt;code&gt;%&lt;/code&gt; (String Modulo) Operator&lt;/strong&gt; 🕰️&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This method is described as an &amp;ldquo;old way&amp;rdquo; of writing print statements, similar to the &lt;code&gt;printf&lt;/code&gt; function in the C programming language.&lt;/li&gt;
&lt;li&gt;You start with a &lt;strong&gt;format string&lt;/strong&gt; on the left side of the &lt;code&gt;%&lt;/code&gt; operator. This string contains &lt;strong&gt;conversion targets&lt;/strong&gt; or &lt;strong&gt;format sequences&lt;/strong&gt; that start with a &lt;code&gt;%&lt;/code&gt; (like &lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%f&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;On the right side of the &lt;code&gt;%&lt;/code&gt;, you provide the object(s) (variable values) you want to insert into the string.&lt;/li&gt;
&lt;li&gt;If you have &lt;em&gt;more than one&lt;/em&gt; object to insert, you group them in parentheses (a tuple) on the right side.&lt;/li&gt;
&lt;li&gt;The conversion target tells Python how to format the object:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt;: String (can work for &lt;em&gt;any&lt;/em&gt; object type because everything can be converted to a string).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt;: Decimal (integer).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt;: Floating-point decimal.&lt;/li&gt;
&lt;li&gt;There are many others for things like hex (&lt;code&gt;%x&lt;/code&gt;, &lt;code&gt;%X&lt;/code&gt;), octal (&lt;code&gt;%o&lt;/code&gt;), exponential notation (&lt;code&gt;%e&lt;/code&gt;, &lt;code&gt;%E&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can add flags and specifications &lt;em&gt;within&lt;/em&gt; the conversion target to control things like width, alignment, precision, and padding. For example, &lt;code&gt;%.2f&lt;/code&gt; formats a float with exactly 2 digits after the decimal point. &lt;code&gt;%06d&lt;/code&gt; formats an integer with zero padding to a width of 6 characters.&lt;/li&gt;
&lt;li&gt;You can even refer to items by dictionary keys: &lt;code&gt;&amp;quot;%(name)s&amp;quot; % {'name': 'value'}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Example using the &lt;code&gt;%&lt;/code&gt; operator:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;apples&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Using %s for string, %d for integer, %.2f for float with 2 decimal places&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;I bought &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; for $&lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Objects in a tuple!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: I bought 3 apples for $1.25.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;This method is powerful but can be less readable when you have many substitutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;.format()&lt;/code&gt; Method&lt;/strong&gt; ✨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduced in Python 2.6 and 3.0, this is described as a potentially &amp;ldquo;more powerful alternative&amp;rdquo; to the &lt;code&gt;%&lt;/code&gt; operator. Some see it as more &amp;ldquo;Python-specific&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;You call the &lt;code&gt;.format()&lt;/code&gt; method &lt;em&gt;on&lt;/em&gt; the string that serves as your template.&lt;/li&gt;
&lt;li&gt;Placeholders are defined using curly braces &lt;code&gt;{}&lt;/code&gt; within the string.&lt;/li&gt;
&lt;li&gt;The values to substitute are passed as arguments to the &lt;code&gt;.format()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;You can refer to arguments by their position (starting from 0) like &lt;code&gt;{0}, {1}, {2}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can also refer to arguments by keyword names like &lt;code&gt;{motto}, {food}&lt;/code&gt; if you pass them as keyword arguments (e.g., &lt;code&gt;format(motto='spam', food='eggs')&lt;/code&gt;). You can even mix positional and keyword references.&lt;/li&gt;
&lt;li&gt;Similar to the &lt;code&gt;%&lt;/code&gt; operator, you can add format specifications inside the curly braces after a colon &lt;code&gt;:&lt;/code&gt;, e.g., &lt;code&gt;{0:.2f}&lt;/code&gt;, &lt;code&gt;{name:&amp;gt;10}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It supports accessing dictionary keys (&lt;code&gt;{1[spam]}&lt;/code&gt;) and object attributes (&lt;code&gt;{0.platform}&lt;/code&gt;) within the placeholders.&lt;/li&gt;
&lt;li&gt;Example using the &lt;code&gt;.format()&lt;/code&gt; method:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;bananas&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Using {} with positional arguments and format specifiers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;I bought &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; for $&lt;/span&gt;&lt;span class="si"&gt;{:.2f}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Arguments passed directly&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: I bought 5 bananas for $0.50.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Using {} with keyword arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;output_kw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;I bought &lt;/span&gt;&lt;span class="si"&gt;{c}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{i}&lt;/span&gt;&lt;span class="s2"&gt; for $&lt;/span&gt;&lt;span class="si"&gt;{p:.2f}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: I bought 5 bananas for $0.50.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.format()&lt;/code&gt; method always returns a &lt;em&gt;new&lt;/em&gt; string; it doesn&amp;rsquo;t change the original string because strings are immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Newest Way: f-strings (Formatted String Literals)&lt;/strong&gt; 🎉&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sources introduce this as &amp;ldquo;f print&amp;rdquo; and describe it as an &amp;ldquo;easier manner&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;You create an f-string by putting the letter &lt;code&gt;f&lt;/code&gt; right before the opening quote of the string literal.&lt;/li&gt;
&lt;li&gt;Inside the string, you place variable names or even simple expressions directly inside curly braces &lt;code&gt;{}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Python automatically replaces the variable/expression inside &lt;code&gt;{}&lt;/code&gt; with its actual value when the string is created.&lt;/li&gt;
&lt;li&gt;This method also supports the same powerful format specifiers as the &lt;code&gt;.format()&lt;/code&gt; method after a colon &lt;code&gt;:&lt;/code&gt; inside the curly braces.&lt;/li&gt;
&lt;li&gt;Example using f-strings:
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;cherries&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Using f-string with variables directly in {} and format specifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I bought &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for $&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Just put the variable inside!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: I bought 10 cherries for $0.15.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Can even do calculations inside {}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;total_cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;output_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The total cost for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is $&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;total_cost&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: The total cost for 10 cherries is $1.50.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;This is often considered the most readable and convenient method for many cases today.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Relationship with &lt;code&gt;print&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function (in Python 3.0+) or statement (in Python 2.6) is what actually displays output to the screen. When you use formatted printing, you are typically creating a single, well-formatted string first, and then passing that single string to the &lt;code&gt;print&lt;/code&gt; function/statement. For example, &lt;code&gt;print(f&amp;quot;...&amp;quot;)&lt;/code&gt; or &lt;code&gt;print(&amp;quot;...&amp;quot;.format(...))&lt;/code&gt; or &lt;code&gt;print(&amp;quot;%...&amp;quot; % ...)&lt;/code&gt; all work by creating the string and then printing the string.&lt;/p&gt;
&lt;p&gt;For basic printing of multiple items without specific formatting, &lt;code&gt;print()&lt;/code&gt; in Python 3.0+ automatically converts each object to a string using &lt;code&gt;str()&lt;/code&gt;, adds a space between them by default (&lt;code&gt;sep=' '&lt;/code&gt;), and adds a newline at the end (&lt;code&gt;end='\n'&lt;/code&gt;). You can change &lt;code&gt;sep&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt;. But for more complex formatting, you need one of the string formatting methods we discussed. In Python 2.6, printing multiple items separated by commas would print them as a tuple, so using string formatting was often necessary for portable code.&lt;/p&gt;
&lt;p&gt;So, formatted printing gives you powerful tools to control how your variables and text are combined and displayed, making your program&amp;rsquo;s output clear and professional looking! ✨&lt;/p&gt;</description></item><item><title>break, continue and pass</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.13/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.13/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s talk about the &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;pass&lt;/code&gt; statements in Python! These are special keywords that give you more control inside your loops (and &lt;code&gt;pass&lt;/code&gt; has other uses too!). Think of them as little commands you can give the loop as it&amp;rsquo;s running.&lt;/p&gt;
&lt;p&gt;They are often used when you&amp;rsquo;re inside a loop but want to change its normal flow based on some condition, usually checked with an &lt;code&gt;if&lt;/code&gt; statement. The sources tell us that these keywords have meaning &lt;em&gt;only&lt;/em&gt; when used inside loops, including nested loops.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what each one does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;break&lt;/code&gt;&lt;/strong&gt; 💥🚪&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imagine your loop is going through a list of tasks, and suddenly, something happens that means you need to &lt;strong&gt;stop the entire loop immediately&lt;/strong&gt;. That&amp;rsquo;s when you use &lt;code&gt;break&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When the computer encounters &lt;code&gt;break&lt;/code&gt;, it &lt;strong&gt;jumps completely out&lt;/strong&gt; of the loop it&amp;rsquo;s currently inside. It skips any remaining code in the loop&amp;rsquo;s body for the current iteration, and it skips all future iterations of that loop. Execution then continues with the first statement &lt;em&gt;after&lt;/em&gt; the loop.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s like an &amp;ldquo;exit loop&amp;rdquo; command from computational thinking.&lt;/li&gt;
&lt;li&gt;If you have &lt;strong&gt;nested loops&lt;/strong&gt; (a loop inside a loop), &lt;code&gt;break&lt;/code&gt; &lt;strong&gt;only exits the innermost loop&lt;/strong&gt; it&amp;rsquo;s in. The outer loop would then continue from where it left off.&lt;/li&gt;
&lt;li&gt;Example: Stopping when you find the &lt;code&gt;@&lt;/code&gt; in an email.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;xyz123@iitm.in&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Loop through each character&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# If we see the &amp;#39;@&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Found the &amp;#39;@&amp;#39;! Breaking the loop.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- Emergency exit! 🚪&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Current character: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This prints only if break wasn&amp;#39;t hit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Loop finished.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Found the &amp;#39;@&amp;#39;! Breaking the loop.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Loop finished.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Note: If a loop has an optional &lt;code&gt;else&lt;/code&gt; block, that &lt;code&gt;else&lt;/code&gt; block is &lt;strong&gt;skipped&lt;/strong&gt; if the loop is exited via &lt;code&gt;break&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/strong&gt; ⏭️&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think of this as saying, &amp;ldquo;Okay, I&amp;rsquo;m done with &lt;em&gt;this specific time&lt;/em&gt; through the loop. Go to the next one!&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;When the computer sees &lt;code&gt;continue&lt;/code&gt;, it &lt;strong&gt;skips the rest of the code&lt;/strong&gt; in the current loop iteration. It immediately jumps back to the &lt;strong&gt;top&lt;/strong&gt; of the loop.&lt;/li&gt;
&lt;li&gt;For a &lt;code&gt;while&lt;/code&gt; loop, it re-tests the condition. For a &lt;code&gt;for&lt;/code&gt; loop, it moves to the next item in the sequence.&lt;/li&gt;
&lt;li&gt;Example: Skipping the &lt;code&gt;@&lt;/code&gt; character but printing the rest of the email domain.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;xyz123@iitm.in&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Processing domain:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Loop through each character&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# If we see the &amp;#39;@&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Skipping the &amp;#39;@&amp;#39;!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- Skip the rest of THIS turn! ⏭️&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This print happens ONLY if continue wasn&amp;#39;t hit for this character&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Current character: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Finished processing.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Processing domain:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Skipping the &amp;#39;@&amp;#39;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: m&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Current character: n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Finished processing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; can sometimes help you avoid putting too many &lt;code&gt;if&lt;/code&gt; statements inside each other (avoid statement nesting).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/strong&gt; 😴📝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes, Python&amp;rsquo;s rules require you to put a statement somewhere (like inside a loop, an &lt;code&gt;if&lt;/code&gt; block, or a function definition), but you actually &lt;strong&gt;don&amp;rsquo;t want to do anything&lt;/strong&gt; there yet (or ever).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pass&lt;/code&gt; is a &lt;strong&gt;placeholder&lt;/strong&gt;. It literally does &lt;strong&gt;nothing&lt;/strong&gt; when it executes.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s useful when you are planning your code and want to create the structure (like a loop or a function) but haven&amp;rsquo;t written the code inside it yet. It prevents a syntax error.&lt;/li&gt;
&lt;li&gt;Example: You might define a function you plan to write later.
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# TODO: Add data processing logic here later&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- Just a placeholder for now 📝&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cleanup_files&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This function will eventually delete temporary files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- Nothing to do yet 😴&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# You can call the functions, and they just do nothing for now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;cleanup_files&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Program ran, but functions did nothing.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s different from a comment &lt;code&gt;#&lt;/code&gt; because comments are ignored by the computer entirely. &lt;code&gt;pass&lt;/code&gt; is an actual statement that the computer executes, but it&amp;rsquo;s a &amp;ldquo;null operation&amp;rdquo;. If you remove &lt;code&gt;pass&lt;/code&gt; where Python expects a statement, you&amp;rsquo;ll get an error.&lt;/li&gt;
&lt;li&gt;In Python 3.0 and later, the ellipsis &lt;code&gt;...&lt;/code&gt; can sometimes be used as an alternative placeholder to &lt;code&gt;pass&lt;/code&gt;, especially for code to be filled in later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three statements (&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;pass&lt;/code&gt;) give you precise control over how your loops run and help you structure your code effectively!&lt;/p&gt;</description></item><item><title>Nested for loop</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.11/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.11/</guid><description>
&lt;p&gt;Right, let&amp;rsquo;s talk about &lt;strong&gt;nested &lt;code&gt;for&lt;/code&gt; loops&lt;/strong&gt; with some emojis to make it super clear! 😊🔄&lt;/p&gt;
&lt;p&gt;You know that a loop is something that makes your computer &lt;strong&gt;repeat actions&lt;/strong&gt; multiple times. A &lt;code&gt;for&lt;/code&gt; loop is one way to do this, especially useful for iterating over sequences or when you know you need to repeat something a specific number of times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nested Loops:&lt;/strong&gt;
Nesting simply means putting one loop &lt;strong&gt;inside&lt;/strong&gt; another loop. Think of it like putting a box inside a box 📦📦.&lt;/p&gt;
&lt;p&gt;The sources tell us you can nest loops in any combination:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Nested &lt;code&gt;for&lt;/code&gt; Loops in Detail:&lt;/strong&gt;
When you have a &lt;code&gt;for&lt;/code&gt; loop inside another &lt;code&gt;for&lt;/code&gt; loop, it looks something like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;outer_target&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;outer_object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Outer loop 🔄&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;outer_statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Code inside the outer loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;inner_target&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;inner_object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Inner loop (nested inside the outer) ✨&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;inner_statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Code inside the inner loop ✨&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;more_outer_statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# More code inside the outer loop (after the inner finishes for this iteration)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Code outside both loops&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Remember that &lt;strong&gt;indentation&lt;/strong&gt; is key in Python to show which lines of code belong to which loop. The inner loop and its body are indented relative to the outer loop&amp;rsquo;s body.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Execution Works:&lt;/strong&gt;
This is the crucial part! 🚦&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;outer&lt;/strong&gt; loop starts its first iteration. The &lt;code&gt;&amp;lt;outer_target&amp;gt;&lt;/code&gt; variable gets the first item from the &lt;code&gt;&amp;lt;outer_object&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The code inside the outer loop&amp;rsquo;s body runs.&lt;/li&gt;
&lt;li&gt;When the computer reaches the &lt;strong&gt;inner&lt;/strong&gt; loop, that loop starts running.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;inner&lt;/strong&gt; loop completes &lt;strong&gt;all&lt;/strong&gt; of its iterations for the &lt;em&gt;current&lt;/em&gt; value of the outer loop&amp;rsquo;s target. The &lt;code&gt;&amp;lt;inner_target&amp;gt;&lt;/code&gt; variable takes on each item from the &lt;code&gt;&amp;lt;inner_object&amp;gt;&lt;/code&gt; in turn, and the &lt;code&gt;&amp;lt;inner_statements&amp;gt;&lt;/code&gt; are executed for each of those items.&lt;/li&gt;
&lt;li&gt;Once the inner loop finishes (it has gone through all its items), the computer continues executing any remaining statements in the outer loop&amp;rsquo;s body (those indented at the same level as the inner &lt;code&gt;for&lt;/code&gt; header).&lt;/li&gt;
&lt;li&gt;Then, the outer loop moves to its &lt;strong&gt;next&lt;/strong&gt; iteration. The &lt;code&gt;&amp;lt;outer_target&amp;gt;&lt;/code&gt; variable gets the second item from the &lt;code&gt;&amp;lt;outer_object&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The code inside the outer loop&amp;rsquo;s body runs again.&lt;/li&gt;
&lt;li&gt;And once again, the &lt;strong&gt;entire inner&lt;/strong&gt; loop runs from start to finish for this new value of the outer loop&amp;rsquo;s target.&lt;/li&gt;
&lt;li&gt;This process repeats until the outer loop has finished all of &lt;em&gt;its&lt;/em&gt; iterations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example using &lt;code&gt;range()&lt;/code&gt;:&lt;/strong&gt;
A common use is with the &lt;code&gt;range()&lt;/code&gt; function, often when you know exactly how many repetitions you need.
Let&amp;rsquo;s consider the &amp;ldquo;two brothers&amp;rdquo; analogy from the source. Suppose you have two brothers, S and T, who each pick one colour from a list of 7 colours (VIBGYOR) every day. To see all the combinations of colours they could pick, you could use nested loops:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;VIBGYOR&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# The list of colours&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# We want to see all combinations of s[i] and s[j]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Outer loop: Brother S picks a colour based on index i (0 to 6)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# print(f&amp;#34;Brother S picked: {s[i]}&amp;#34;) # Optional: see what outer loop is doing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Inner loop: Brother T picks a colour based on index j (0 to 6)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# For EACH pick of S (controlled by i), Brother T goes through ALL his 7 picks (controlled by j)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Combination: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Print the combination for S&amp;#39;s pick and T&amp;#39;s current pick&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Trace example from source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;i&lt;/code&gt; is 0 (V), &lt;code&gt;j&lt;/code&gt; runs from 0 to 6. This prints &amp;ldquo;V V&amp;rdquo;, &amp;ldquo;V I&amp;rdquo;, &amp;ldquo;V B&amp;rdquo;, &amp;hellip;, &amp;ldquo;V R&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;After &lt;code&gt;j&lt;/code&gt; finishes (goes from 0 to 6), the outer loop continues. &lt;code&gt;i&lt;/code&gt; becomes 1 (I).&lt;/li&gt;
&lt;li&gt;Then the inner loop starts again, and &lt;code&gt;j&lt;/code&gt; runs from 0 to 6 again. This prints &amp;ldquo;I V&amp;rdquo;, &amp;ldquo;I I&amp;rdquo;, &amp;ldquo;I B&amp;rdquo;, &amp;hellip;, &amp;ldquo;I R&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;This repeats for each value of &lt;code&gt;i&lt;/code&gt; until &lt;code&gt;i&lt;/code&gt; is 6 (R), and &lt;code&gt;j&lt;/code&gt; runs 0 to 6 one last time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This demonstrates how the inner loop completes its entire run for every single step of the outer loop. The sources show this can be used for tasks like generating multiplication tables or finding prime numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Points about Nested &lt;code&gt;for&lt;/code&gt; Loops:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are powerful for tasks involving &lt;strong&gt;combinations&lt;/strong&gt; or processing multi-dimensional data like matrices (lists of lists).&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; statements inside nested loops. A &lt;code&gt;break&lt;/code&gt; statement inside the &lt;strong&gt;inner&lt;/strong&gt; loop will &lt;em&gt;only&lt;/em&gt; exit the inner loop; the outer loop will continue its next iteration.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;else&lt;/code&gt; clause can be used with either the inner or outer &lt;code&gt;for&lt;/code&gt; loop (or both), and it executes if the loop finishes normally without a &lt;code&gt;break&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nested loops can seem a bit complex at first, but going slowly, being patient, and maybe even drawing it out on paper ✏️ helps make it easier. Practice makes perfect! 👍&lt;/p&gt;</description></item><item><title>Tutorial on for loop and difference between while loop and for loop</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.10/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.10/</guid><description>
&lt;p&gt;Right, let&amp;rsquo;s break down the &lt;code&gt;for&lt;/code&gt; loop and how it&amp;rsquo;s different from the &lt;code&gt;while&lt;/code&gt; loop, using the information from the sources you provided! 😊&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is a &lt;code&gt;for&lt;/code&gt; loop?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just like &lt;code&gt;while&lt;/code&gt; loops, &lt;code&gt;for&lt;/code&gt; loops are used to make your computer &lt;strong&gt;repeat actions&lt;/strong&gt;. They are considered very powerful. Programming is all about doing complex things quickly and easily, and loops are key to that!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is Python&amp;rsquo;s tool for &lt;strong&gt;iterating&lt;/strong&gt; over sequences or executing a block of code multiple times. The general format involves a header line ending in a colon &lt;code&gt;:&lt;/code&gt;, followed by an indented block of statements that get repeated. Indentation is super important here.&lt;/p&gt;
&lt;p&gt;There are two main ways the sources show &lt;code&gt;for&lt;/code&gt; loops being used:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;for&lt;/code&gt; with &lt;code&gt;range()&lt;/code&gt;&lt;/strong&gt; 🔢
This is a very common pattern, especially when you know exactly &lt;strong&gt;how many times&lt;/strong&gt; you want the loop to run. The &lt;code&gt;range()&lt;/code&gt; function generates a sequence of numbers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(stop)&lt;/code&gt;: Generates numbers starting from 0 up to (but &lt;em&gt;not&lt;/em&gt; including) the &lt;code&gt;stop&lt;/code&gt; number. The video shows &lt;code&gt;for x in range(10)&lt;/code&gt; printing numbers from 0 to 9.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start, stop)&lt;/code&gt;: Generates numbers from &lt;code&gt;start&lt;/code&gt; up to (but &lt;em&gt;not&lt;/em&gt; including) the &lt;code&gt;stop&lt;/code&gt; number. To print numbers from 1 to 10, you would use &lt;code&gt;range(1, 11)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start, stop, step)&lt;/code&gt;: Allows you to control the step size. You can count backwards with a negative step, like &lt;code&gt;range(9, -1, -1)&lt;/code&gt; to get numbers from 9 down to 0.&lt;/li&gt;
&lt;li&gt;The loop variable (like &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;x&lt;/code&gt; in examples) takes on each value generated by &lt;code&gt;range()&lt;/code&gt; in turn.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;for i in range(...)&lt;/code&gt; is a way to code counter-based loops, useful when you need to repeat something a fixed number of times. For example, printing &amp;ldquo;Hello India&amp;rdquo; 10 times using &lt;code&gt;for i in range(10)&lt;/code&gt;. Whatever is inside the loop body gets executed the specified number of times.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;for&lt;/code&gt; without &lt;code&gt;range()&lt;/code&gt; (For-Each Style)&lt;/strong&gt; ✨
The sources highlight a &amp;ldquo;different variation of for loop&amp;rdquo; or &amp;ldquo;special feature of for loop which is called as for each&amp;rdquo;. This is because a &lt;code&gt;for&lt;/code&gt; loop is actually a &lt;strong&gt;generic sequence iterator&lt;/strong&gt;. It can step through the items of &lt;em&gt;any&lt;/em&gt; ordered sequence object, including strings, lists, and tuples. Files and dictionaries can also work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of generating numbers, this style of &lt;code&gt;for&lt;/code&gt; loop directly assigns the &lt;strong&gt;value of each item&lt;/strong&gt; in the sequence to the loop variable.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;country = &amp;quot;India&amp;quot;&lt;/code&gt; followed by &lt;code&gt;for letter in country: print(letter)&lt;/code&gt;. This loop doesn&amp;rsquo;t use &lt;code&gt;range()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Trace: The loop variable &lt;code&gt;letter&lt;/code&gt; first becomes &amp;lsquo;I&amp;rsquo;, then &amp;rsquo;n&amp;rsquo;, then &amp;rsquo;d&amp;rsquo;, then &amp;lsquo;i&amp;rsquo;, and finally &amp;lsquo;a&amp;rsquo;. For each &lt;code&gt;letter&lt;/code&gt;, the code inside the loop (printing the letter) is executed.&lt;/li&gt;
&lt;li&gt;This &amp;ldquo;for each&amp;rdquo; style is shown to be a more efficient and &amp;ldquo;easier to write&amp;rdquo; way to do something that would otherwise require manually accessing items by index using &lt;code&gt;range(len(...))&lt;/code&gt;. It iterates over the string &amp;ldquo;one character at a time&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Difference Between &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; Loops&lt;/strong&gt; 🤔&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; are looping statements, and you&amp;rsquo;ll see them in most code. They allow the computer to repeatedly do a piece of something again and again.&lt;/p&gt;
&lt;p&gt;The key difference highlighted in the source &amp;ldquo;Tutorial on for loop and difference between while loop and for loop&amp;rdquo; is based on whether you &lt;strong&gt;know the number of iterations in advance&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;while&lt;/code&gt; Loop:&lt;/strong&gt; This is a &lt;strong&gt;general looping statement&lt;/strong&gt;. It keeps repeating as long as a specific condition is TRUE. You use &lt;code&gt;while&lt;/code&gt; when you &lt;strong&gt;do not know how many times the loop will execute&lt;/strong&gt;. The number of iterations cannot be predicted. You test the condition &lt;em&gt;before&lt;/em&gt; executing the loop body.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example given: Finding the number of digits in a number. You don&amp;rsquo;t know how many digits a user will enter, so you loop until the number is processed. This is better done with a &lt;code&gt;while&lt;/code&gt; loop because the range function cannot be defined in advance.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;while True:&lt;/code&gt; loop can run forever (an infinite loop) unless stopped by something like a &lt;code&gt;break&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt; Loop:&lt;/strong&gt; This is designed for &lt;strong&gt;iterating across items in a sequence&lt;/strong&gt; (or more generally, an iterable). You should opt for a &lt;code&gt;for&lt;/code&gt; loop when you &lt;strong&gt;are certain&lt;/strong&gt; that the loop is going to execute for a specific, known number of times (an &lt;code&gt;n&lt;/code&gt; number of times). The &lt;code&gt;range&lt;/code&gt; function requires knowing the start and end points.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example given: Finding the factorial of a number. The number of iterations (from 1 up to the number) is known. This makes the &lt;code&gt;for&lt;/code&gt; loop, using &lt;code&gt;range()&lt;/code&gt;, a suitable option.&lt;/li&gt;
&lt;li&gt;A simple &lt;code&gt;for&lt;/code&gt; loop (without &lt;code&gt;range&lt;/code&gt;) is often preferred over a &lt;code&gt;while&lt;/code&gt; with manual indexing when you just need to step across all the items in a sequence. It&amp;rsquo;s generally simpler to code and often quicker than a &lt;code&gt;while&lt;/code&gt;-based counter loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While a &lt;code&gt;while&lt;/code&gt; loop can technically imitate a &lt;code&gt;for&lt;/code&gt; loop using a counter, it requires more code (manual indexing and incrementing) and might run slower. The &lt;code&gt;for&lt;/code&gt; loop is usually the first tool to reach for when you need to step through a sequence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other loop-related concepts mentioned:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nested Loops:&lt;/strong&gt; You can put any type of loop (&lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) inside another loop, in any combination (&lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;). The sources show examples of nested &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt; loops.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;:&lt;/strong&gt; These are statements used specifically &lt;em&gt;inside&lt;/em&gt; loops.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; exits the loop &lt;strong&gt;immediately&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; jumps back to the &lt;strong&gt;top&lt;/strong&gt; of the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loop &lt;code&gt;else&lt;/code&gt; Clause:&lt;/strong&gt; Both &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops can have an optional &lt;code&gt;else&lt;/code&gt; block. This block is executed &lt;em&gt;only&lt;/em&gt; if the loop finishes &lt;strong&gt;normally&lt;/strong&gt; (meaning it did &lt;em&gt;not&lt;/em&gt; exit because of a &lt;code&gt;break&lt;/code&gt; statement).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice:&lt;/strong&gt; To get better at coding and understanding loops, practice is essential. Going slowly, being patient, and using tools like pen and paper to diagram can help make things easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, &lt;code&gt;for&lt;/code&gt; is great for known repetitions or stepping through collections, while &lt;code&gt;while&lt;/code&gt; is more flexible for loops that run based on a condition changing! 👍&lt;/p&gt;</description></item><item><title>Tutorial on nested loops</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.12/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-3/lec3.12/</guid><description>
&lt;p&gt;Okay, let&amp;rsquo;s dive into &lt;strong&gt;nested &lt;code&gt;for&lt;/code&gt; loops&lt;/strong&gt;! 😊🔄&lt;/p&gt;
&lt;p&gt;You already know that loops are super helpful for making the computer &lt;strong&gt;repeat actions&lt;/strong&gt;. The &lt;code&gt;for&lt;/code&gt; loop is great for this, especially when you&amp;rsquo;re stepping through items in a sequence like a string or a list, or when you know you need to do something a specific number of times using &lt;code&gt;range()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are Nested Loops?&lt;/strong&gt; 🤔📦📦
&amp;ldquo;Nested&amp;rdquo; just means putting one loop &lt;strong&gt;inside&lt;/strong&gt; another loop. Think of it like having a main task (the outer loop) that requires doing another, smaller task (the inner loop) multiple times as part of the main task.&lt;/p&gt;
&lt;p&gt;According to the sources, you can nest &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops in &lt;strong&gt;any combination&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our focus here is on &lt;strong&gt;&lt;code&gt;for&lt;/code&gt; inside &lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Nested &lt;code&gt;for&lt;/code&gt; Loops Work&lt;/strong&gt; ⚙️🚦
When you have a &lt;code&gt;for&lt;/code&gt; loop inside another &lt;code&gt;for&lt;/code&gt; loop, the execution flow is like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Outer loop starts 🔄&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;outer_variable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;outer_sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Code inside the outer loop&amp;#39;s body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This includes the entire inner loop 👇&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Inner loop starts ✨&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;inner_variable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;inner_sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Code inside the inner loop&amp;#39;s body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# This code runs for EACH iteration of the inner loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;# Replace with actual code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Code in the outer loop&amp;#39;s body that runs AFTER the inner loop finishes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;# Replace with actual code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Code outside both loops (runs after the outer loop finishes)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Remember that &lt;strong&gt;indentation&lt;/strong&gt; is super important in Python to show what code belongs to which loop. The code inside the inner loop is indented further than the inner loop&amp;rsquo;s &lt;code&gt;for&lt;/code&gt; line, and the inner loop&amp;rsquo;s &lt;code&gt;for&lt;/code&gt; line (and any other code in the outer loop&amp;rsquo;s body) is indented under the outer loop&amp;rsquo;s &lt;code&gt;for&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;The sources explain the execution like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;outer loop&lt;/strong&gt; starts. It takes the &lt;em&gt;first&lt;/em&gt; item from the &lt;code&gt;&amp;lt;outer_sequence&amp;gt;&lt;/code&gt; and assigns it to the &lt;code&gt;&amp;lt;outer_variable&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The computer then goes into the outer loop&amp;rsquo;s body and reaches the &lt;strong&gt;inner loop&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;inner loop&lt;/strong&gt; starts running, just like a regular &lt;code&gt;for&lt;/code&gt; loop. It iterates through &lt;em&gt;all&lt;/em&gt; the items in the &lt;code&gt;&amp;lt;inner_sequence&amp;gt;&lt;/code&gt;. For &lt;em&gt;each&lt;/em&gt; item in the &lt;code&gt;&amp;lt;inner_sequence&amp;gt;&lt;/code&gt;, it assigns it to the &lt;code&gt;&amp;lt;inner_variable&amp;gt;&lt;/code&gt; and runs the inner loop&amp;rsquo;s body.&lt;/li&gt;
&lt;li&gt;Once the &lt;strong&gt;inner loop has completed all its iterations&lt;/strong&gt; for the &lt;em&gt;current&lt;/em&gt; item of the outer loop, the computer continues with any remaining code in the outer loop&amp;rsquo;s body (the code indented at the same level as the inner &lt;code&gt;for&lt;/code&gt; statement).&lt;/li&gt;
&lt;li&gt;Then, the &lt;strong&gt;outer loop&lt;/strong&gt; goes back to its header to get the &lt;em&gt;next&lt;/em&gt; item from the &lt;code&gt;&amp;lt;outer_sequence&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Steps 2-5 repeat. For &lt;em&gt;every single item&lt;/em&gt; in the outer sequence, the &lt;strong&gt;entire inner loop runs from start to finish&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;This continues until the outer loop has processed all its items.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example from Sources (VIBGYOR)&lt;/strong&gt; 🌈🔁
One source gives a great example using a string &lt;code&gt;s = &amp;quot;VIBGYOR&amp;quot;&lt;/code&gt; and nested &lt;code&gt;for&lt;/code&gt; loops with &lt;code&gt;range(7)&lt;/code&gt;. This is like seeing every possible combination of selecting two colours from the list (even picking the same colour twice).&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;VIBGYOR&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Outer loop: i goes from 0 to 6 (representing the index of the first colour)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# For each value of i...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Inner loop: j goes from 0 to 6 (representing the index of the second colour)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# ...the ENTIRE inner loop runs.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Inside the inner loop, we print the combination of the colour at index i and the colour at index j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Printing combination based on indices&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s trace a bit, as shown in the source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; (the first iteration of the outer loop), &lt;code&gt;s[i]&lt;/code&gt; is &amp;lsquo;V&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;The inner loop starts. &lt;code&gt;j&lt;/code&gt; goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;: prints &amp;ldquo;V V&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;: prints &amp;ldquo;V I&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;: prints &amp;ldquo;V B&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;: prints &amp;ldquo;V R&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The inner loop finishes for &lt;code&gt;i=0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The outer loop moves to its next iteration. &lt;code&gt;i&lt;/code&gt; becomes &lt;code&gt;1&lt;/code&gt; (now &lt;code&gt;s[i]&lt;/code&gt; is &amp;lsquo;I&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;The inner loop starts &lt;em&gt;again&lt;/em&gt; from the beginning. &lt;code&gt;j&lt;/code&gt; goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;: prints &amp;ldquo;I V&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;: prints &amp;ldquo;I I&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;: prints &amp;ldquo;I R&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This pattern continues until &lt;code&gt;i&lt;/code&gt; goes through all values up to 6, and for each &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt; completes its full run from 0 to 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is powerful for tasks like generating combinations, working with tables or matrices (lists of lists).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other Concepts with Nested Loops:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;:&lt;/strong&gt; These can be used in nested loops. Crucially, a &lt;code&gt;break&lt;/code&gt; statement inside the &lt;strong&gt;inner loop&lt;/strong&gt; will &lt;strong&gt;only&lt;/strong&gt; exit the inner loop. The outer loop will then continue its next iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;else&lt;/code&gt; Clause:&lt;/strong&gt; Like single loops, nested loops can have an &lt;code&gt;else&lt;/code&gt; clause. An &lt;code&gt;else&lt;/code&gt; block on a loop executes &lt;em&gt;only&lt;/em&gt; if the loop finishes normally (without hitting a &lt;code&gt;break&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nested loops might look a &amp;ldquo;little complex&amp;rdquo; at first, but the sources reassure us that it&amp;rsquo;s &amp;ldquo;not at all complicated&amp;rdquo; and you&amp;rsquo;ll master it with time. Taking it slow, being patient, maybe using a pen and paper to diagram what&amp;rsquo;s happening with the variables can make things easier. As with learning anything new, especially coding, &lt;strong&gt;practice makes one perfect&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Keep practicing and happy coding! 👍💻&lt;/p&gt;</description></item><item><title>Warmup with Lists</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec1-warmup-with-lists/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec1-warmup-with-lists/</guid><description>
&lt;p&gt;Let&amp;rsquo;s warm up to lists in Python! Learning Python often starts with foundational concepts, and things can get more complex as you progress. This &amp;ldquo;warm-up&amp;rdquo; is designed to introduce you to a core data structure: lists, in an easy-to-understand way, just as the courses aim to make programming straightforward for beginners.&lt;/p&gt;
&lt;h3&gt;What are Lists in Python? 📚&lt;span class="hx-absolute -hx-mt-20" id="what-are-lists-in-python-"&gt;&lt;/span&gt;
&lt;a href="#what-are-lists-in-python-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In Python, a &lt;strong&gt;list&lt;/strong&gt; is an &lt;strong&gt;ordered collection of items&lt;/strong&gt;. Think of a list as a versatile &lt;strong&gt;basket&lt;/strong&gt; 🧺 where you can store different types of things – numbers, text, or even other lists!.&lt;/p&gt;
&lt;p&gt;Here are some key characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creating a List&lt;/strong&gt;: You create a list by enclosing a sequence of values (or expressions that return values) within &lt;strong&gt;square brackets &lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt;, with items separated by commas.
&lt;ul&gt;
&lt;li&gt;For example: &lt;code&gt;my_list = [10, 'hello', 3.14]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Empty Lists&lt;/strong&gt;: An empty list is simply &lt;code&gt;[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nesting&lt;/strong&gt;: Lists can contain other lists, allowing for complex data structures like matrices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;: When you create a list and assign it to a variable, that variable &amp;ldquo;refers&amp;rdquo; to the list object in memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checking Type&lt;/strong&gt;: You can check the type of any variable using the &lt;code&gt;type()&lt;/code&gt; command. For a list, it would typically return &lt;code&gt;&amp;lt;class 'list'&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Essential List Operations and Concepts ✨&lt;span class="hx-absolute -hx-mt-20" id="essential-list-operations-and-concepts-"&gt;&lt;/span&gt;
&lt;a href="#essential-list-operations-and-concepts-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Lists are powerful because they come with many built-in operations and methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Length (&lt;code&gt;len()&lt;/code&gt;)&lt;/strong&gt;: To find out how many items are in a list, use the &lt;code&gt;len()&lt;/code&gt; function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;len()&lt;/code&gt; would return &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Indexing&lt;/strong&gt;: You can access individual items in a list using their &lt;strong&gt;position (index)&lt;/strong&gt;, enclosed in square brackets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zero-Based&lt;/strong&gt;: Python indexing &lt;strong&gt;starts from 0&lt;/strong&gt; for the first item.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Negative Indexing&lt;/strong&gt;: You can also count from the end of the list using negative indices, where &lt;code&gt;-1&lt;/code&gt; is the last item, &lt;code&gt;-2&lt;/code&gt; is the second to last, and so on.&lt;/li&gt;
&lt;li&gt;Example: For &lt;code&gt;L = ['apple', 'banana', 'cherry']&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;L&lt;/code&gt; gives &lt;code&gt;'apple'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L&lt;/code&gt; gives &lt;code&gt;'banana'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L[-1]&lt;/code&gt; gives &lt;code&gt;'cherry'&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Slicing&lt;/strong&gt;: To extract a &lt;strong&gt;section or sub-list&lt;/strong&gt; from a list, you use slicing: &lt;code&gt;L[start:end]&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;end&lt;/code&gt; index is &lt;strong&gt;exclusive&lt;/strong&gt;, meaning the item at the &lt;code&gt;end&lt;/code&gt; index itself is &lt;em&gt;not&lt;/em&gt; included.&lt;/li&gt;
&lt;li&gt;You can omit &lt;code&gt;start&lt;/code&gt; (defaults to 0) or &lt;code&gt;end&lt;/code&gt; (defaults to the end of the list).&lt;/li&gt;
&lt;li&gt;Example: For &lt;code&gt;L =&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;L[1:4]&lt;/code&gt; gives ``.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L[2:]&lt;/code&gt; gives ``.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L[:3]&lt;/code&gt; gives ``.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concatenation (&lt;code&gt;+&lt;/code&gt;)&lt;/strong&gt;: You can join two lists together using the &lt;code&gt;+&lt;/code&gt; operator. This operation &lt;strong&gt;creates a new list&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt; +&lt;/code&gt; results in ``.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Repetition (&lt;code&gt;*&lt;/code&gt;)&lt;/strong&gt;: To repeat the elements of a list multiple times, use the &lt;code&gt;*&lt;/code&gt; operator. This also &lt;strong&gt;creates a new list&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;['Hi!'] * 3&lt;/code&gt; results in &lt;code&gt;['Hi!', 'Hi!', 'Hi!']&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutability (Changing Lists)&lt;/strong&gt;: This is a &lt;strong&gt;crucial difference&lt;/strong&gt; between lists and other data types like strings or tuples. Lists are &lt;strong&gt;mutable&lt;/strong&gt;, meaning you can &lt;strong&gt;change their contents after they are created&lt;/strong&gt;. Strings and tuples, on the other hand, are immutable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assigning to an index&lt;/strong&gt;: You can change an item at a specific position: &lt;code&gt;L = 'new_value'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assigning to a slice&lt;/strong&gt;: You can replace a section of a list with a new sequence: &lt;code&gt;L[1:3] = ['a', 'b']&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Common List Methods for Modification&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append(item)&lt;/code&gt;: Adds a single item to the end of the list. Example: &lt;code&gt;L.append(60)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend(sequence)&lt;/code&gt;: Appends all items from an iterable (like another list) to the end. Example: &lt;code&gt;L.extend()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert(index, item)&lt;/code&gt;: Inserts an item at a specific position. Example: &lt;code&gt;L.insert(1, 'new')&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove(value)&lt;/code&gt;: Removes the first occurrence of a specified value. Example: &lt;code&gt;L.remove('apple')&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop(index)&lt;/code&gt;: Removes and returns the item at a given position. If no index is specified, it removes and returns the last item. Example: &lt;code&gt;removed_item = L.pop(0)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del statement&lt;/code&gt;: The &lt;code&gt;del&lt;/code&gt; statement can delete items by index or even entire slices of a list. Example: &lt;code&gt;del L&lt;/code&gt; or &lt;code&gt;del L[1:3]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort()&lt;/code&gt;: Sorts the list &lt;strong&gt;in-place&lt;/strong&gt; (modifies the original list).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse()&lt;/code&gt;: Reverses the order of items &lt;strong&gt;in-place&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Membership (&lt;code&gt;in&lt;/code&gt;)&lt;/strong&gt;: To check if an item exists within a list, use the &lt;code&gt;in&lt;/code&gt; operator. It returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;3 in&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Iteration (&lt;code&gt;for&lt;/code&gt; loop)&lt;/strong&gt;: You can easily go through each item in a list using a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;for item in my_list: print(item)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Ready to put your knowledge to the test? Try these Python list exercises!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;List Creation &amp;amp; Length&lt;/strong&gt;: Create a list called &lt;code&gt;my_pets&lt;/code&gt; containing the names of your three favourite pets (or animals). What is the &lt;code&gt;len()&lt;/code&gt; of your &lt;code&gt;my_pets&lt;/code&gt; list? 🐶🐱🐠&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessing &amp;amp; Slicing&lt;/strong&gt;: Given the list &lt;code&gt;alphabet = ['a', 'b', 'c', 'd', 'e', 'f']&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;How would you access the character &lt;code&gt;'d'&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;How would you get a slice containing &lt;code&gt;['b', 'c', 'd']&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;How would you get the last element using negative indexing? 🔠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modifying Lists&lt;/strong&gt;: Start with the list &lt;code&gt;todo_list = ['buy groceries', 'clean room', 'pay bills', 'walk dog']&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Change &lt;code&gt;'clean room'&lt;/code&gt; to &lt;code&gt;'organise desk'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;'call mum'&lt;/code&gt; to the end of the list.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;'pay bills'&lt;/code&gt; from the list.&lt;/li&gt;
&lt;li&gt;What does &lt;code&gt;todo_list&lt;/code&gt; look like after these operations? 📝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Combining &amp;amp; Repeating&lt;/strong&gt;: You have &lt;code&gt;part1 =&lt;/code&gt; and &lt;code&gt;part2 =&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;full_list&lt;/code&gt; by combining &lt;code&gt;part1&lt;/code&gt; and &lt;code&gt;part2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;repeated_part1&lt;/code&gt; list that contains &lt;code&gt;part1&lt;/code&gt; repeated twice. 🔗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Solutions ✅&lt;span class="hx-absolute -hx-mt-20" id="solutions-"&gt;&lt;/span&gt;
&lt;a href="#solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_pets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Buddy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Whiskers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Goldie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_pets&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;#39;d&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;#39;f&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;todo_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buy groceries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clean room&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pay bills&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;walk dog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;todo_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;organise desk&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Change by index assignment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;todo_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;call mum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Add to end using append()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;todo_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pay bills&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Remove by value using remove()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;todo_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;buy groceries&amp;#39;, &amp;#39;organise desk&amp;#39;, &amp;#39;walk dog&amp;#39;, &amp;#39;call mum&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;part1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;part2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;full_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;part2&lt;/span&gt; &lt;span class="c1"&gt;# Combine lists using + operator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;repeated_part1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# Repeat list using * operator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeated_part1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Lists and Sets</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec2-lists-and-sets/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec2-lists-and-sets/</guid><description>
&lt;p&gt;Let&amp;rsquo;s get warmed up to two incredibly useful Python data structures: &lt;strong&gt;Lists&lt;/strong&gt; and &lt;strong&gt;Sets&lt;/strong&gt;! 📚 Just like learning a new skill, starting with programming involves breaking down complex ideas into simpler, manageable pieces, and understanding these fundamental &amp;ldquo;baskets&amp;rdquo; where you store your data is a great starting point.&lt;/p&gt;
&lt;h3&gt;What are Lists in Python? 🧺&lt;span class="hx-absolute -hx-mt-20" id="what-are-lists-in-python-"&gt;&lt;/span&gt;
&lt;a href="#what-are-lists-in-python-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Imagine a &lt;strong&gt;list&lt;/strong&gt; as a super versatile shopping basket 🧺 where you can put anything you want, in any order, and even change its contents later!.&lt;/p&gt;
&lt;p&gt;In Python, a list is an &lt;strong&gt;ordered collection of items&lt;/strong&gt;. This means the items have a specific sequence, and you can access them by their position.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how lists work and what you can do with them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creating a List&lt;/strong&gt;: You create a list by putting items inside &lt;strong&gt;square brackets &lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt;, separated by commas.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;my_shopping_list = ['milk', 'eggs', 'bread']&lt;/code&gt; 🛒&lt;/li&gt;
&lt;li&gt;An empty list is just &lt;code&gt;[]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Holding Anything &amp;amp; Nesting&lt;/strong&gt;: Lists can hold different types of things – numbers, text, or even other lists!.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;mixed_bag = ['apple', 10, 3.14, ['inner_list', 5]]&lt;/code&gt; 🍎🔟🥧📦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checking Type&lt;/strong&gt;: You can always check a variable&amp;rsquo;s type using &lt;code&gt;type()&lt;/code&gt;. For a list, it will show &lt;code&gt;&amp;lt;class 'list'&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length (&lt;code&gt;len()&lt;/code&gt;)&lt;/strong&gt;: Want to know how many items are in your list? Use &lt;code&gt;len()&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;len(['milk', 'eggs'])&lt;/code&gt; would give &lt;code&gt;2&lt;/code&gt; 📏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing (Accessing Items by Position)&lt;/strong&gt;: Every item in a list has a number (its position or &lt;strong&gt;index&lt;/strong&gt;). Python starts counting from &lt;code&gt;0&lt;/code&gt; for the first item!.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;my_list = ['A', 'B', 'C']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_list&lt;/code&gt; gives &lt;code&gt;'A'&lt;/code&gt; (the first item) 🥇&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_list&lt;/code&gt; gives &lt;code&gt;'B'&lt;/code&gt; (the second item) 🥈&lt;/li&gt;
&lt;li&gt;You can also count from the end using negative indices: &lt;code&gt;my_list[-1]&lt;/code&gt; gives &lt;code&gt;'C'&lt;/code&gt; (the last item) 🔚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slicing (Getting Parts of a List)&lt;/strong&gt;: You can grab a section (a &amp;ldquo;slice&amp;rdquo;) of a list using &lt;code&gt;[start:end]&lt;/code&gt;. The &lt;code&gt;end&lt;/code&gt; position is &lt;em&gt;not included&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numbers =&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numbers[1:4]&lt;/code&gt; gives `` (items from index 1 up to, but not including, index 4) ✂️&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numbers[2:]&lt;/code&gt; gives `` (from index 2 to the end)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numbers[:3]&lt;/code&gt; gives `` (from the beginning up to, but not including, index 3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concatenation (&lt;code&gt;+&lt;/code&gt;)&lt;/strong&gt;: You can combine two lists using &lt;code&gt;+&lt;/code&gt; to create a brand &lt;strong&gt;new list&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt; +&lt;/code&gt; results in `` ➕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repetition (&lt;code&gt;*&lt;/code&gt;)&lt;/strong&gt;: Repeat a list&amp;rsquo;s items multiple times with &lt;code&gt;*&lt;/code&gt; to create a &lt;strong&gt;new list&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;['Hi!'] * 3&lt;/code&gt; results in &lt;code&gt;['Hi!', 'Hi!', 'Hi!']&lt;/code&gt; ✨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutability (Changing Lists)&lt;/strong&gt;: Lists are &lt;strong&gt;mutable&lt;/strong&gt;. This means you &lt;strong&gt;can change their contents&lt;/strong&gt; after they are created.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Changing an item&lt;/strong&gt;: &lt;code&gt;my_list = 'new_item'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adding items&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.append(item)&lt;/code&gt;: Adds one item to the end 📦.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.extend(another_list)&lt;/code&gt;: Adds all items from another list to the end.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.insert(index, item)&lt;/code&gt;: Inserts an item at a specific position.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Removing items&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.remove(value)&lt;/code&gt;: Removes the &lt;em&gt;first&lt;/em&gt; matching item by its value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.pop(index)&lt;/code&gt;: Removes and &lt;em&gt;returns&lt;/em&gt; the item at a specific position (or the last if no index is given).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del list[index]&lt;/code&gt; or &lt;code&gt;del list[start:end]&lt;/code&gt;: Deletes item(s) by position or slice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Membership (&lt;code&gt;in&lt;/code&gt;)&lt;/strong&gt;: Check if an item is in a list using the &lt;code&gt;in&lt;/code&gt; keyword. It returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;'apple' in ['orange', 'apple']&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; 🍎🔍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iteration (&lt;code&gt;for&lt;/code&gt; loop)&lt;/strong&gt;: Go through each item in a list one by one.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;for fruit in my_fruits: print(fruit)&lt;/code&gt; 🚶‍♀️&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What are Sets in Python? 🎒&lt;span class="hx-absolute -hx-mt-20" id="what-are-sets-in-python-"&gt;&lt;/span&gt;
&lt;a href="#what-are-sets-in-python-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Think of a &lt;strong&gt;set&lt;/strong&gt; as a magic bag of toys 🎒. You can throw in as many toys as you want, but if you try to add the same toy twice, it just ignores the second one (because it already has it!). Also, when you pull toys out, they might not be in the same order you put them in.&lt;/p&gt;
&lt;p&gt;In Python, a set is an &lt;strong&gt;unordered collection of unique items&lt;/strong&gt;. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No duplicates allowed&lt;/strong&gt;: Each item in a set must be unique.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No specific order&lt;/strong&gt;: Items are not stored in any particular sequence, so you can&amp;rsquo;t use indexing or slicing like with lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s how sets work and what you can do with them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creating a Set&lt;/strong&gt;: You can create a set using the &lt;code&gt;set()&lt;/code&gt; function (passing it an existing list or string) or by using &lt;strong&gt;curly braces &lt;code&gt;{}&lt;/code&gt;&lt;/strong&gt; with items inside (for Python 3.0 and later).
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;unique_numbers = {1, 2, 3, 2, 1}&lt;/code&gt; will become &lt;code&gt;{1, 2, 3}&lt;/code&gt; (duplicates removed!) 🚫&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;unique_letters = set('hello')&lt;/code&gt; will become &lt;code&gt;{'h', 'e', 'l', 'o'}&lt;/code&gt; (order not guaranteed)&lt;/li&gt;
&lt;li&gt;An empty set is created with &lt;code&gt;set()&lt;/code&gt; (not &lt;code&gt;{}&lt;/code&gt; alone, as &lt;code&gt;{}&lt;/code&gt; creates an empty dictionary).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutable Elements&lt;/strong&gt;: Items you put into a set &lt;em&gt;must be immutable&lt;/em&gt; (like numbers, strings, or tuples). You &lt;strong&gt;cannot&lt;/strong&gt; put mutable items like lists or dictionaries directly into a set.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;{1, 'apple', (1, 2)}&lt;/code&gt; is OK. &lt;code&gt; {1, ['list'], {'dict'}}&lt;/code&gt; is NOT OK. ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutability (Changing Sets)&lt;/strong&gt;: Sets are &lt;strong&gt;mutable&lt;/strong&gt;, meaning you can add or remove items after creation.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adding items&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.add(item)&lt;/code&gt;: Adds a single item. If it&amp;rsquo;s already there, nothing happens.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.update(another_set_or_list)&lt;/code&gt;: Adds multiple items from another collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Removing items&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.remove(value)&lt;/code&gt;: Removes a specific item. If the item isn&amp;rsquo;t found, it causes an error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.discard(value)&lt;/code&gt;: Removes a specific item. If the item isn&amp;rsquo;t found, nothing happens (no error).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.pop()&lt;/code&gt;: Removes and returns an &lt;em&gt;arbitrary&lt;/em&gt; item (since sets are unordered).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.clear()&lt;/code&gt;: Removes all items.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set Operations (Math-like!)&lt;/strong&gt;: Sets are great for mathematical operations:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Union (&lt;code&gt;|&lt;/code&gt;)&lt;/strong&gt;: Combines all unique items from both sets. Example: &lt;code&gt;{1, 2} | {2, 3}&lt;/code&gt; results in &lt;code&gt;{1, 2, 3}&lt;/code&gt; 🤝&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intersection (&lt;code&gt;&amp;amp;&lt;/code&gt;)&lt;/strong&gt;: Finds items common to both sets. Example: &lt;code&gt;{1, 2} &amp;amp; {2, 3}&lt;/code&gt; results in &lt;code&gt;{2}&lt;/code&gt; ✂️&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difference (&lt;code&gt;-&lt;/code&gt;)&lt;/strong&gt;: Finds items in the first set but &lt;em&gt;not&lt;/em&gt; in the second. Example: &lt;code&gt;{1, 2, 3} - {2, 4}&lt;/code&gt; results in &lt;code&gt;{1, 3}&lt;/code&gt; ➖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Symmetric Difference (&lt;code&gt;^&lt;/code&gt;)&lt;/strong&gt;: Finds items in either set, but &lt;em&gt;not&lt;/em&gt; in both. Example: &lt;code&gt;{1, 2, 3} ^ {2, 4}&lt;/code&gt; results in &lt;code&gt;{1, 3, 4}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Membership (&lt;code&gt;in&lt;/code&gt;)&lt;/strong&gt;: Check if an item is in a set. Very fast!.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;'orange' in {'apple', 'orange'}&lt;/code&gt; results in &lt;code&gt;True&lt;/code&gt; 🍊🔍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iteration (&lt;code&gt;for&lt;/code&gt; loop)&lt;/strong&gt;: You can loop through items in a set, but remember, the order isn&amp;rsquo;t guaranteed.
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;for color in my_colors: print(color)&lt;/code&gt; 🚶‍♂️&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lists vs. Sets: Quick Comparison 📊&lt;span class="hx-absolute -hx-mt-20" id="lists-vs-sets-quick-comparison-"&gt;&lt;/span&gt;
&lt;a href="#lists-vs-sets-quick-comparison-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Feature&lt;/th&gt;
&lt;th style="text-align: left"&gt;Lists 🧺&lt;/th&gt;
&lt;th style="text-align: left"&gt;Sets 🎒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Ordered&lt;/strong&gt; (items have an index)&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Unordered&lt;/strong&gt; (no indexes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Duplicates&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Allowed&lt;/strong&gt; (can have multiple same items)&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Not Allowed&lt;/strong&gt; (items must be unique)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;[item1, item2]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;{item1, item2}&lt;/code&gt; or &lt;code&gt;set(iterable)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Mutability&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Mutable (can change contents)&lt;/td&gt;
&lt;td style="text-align: left"&gt;Mutable (can add/remove items)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Access&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;By index (&lt;code&gt;my_list&lt;/code&gt;) or slice (&lt;code&gt;[1:3]&lt;/code&gt;)&lt;/td&gt;
&lt;td style="text-align: left"&gt;No direct index/slice access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;Key Use&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Storing sequences, maintaining order&lt;/td&gt;
&lt;td style="text-align: left"&gt;Storing unique items, fast membership tests, mathematical set operations&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Both are powerful! Python allows you to store and manage &amp;ldquo;stuff&amp;rdquo; efficiently, and practice is the best way to master these concepts. Don&amp;rsquo;t worry if it&amp;rsquo;s not immediately obvious; consistent practice helps.&lt;/p&gt;
&lt;h3&gt;Practice Questions 🧠&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Ready to put your knowledge to the test? Try these Python exercises!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;List Creation &amp;amp; Length&lt;/strong&gt;: Create a list called &lt;code&gt;favourite_movies&lt;/code&gt; containing the titles of your five favourite films. What is the &lt;code&gt;len()&lt;/code&gt; of your &lt;code&gt;favourite_movies&lt;/code&gt; list? 🎬📏&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List Accessing &amp;amp; Slicing&lt;/strong&gt;: Given the list &lt;code&gt;fruits = ['apple', 'banana', 'cherry', 'date', 'elderberry']&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;How would you access the fruit &lt;code&gt;'cherry'&lt;/code&gt;? 🍒&lt;/li&gt;
&lt;li&gt;How would you get a slice containing &lt;code&gt;['banana', 'cherry', 'date']&lt;/code&gt;? 🍌🍒📅&lt;/li&gt;
&lt;li&gt;How would you get the last element using negative indexing? 🔚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List Modifying&lt;/strong&gt;: Start with the list &lt;code&gt;daily_tasks = ['wake up', 'eat breakfast', 'go to work', 'eat lunch', 'go home']&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Change &lt;code&gt;'go to work'&lt;/code&gt; to &lt;code&gt;'attend morning meeting'&lt;/code&gt;. 💼&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;'prepare dinner'&lt;/code&gt; to the end of the list. 🍽️&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;'eat lunch'&lt;/code&gt; from the list. 🥗&lt;/li&gt;
&lt;li&gt;What does &lt;code&gt;daily_tasks&lt;/code&gt; look like after these operations? 📝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set Creation &amp;amp; Operations&lt;/strong&gt;: You have &lt;code&gt;group_a_hobbies = {'reading', 'hiking', 'gaming', 'swimming'}&lt;/code&gt; and &lt;code&gt;group_b_hobbies = {'hiking', 'cooking', 'reading', 'cycling'}&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Create a set called &lt;code&gt;all_hobbies&lt;/code&gt; containing all unique hobbies from both groups. 🌍&lt;/li&gt;
&lt;li&gt;Create a set called &lt;code&gt;common_hobbies&lt;/code&gt; containing only the hobbies that both groups share. 🤝&lt;/li&gt;
&lt;li&gt;What hobbies are unique to &lt;code&gt;group_a_hobbies&lt;/code&gt; (not in group B)? 🅰️&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List vs. Set&lt;/strong&gt;: You have a list of student IDs, but some might be duplicates: &lt;code&gt;student_ids =&lt;/code&gt;. How would you use a set to quickly find the number of &lt;em&gt;unique&lt;/em&gt; student IDs? 🧑‍🎓🔢&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solutions ✅&lt;span class="hx-absolute -hx-mt-20" id="solutions-"&gt;&lt;/span&gt;
&lt;a href="#solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;favourite_movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The Matrix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Inception&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pulp Fiction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Spirited Away&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eternal Sunshine of the Spotless Mind&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;favourite_movies&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 5 🎬📏&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;elderberry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;#39;cherry&amp;#39; 🍒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;banana&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;date&amp;#39;] 🍌🍒📅&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;#39;elderberry&amp;#39; 🔚&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;daily_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wake up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eat breakfast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;go to work&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eat lunch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;go home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;daily_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attend morning meeting&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Change by index assignment 💼&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;daily_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prepare dinner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Add to end using append() 🍽️&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;daily_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eat lunch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Remove by value using remove() 🥗&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;daily_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;wake up&amp;#39;, &amp;#39;eat breakfast&amp;#39;, &amp;#39;attend morning meeting&amp;#39;, &amp;#39;go home&amp;#39;, &amp;#39;prepare dinner&amp;#39;] 📝&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;group_a_hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hiking&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gaming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;swimming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;group_b_hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hiking&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cooking&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cycling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;all_hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_a_hobbies&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;group_b_hobbies&lt;/span&gt; &lt;span class="c1"&gt;# Union operation 🌍&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_hobbies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output (order may vary): {&amp;#39;reading&amp;#39;, &amp;#39;hiking&amp;#39;, &amp;#39;gaming&amp;#39;, &amp;#39;swimming&amp;#39;, &amp;#39;cooking&amp;#39;, &amp;#39;cycling&amp;#39;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;common_hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_a_hobbies&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;group_b_hobbies&lt;/span&gt; &lt;span class="c1"&gt;# Intersection operation 🤝&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common_hobbies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output (order may vary): {&amp;#39;reading&amp;#39;, &amp;#39;hiking&amp;#39;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;unique_to_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_a_hobbies&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;group_b_hobbies&lt;/span&gt; &lt;span class="c1"&gt;# Difference operation 🅰️&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_to_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output (order may vary): {&amp;#39;gaming&amp;#39;, &amp;#39;swimming&amp;#39;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;student_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;unique_ids_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Convert list to set to remove duplicates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_ids_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output (order may vary): {101, 102, 103, 104, 105}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_ids_set&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 5 🧑‍🎓🔢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Tuples</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec3-tuples/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec3-tuples/</guid><description>
&lt;p&gt;Absolutely! Let’s break down &lt;strong&gt;tuples&lt;/strong&gt; in Python, step by step, with simple explanations, examples, emojis, and practice questions! 🚀🐍&lt;/p&gt;
&lt;h2&gt;What is a Tuple? 🤔&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-tuple-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-tuple-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;tuple&lt;/strong&gt; is an &lt;strong&gt;ordered collection&lt;/strong&gt; of items, just like a list, but &lt;strong&gt;immutable&lt;/strong&gt; (which means you can’t change it after you create it). You can store any type of data in a tuple: numbers, strings, even other tuples or lists!&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ordered&lt;/strong&gt;: The items have a defined order, and that order will not change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutable&lt;/strong&gt;: Once created, you cannot add, remove, or change items in a tuple.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can contain different types&lt;/strong&gt;: Numbers, strings, lists, other tuples, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to Create a Tuple 🛠️&lt;span class="hx-absolute -hx-mt-20" id="how-to-create-a-tuple-"&gt;&lt;/span&gt;
&lt;a href="#how-to-create-a-tuple-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You make a tuple by putting items inside &lt;strong&gt;parentheses&lt;/strong&gt; &lt;code&gt;()&lt;/code&gt; and separating them with &lt;strong&gt;commas&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (1, 2, 3)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also create a tuple &lt;strong&gt;without parentheses&lt;/strong&gt; (Python will understand by the commas):&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;another_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;another_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (4, 5, 6)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Special Case: Single-Element Tuple&lt;span class="hx-absolute -hx-mt-20" id="special-case-single-element-tuple"&gt;&lt;/span&gt;
&lt;a href="#special-case-single-element-tuple" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To create a tuple with just &lt;strong&gt;one item&lt;/strong&gt;, you &lt;strong&gt;must&lt;/strong&gt; add a comma:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;one_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Without the comma, Python thinks it’s just a value in parentheses, not a tuple!&lt;/p&gt;
&lt;h3&gt;Accessing Tuple Items 🔍&lt;span class="hx-absolute -hx-mt-20" id="accessing-tuple-items-"&gt;&lt;/span&gt;
&lt;a href="#accessing-tuple-items-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can get items from a tuple using &lt;strong&gt;indexing&lt;/strong&gt; (just like lists):&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: banana&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also use &lt;strong&gt;slicing&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: (&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Why Use Tuples? 🤷‍♂️&lt;span class="hx-absolute -hx-mt-20" id="why-use-tuples-"&gt;&lt;/span&gt;
&lt;a href="#why-use-tuples-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Safety&lt;/strong&gt;: Because tuples can’t change, they’re great for data you don’t want to accidentally modify.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dictionary Keys&lt;/strong&gt;: Tuples can be used as keys in dictionaries (lists can’t!).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Tuples can be a bit faster than lists for certain operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tuple Methods 🛠️&lt;span class="hx-absolute -hx-mt-20" id="tuple-methods-"&gt;&lt;/span&gt;
&lt;a href="#tuple-methods-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Tuples have only two built-in methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.count(x)&lt;/code&gt; — counts how many times &lt;code&gt;x&lt;/code&gt; appears in the tuple.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.index(x)&lt;/code&gt; — returns the index of the first occurrence of &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Tuple vs List Comparison Table 📋&lt;span class="hx-absolute -hx-mt-20" id="tuple-vs-list-comparison-table-"&gt;&lt;/span&gt;
&lt;a href="#tuple-vs-list-comparison-table-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Feature&lt;/th&gt;
&lt;th style="text-align: left"&gt;Tuple&lt;/th&gt;
&lt;th style="text-align: left"&gt;List&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Mutable?&lt;/td&gt;
&lt;td style="text-align: left"&gt;❌ No (immutable)&lt;/td&gt;
&lt;td style="text-align: left"&gt;✅ Yes (mutable)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Syntax&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;(1, 2, 3)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;[^3][^1][^2]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Methods&lt;/td&gt;
&lt;td style="text-align: left"&gt;Few (&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;)&lt;/td&gt;
&lt;td style="text-align: left"&gt;Many (append, pop, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Dictionary Key?&lt;/td&gt;
&lt;td style="text-align: left"&gt;✅ Yes&lt;/td&gt;
&lt;td style="text-align: left"&gt;❌ No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4&gt;1️⃣ Create a tuple with the numbers 10, 20, and 30. Print the second element.&lt;span class="hx-absolute -hx-mt-20" id="1-create-a-tuple-with-the-numbers-10-20-and-30-print-the-second-element"&gt;&lt;/span&gt;
&lt;a href="#1-create-a-tuple-with-the-numbers-10-20-and-30-print-the-second-element" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: 20&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h4&gt;2️⃣ What happens if you try to change a value in a tuple?&lt;span class="hx-absolute -hx-mt-20" id="2-what-happens-if-you-try-to-change-a-value-in-a-tuple"&gt;&lt;/span&gt;
&lt;a href="#2-what-happens-if-you-try-to-change-a-value-in-a-tuple" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# What will happen?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;p&gt;You will get an error! ❌&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;pre&gt;&lt;code&gt;TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment&lt;/code&gt;&lt;/pre&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h4&gt;3️⃣ Can you use a tuple as a dictionary key? Try it!&lt;span class="hx-absolute -hx-mt-20" id="3-can-you-use-a-tuple-as-a-dictionary-key-try-it"&gt;&lt;/span&gt;
&lt;a href="#3-can-you-use-a-tuple-as-a-dictionary-key-try-it" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: {(1, 2): &amp;#39;Hello&amp;#39;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Yes, tuples can be dictionary keys because they are immutable!&lt;/p&gt;
&lt;/details&gt;
&lt;h4&gt;4️⃣ How do you make a tuple from a list?&lt;span class="hx-absolute -hx-mt-20" id="4-how-do-you-make-a-tuple-from-a-list"&gt;&lt;/span&gt;
&lt;a href="#4-how-do-you-make-a-tuple-from-a-list" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (1, 2, 3)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;Summary with Emojis 🎉&lt;span class="hx-absolute -hx-mt-20" id="summary-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#summary-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tuple&lt;/strong&gt; = ordered, immutable group of items: &lt;code&gt;(a, b, c)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use when&lt;/strong&gt; you don’t want data to change!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access&lt;/strong&gt; with &lt;code&gt;[index]&lt;/code&gt; just like lists&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can be used as dictionary keys&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only two methods:&lt;/strong&gt; &lt;code&gt;.count()&lt;/code&gt; and &lt;code&gt;.index()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have more questions about tuples, just ask! 😊✨&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
[Tuples are immutable, ordered collections, can be used as dictionary keys, and are created with parentheses and commas]&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.
You can access elements by index and use them in many ways similar to lists, but you cannot change their contents after creation&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref2:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;pythonlearn.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;thinkpython2.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>More on Lists</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec4-more-on-lists/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec4-more-on-lists/</guid><description>
&lt;p&gt;Let’s dive deeper into &lt;strong&gt;lists&lt;/strong&gt; in Python! 📝🐍&lt;/p&gt;
&lt;h2&gt;What is a List? 📋&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-list-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-list-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;list&lt;/strong&gt; is an &lt;strong&gt;ordered&lt;/strong&gt;, &lt;strong&gt;mutable&lt;/strong&gt; collection of items. Lists can hold items of &lt;strong&gt;any type&lt;/strong&gt; (numbers, strings, even other lists) and can be changed after creation (add, remove, or modify elements)&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ordered:&lt;/strong&gt; Items keep their position.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutable:&lt;/strong&gt; You can change the content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heterogeneous:&lt;/strong&gt; Can contain different data types.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Creating a List 🛠️&lt;span class="hx-absolute -hx-mt-20" id="creating-a-list-"&gt;&lt;/span&gt;
&lt;a href="#creating-a-list-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Accessing List Elements 🔍&lt;span class="hx-absolute -hx-mt-20" id="accessing-list-elements-"&gt;&lt;/span&gt;
&lt;a href="#accessing-list-elements-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;/strong&gt; (starts at 0):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: apple&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Negative Indexing&lt;/strong&gt; (from the end):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: True&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Slicing&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;apple&amp;#39;, 3.14]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Modifying Lists ✏️&lt;span class="hx-absolute -hx-mt-20" id="modifying-lists-"&gt;&lt;/span&gt;
&lt;a href="#modifying-lists-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Change an element:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [100, &amp;#39;apple&amp;#39;, 3.14, True]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add elements:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append()&lt;/code&gt; – Adds to the end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert()&lt;/code&gt; – Adds at a specific position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend()&lt;/code&gt; – Adds all elements from another list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remove elements:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;remove()&lt;/code&gt; – Removes by value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt; – Removes by index (default: last)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt; – Deletes by index or slice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Common List Methods 🧰&lt;span class="hx-absolute -hx-mt-20" id="common-list-methods-"&gt;&lt;/span&gt;
&lt;a href="#common-list-methods-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Method&lt;/th&gt;
&lt;th style="text-align: left"&gt;What it does&lt;/th&gt;
&lt;th style="text-align: left"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;append(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Adds &lt;code&gt;x&lt;/code&gt; to end&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.append(5)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;insert(i, x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Inserts &lt;code&gt;x&lt;/code&gt; at index &lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.insert(1, &amp;quot;hi&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;extend(lst)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Adds all items from &lt;code&gt;lst&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.extend([^2][^1])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;remove(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Removes first occurrence of &lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.remove(&amp;quot;apple&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;pop([i])&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Removes &amp;amp; returns item at index &lt;code&gt;i&lt;/code&gt; (default -1)&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.pop()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;sort()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Sorts the list in place&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.sort()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Reverses the list in place&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.reverse()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;count(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Counts occurrences of &lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.count(3.14)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;index(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Returns index of first occurrence of &lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;my_list.index(&amp;quot;banana&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;List Operations ⚡&lt;span class="hx-absolute -hx-mt-20" id="list-operations-"&gt;&lt;/span&gt;
&lt;a href="#list-operations-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concatenation:&lt;/strong&gt; &lt;code&gt;a + b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repetition:&lt;/strong&gt; &lt;code&gt;a * 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Membership:&lt;/strong&gt; &lt;code&gt;x in a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length:&lt;/strong&gt; &lt;code&gt;len(a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iteration:&lt;/strong&gt; &lt;code&gt;for item in a:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;List Comprehensions 🏗️&lt;span class="hx-absolute -hx-mt-20" id="list-comprehensions-"&gt;&lt;/span&gt;
&lt;a href="#list-comprehensions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A compact way to create lists:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [0, 1, 4, 9, 16]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Create a list of numbers from 1 to 5. Print the third element.&lt;span class="hx-absolute -hx-mt-20" id="1-create-a-list-of-numbers-from-1-to-5-print-the-third-element"&gt;&lt;/span&gt;
&lt;a href="#1-create-a-list-of-numbers-from-1-to-5-print-the-third-element" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Add &amp;ldquo;grape&amp;rdquo; to the end of this list: &lt;code&gt;fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;]&lt;/code&gt;&lt;span class="hx-absolute -hx-mt-20" id="2-add-grape-to-the-end-of-this-list-fruits--apple-banana"&gt;&lt;/span&gt;
&lt;a href="#2-add-grape-to-the-end-of-this-list-fruits--apple-banana" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;grape&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;grape&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Remove the first element from the list: &lt;code&gt;data = &lt;/code&gt;&lt;span class="hx-absolute -hx-mt-20" id="3-remove-the-first-element-from-the-list-data-"&gt;&lt;/span&gt;
&lt;a href="#3-remove-the-first-element-from-the-list-data-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [20, 30, 40]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ Sort the list &lt;code&gt;nums = [^3][^2][^4][^1]&lt;/code&gt; in ascending order.&lt;span class="hx-absolute -hx-mt-20" id="4-sort-the-list-nums--3241-in-ascending-order"&gt;&lt;/span&gt;
&lt;a href="#4-sort-the-list-nums--3241-in-ascending-order" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ Use a list comprehension to create a list of even numbers from 0 to 10.&lt;span class="hx-absolute -hx-mt-20" id="5-use-a-list-comprehension-to-create-a-list-of-even-numbers-from-0-to-10"&gt;&lt;/span&gt;
&lt;a href="#5-use-a-list-comprehension-to-create-a-list-of-even-numbers-from-0-to-10" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [0, 2, 4, 6, 8, 10]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lists&lt;/strong&gt; are &lt;strong&gt;mutable&lt;/strong&gt; and &lt;strong&gt;ordered&lt;/strong&gt; 📚&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;[]&lt;/code&gt; to create, and methods like &lt;code&gt;append()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;sort()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Can contain &lt;strong&gt;any type&lt;/strong&gt; of data, even other lists 🥗&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;/strong&gt; starts at 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List comprehensions&lt;/strong&gt; make building lists easy! 🏗️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to know more or try advanced list tricks, just ask! 😊&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
Lists are mutable, ordered, and can hold any type of object. They support indexing, slicing, concatenation, repetition, and many built-in methods for modification and querying&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;python_tutorial.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Learning_Python.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>More on Sets</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec5-more-on-sets/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec5-more-on-sets/</guid><description>
&lt;p&gt;Let’s explore &lt;strong&gt;sets&lt;/strong&gt; in Python with easy explanations, emojis, practical examples, and practice questions! 🎯🧑‍💻&lt;/p&gt;
&lt;h2&gt;What is a Set? 🥇&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-set-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-set-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;set&lt;/strong&gt; in Python is an &lt;strong&gt;unordered collection&lt;/strong&gt; of &lt;strong&gt;unique&lt;/strong&gt; and &lt;strong&gt;immutable&lt;/strong&gt; elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unordered:&lt;/strong&gt; No item has a fixed position (no indexing or slicing).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unique:&lt;/strong&gt; Each element appears only once.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutable:&lt;/strong&gt; You can add or remove items, but the items themselves must be immutable (like numbers, strings, or tuples).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to Create a Set 🛠️&lt;span class="hx-absolute -hx-mt-20" id="how-to-create-a-set-"&gt;&lt;/span&gt;
&lt;a href="#how-to-create-a-set-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using curly braces &lt;code&gt;{}&lt;/code&gt;:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: {1, 2, 3, 4}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using the &lt;code&gt;set()&lt;/code&gt; function (especially for empty sets):&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;empty_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;empty_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: set()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;{}&lt;/code&gt; creates an empty dictionary, not a set!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Key Features of Sets ⭐&lt;span class="hx-absolute -hx-mt-20" id="key-features-of-sets-"&gt;&lt;/span&gt;
&lt;a href="#key-features-of-sets-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No duplicates:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: {1, 2, 3}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No indexing:&lt;/strong&gt;
You cannot do &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;s[^1]&lt;/code&gt;—sets are unordered!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can add and remove items:&lt;/strong&gt;
But only immutable types can be members (no lists or dicts).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Set Methods &amp;amp; Operations 🧰&lt;span class="hx-absolute -hx-mt-20" id="set-methods--operations-"&gt;&lt;/span&gt;
&lt;a href="#set-methods--operations-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Operation/Method&lt;/th&gt;
&lt;th style="text-align: left"&gt;Description&lt;/th&gt;
&lt;th style="text-align: left"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;add(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Add element &lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s.add(5)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;remove(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Remove &lt;code&gt;x&lt;/code&gt;, error if not found&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s.remove(2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;discard(x)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Remove &lt;code&gt;x&lt;/code&gt;, no error if not found&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s.discard(10)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;pop()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Remove and return a random element&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s.pop()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Remove all elements&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s.clear()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Return a shallow copy&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s2 = s.copy()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;union(other)&lt;/code&gt; or `&lt;/td&gt;
&lt;td style="text-align: left"&gt;`&lt;/td&gt;
&lt;td style="text-align: left"&gt;All elements from both sets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;intersection(other)&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Elements common to both sets&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s1 &amp;amp; s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;difference(other)&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Elements in &lt;code&gt;s1&lt;/code&gt; not in &lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s1 - s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;symmetric_difference(other)&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Elements in one set or the other, not both&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s1 ^ s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;issubset(other)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Is &lt;code&gt;s1&lt;/code&gt; a subset of &lt;code&gt;s2&lt;/code&gt;?&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s1.issubset(s2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;issuperset(other)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Is &lt;code&gt;s1&lt;/code&gt; a superset of &lt;code&gt;s2&lt;/code&gt;?&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s1.issuperset(s2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;isdisjoint(other)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Do sets have no elements in common?&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;s1.isdisjoint(s2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Set Operations in Action 🚦&lt;span class="hx-absolute -hx-mt-20" id="set-operations-in-action-"&gt;&lt;/span&gt;
&lt;a href="#set-operations-in-action-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Union: {1, 2, 3, 4, 5}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Intersection: {3}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Difference: {1, 2}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Symmetric Difference: {1, 2, 4, 5}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Set Comprehensions 🧑‍🎨&lt;span class="hx-absolute -hx-mt-20" id="set-comprehensions-"&gt;&lt;/span&gt;
&lt;a href="#set-comprehensions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Just like list comprehensions, but with &lt;code&gt;{}&lt;/code&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: {0, 1, 4, 9, 16}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Limitations 🚫&lt;span class="hx-absolute -hx-mt-20" id="limitations-"&gt;&lt;/span&gt;
&lt;a href="#limitations-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No indexing/slicing:&lt;/strong&gt;
You cannot access elements by position.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only immutable items:&lt;/strong&gt;
You can’t put lists or dictionaries in a set, but you can use tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unordered:&lt;/strong&gt;
The order of elements is not preserved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Create a set with the numbers 1, 2, 2, 3, 4. How many elements will it have?&lt;span class="hx-absolute -hx-mt-20" id="1-create-a-set-with-the-numbers-1-2-2-3-4-how-many-elements-will-it-have"&gt;&lt;/span&gt;
&lt;a href="#1-create-a-set-with-the-numbers-1-2-2-3-4-how-many-elements-will-it-have" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Because sets remove duplicates!&lt;/p&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Add the number 5 to the set &lt;code&gt;{1, 2, 3}&lt;/code&gt;.&lt;span class="hx-absolute -hx-mt-20" id="2-add-the-number-5-to-the-set-1-2-3"&gt;&lt;/span&gt;
&lt;a href="#2-add-the-number-5-to-the-set-1-2-3" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: {1, 2, 3, 5}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Remove 2 from the set &lt;code&gt;{1, 2, 3}&lt;/code&gt; using both &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;discard()&lt;/code&gt;. What happens if you try to remove 10?&lt;span class="hx-absolute -hx-mt-20" id="3-remove-2-from-the-set-1-2-3-using-both-remove-and-discard-what-happens-if-you-try-to-remove-10"&gt;&lt;/span&gt;
&lt;a href="#3-remove-2-from-the-set-1-2-3-using-both-remove-and-discard-what-happens-if-you-try-to-remove-10" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Works fine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# s.remove(10) # Raises KeyError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# No error, does nothing&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ Find the intersection and union of &lt;code&gt;{1, 2, 3}&lt;/code&gt; and &lt;code&gt;{2, 3, 4}&lt;/code&gt;.&lt;span class="hx-absolute -hx-mt-20" id="4-find-the-intersection-and-union-of-1-2-3-and-2-3-4"&gt;&lt;/span&gt;
&lt;a href="#4-find-the-intersection-and-union-of-1-2-3-and-2-3-4" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Intersection: {2, 3}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Union: {1, 2, 3, 4}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ Use set comprehension to create a set of even numbers from 0 to 10.&lt;span class="hx-absolute -hx-mt-20" id="5-use-set-comprehension-to-create-a-set-of-even-numbers-from-0-to-10"&gt;&lt;/span&gt;
&lt;a href="#5-use-set-comprehension-to-create-a-set-of-even-numbers-from-0-to-10" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: {0, 2, 4, 6, 8, 10}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;When to Use Sets? 🤔&lt;span class="hx-absolute -hx-mt-20" id="when-to-use-sets-"&gt;&lt;/span&gt;
&lt;a href="#when-to-use-sets-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;When you need to store &lt;strong&gt;unique items&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When you want to do &lt;strong&gt;fast membership tests&lt;/strong&gt; (&lt;code&gt;x in s&lt;/code&gt; is very fast).&lt;/li&gt;
&lt;li&gt;When you need to perform &lt;strong&gt;mathematical set operations&lt;/strong&gt; (union, intersection, etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; are &lt;strong&gt;unordered&lt;/strong&gt; collections of &lt;strong&gt;unique&lt;/strong&gt; items: &lt;code&gt;{a, b, c}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No duplicates&lt;/strong&gt; allowed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No indexing or slicing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Great for membership tests and set operations&lt;/strong&gt; (union, intersection, difference)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutable:&lt;/strong&gt; You can add or remove items&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to know about &lt;strong&gt;frozen sets&lt;/strong&gt; (immutable sets) or have more questions, just ask! 😃&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
Sets are unordered, unique collections in Python, created with curly braces or the set() function, supporting mathematical set operations and various methods for adding, removing, and testing membership&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;OER-202301_Wang_2023-Introduction-to-Computer-Programming-with-Python.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;python-handbook.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>More on Tuples</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec6-more-on-tuples/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec6-more-on-tuples/</guid><description>
&lt;p&gt;Let’s go deeper into &lt;strong&gt;tuples&lt;/strong&gt; in Python, with clear explanations, emojis, step-by-step examples, and practice questions! 🚀🐍&lt;/p&gt;
&lt;h2&gt;What is a Tuple? 🤔&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-tuple-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-tuple-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;tuple&lt;/strong&gt; is an &lt;strong&gt;ordered&lt;/strong&gt;, &lt;strong&gt;immutable&lt;/strong&gt; sequence of elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ordered&lt;/strong&gt;: Elements keep their position.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutable&lt;/strong&gt;: You cannot change, add, or remove items after creation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can contain any type&lt;/strong&gt;: Numbers, strings, lists, even other tuples!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Creating Tuples 🛠️&lt;span class="hx-absolute -hx-mt-20" id="creating-tuples-"&gt;&lt;/span&gt;
&lt;a href="#creating-tuples-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;With parentheses&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Without parentheses&lt;/strong&gt; (comma-separated values):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single-element tuple&lt;/strong&gt; (must have a comma!):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using &lt;code&gt;tuple()&lt;/code&gt; constructor&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Accessing Tuple Elements 🔍&lt;span class="hx-absolute -hx-mt-20" id="accessing-tuple-elements-"&gt;&lt;/span&gt;
&lt;a href="#accessing-tuple-elements-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: 20&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Slicing&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: (10, 20)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Tuple Operations 🧮&lt;span class="hx-absolute -hx-mt-20" id="tuple-operations-"&gt;&lt;/span&gt;
&lt;a href="#tuple-operations-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Operation&lt;/th&gt;
&lt;th style="text-align: left"&gt;Example&lt;/th&gt;
&lt;th style="text-align: left"&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Concatenation&lt;/td&gt;
&lt;td style="text-align: left"&gt;(1, 2) + (3,)&lt;/td&gt;
&lt;td style="text-align: left"&gt;(1, 2, 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Repetition&lt;/td&gt;
&lt;td style="text-align: left"&gt;(1, 2) * 2&lt;/td&gt;
&lt;td style="text-align: left"&gt;(1, 2, 1, 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Membership&lt;/td&gt;
&lt;td style="text-align: left"&gt;2 in (1, 2, 3)&lt;/td&gt;
&lt;td style="text-align: left"&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Length&lt;/td&gt;
&lt;td style="text-align: left"&gt;len((1, 2, 3))&lt;/td&gt;
&lt;td style="text-align: left"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Iteration&lt;/td&gt;
&lt;td style="text-align: left"&gt;for x in t: &amp;hellip;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Each item in tuple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Tuple Methods 🛠️&lt;span class="hx-absolute -hx-mt-20" id="tuple-methods-"&gt;&lt;/span&gt;
&lt;a href="#tuple-methods-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Tuples have only &lt;strong&gt;two methods&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.count(x)&lt;/code&gt; — Counts how many times &lt;code&gt;x&lt;/code&gt; appears.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.index(x)&lt;/code&gt; — Returns the index of the first occurrence of &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Immutability &amp;amp; Nesting 🔒&lt;span class="hx-absolute -hx-mt-20" id="immutability--nesting-"&gt;&lt;/span&gt;
&lt;a href="#immutability--nesting-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;cannot&lt;/strong&gt; change tuple elements:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# ❌ Error!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;But if a tuple contains a mutable object (like a list), that object can be changed:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (1, [99, 3], 4)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Tuple Assignment &amp;amp; Swapping ✨&lt;span class="hx-absolute -hx-mt-20" id="tuple-assignment--swapping-"&gt;&lt;/span&gt;
&lt;a href="#tuple-assignment--swapping-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can assign multiple variables at once:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# or even&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;# Swaps values!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Tuple assignment is a neat way to swap variables without a temp variable&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Tuples as Return Values ⬅️&lt;span class="hx-absolute -hx-mt-20" id="tuples-as-return-values-"&gt;&lt;/span&gt;
&lt;a href="#tuples-as-return-values-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Functions can return multiple values using tuples:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 2 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a common Python idiom for returning several results at once&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Variable-length Argument Tuples 🌟&lt;span class="hx-absolute -hx-mt-20" id="variable-length-argument-tuples-"&gt;&lt;/span&gt;
&lt;a href="#variable-length-argument-tuples-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Functions can accept any number of arguments using &lt;code&gt;*args&lt;/code&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;printall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (1, 2, 3)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;args&lt;/code&gt; is a tuple of all arguments passed&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Tuples as Dictionary Keys 🗝️&lt;span class="hx-absolute -hx-mt-20" id="tuples-as-dictionary-keys-"&gt;&lt;/span&gt;
&lt;a href="#tuples-as-dictionary-keys-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tuples&lt;/strong&gt; can be used as dictionary keys (lists cannot!):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="c1"&gt;# Output: value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is possible because tuples are immutable and hashable&lt;sup id="fnref3:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;When to Use Tuples vs Lists? 🤷‍♂️&lt;span class="hx-absolute -hx-mt-20" id="when-to-use-tuples-vs-lists-"&gt;&lt;/span&gt;
&lt;a href="#when-to-use-tuples-vs-lists-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Feature&lt;/th&gt;
&lt;th style="text-align: left"&gt;Tuple&lt;/th&gt;
&lt;th style="text-align: left"&gt;List&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Mutable?&lt;/td&gt;
&lt;td style="text-align: left"&gt;❌ No (immutable)&lt;/td&gt;
&lt;td style="text-align: left"&gt;✅ Yes (mutable)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Can be dict key?&lt;/td&gt;
&lt;td style="text-align: left"&gt;✅ Yes&lt;/td&gt;
&lt;td style="text-align: left"&gt;❌ No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Syntax&lt;/td&gt;
&lt;td style="text-align: left"&gt;(1, 2, 3)&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref4:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Methods&lt;/td&gt;
&lt;td style="text-align: left"&gt;Few&lt;/td&gt;
&lt;td style="text-align: left"&gt;Many&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Use case&lt;/td&gt;
&lt;td style="text-align: left"&gt;Fixed data&lt;/td&gt;
&lt;td style="text-align: left"&gt;Data that changes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Use &lt;strong&gt;tuples&lt;/strong&gt; when you want a collection that shouldn’t change, or when you need to use it as a dictionary key&lt;sup id="fnref5:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Create a tuple with the elements &amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, and &amp;ldquo;c&amp;rdquo;. Print the second element.&lt;span class="hx-absolute -hx-mt-20" id="1-create-a-tuple-with-the-elements-a-b-and-c-print-the-second-element"&gt;&lt;/span&gt;
&lt;a href="#1-create-a-tuple-with-the-elements-a-b-and-c-print-the-second-element" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ What happens if you try to change a tuple value?&lt;span class="hx-absolute -hx-mt-20" id="2-what-happens-if-you-try-to-change-a-tuple-value"&gt;&lt;/span&gt;
&lt;a href="#2-what-happens-if-you-try-to-change-a-tuple-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# What will happen?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;p&gt;You will get an error!&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;pre&gt;&lt;code&gt;TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment&lt;/code&gt;&lt;/pre&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Use a tuple as a dictionary key.&lt;span class="hx-absolute -hx-mt-20" id="3-use-a-tuple-as-a-dictionary-key"&gt;&lt;/span&gt;
&lt;a href="#3-use-a-tuple-as-a-dictionary-key" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="c1"&gt;# Output: hello&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ Write a function that returns both the minimum and maximum of a list as a tuple.&lt;span class="hx-absolute -hx-mt-20" id="4-write-a-function-that-returns-both-the-minimum-and-maximum-of-a-list-as-a-tuple"&gt;&lt;/span&gt;
&lt;a href="#4-write-a-function-that-returns-both-the-minimum-and-maximum-of-a-list-as-a-tuple" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (1, 4)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ How do you create a tuple from a string?&lt;span class="hx-absolute -hx-mt-20" id="5-how-do-you-create-a-tuple-from-a-string"&gt;&lt;/span&gt;
&lt;a href="#5-how-do-you-create-a-tuple-from-a-string" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: (&amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Bonus: Named Tuples 🏷️&lt;span class="hx-absolute -hx-mt-20" id="bonus-named-tuples-"&gt;&lt;/span&gt;
&lt;a href="#bonus-named-tuples-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Python’s &lt;code&gt;collections&lt;/code&gt; module provides &lt;strong&gt;namedtuple&lt;/strong&gt; for tuples with named fields (like lightweight objects):&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Point&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;x y&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 1 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can access fields by name &lt;strong&gt;and&lt;/strong&gt; by index&lt;sup id="fnref6:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tuples&lt;/strong&gt;: ordered, immutable, can contain any type 🥇&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use as dictionary keys&lt;/strong&gt; 🗝️&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuple assignment&lt;/strong&gt; makes swapping and unpacking easy 🔄&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Great for fixed collections of data&lt;/strong&gt; 📦&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only two methods:&lt;/strong&gt; &lt;code&gt;.count()&lt;/code&gt; and &lt;code&gt;.index()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want more tuple tricks, just ask! 😃&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
Tuples are immutable, ordered collections, support indexing, slicing, concatenation, and can be used as dictionary keys. They are useful for fixed data and multiple return values, and support variable-length arguments with &lt;code&gt;*args&lt;/code&gt;&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref7:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;thinkpython2.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref6:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref7:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Learning_Python.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;python-handbook.pdf&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>List Comprehension</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec7-list-comprehensions/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec7-list-comprehensions/</guid><description>
&lt;p&gt;Let’s explore &lt;strong&gt;list comprehensions&lt;/strong&gt; in Python with simple explanations, emojis, step-by-step examples, and practice questions! 🚀📝&lt;/p&gt;
&lt;h2&gt;What is a List Comprehension? 🤔&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-list-comprehension-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-list-comprehension-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;list comprehension&lt;/strong&gt; is a concise way to create lists in Python.
It lets you build a new list by applying an &lt;strong&gt;expression&lt;/strong&gt; to each item in an &lt;strong&gt;iterable&lt;/strong&gt; (like a list, string, or range), all in a single line!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt;: What you want to do with each item (e.g., multiply by 2).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;item&lt;/strong&gt;: A variable name for each element.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iterable&lt;/strong&gt;: The collection you loop over (list, range, etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic Example 🏗️&lt;span class="hx-absolute -hx-mt-20" id="basic-example-"&gt;&lt;/span&gt;
&lt;a href="#basic-example-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let’s make a list of squares for numbers 0 to 4:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [0, 1, 4, 9, 16]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This is the same as using a for loop, but much shorter!&lt;/em&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;With Condition (Filtering) 🧹&lt;span class="hx-absolute -hx-mt-20" id="with-condition-filtering-"&gt;&lt;/span&gt;
&lt;a href="#with-condition-filtering-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can add an &lt;strong&gt;if&lt;/strong&gt; condition to filter items:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [0, 2, 4, 6, 8]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Only even numbers are included!&lt;/em&gt;&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;Nested Loops in List Comprehensions 🔄&lt;span class="hx-absolute -hx-mt-20" id="nested-loops-in-list-comprehensions-"&gt;&lt;/span&gt;
&lt;a href="#nested-loops-in-list-comprehensions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can use more than one &lt;strong&gt;for&lt;/strong&gt; in a comprehension (like nested loops):&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [(1, 3), (1, 4), (2, 3), (2, 4)]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This creates all combinations of x and y.&lt;/em&gt;&lt;sup id="fnref2:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;Real-World Example: Remove Whitespace from Lines 📄&lt;span class="hx-absolute -hx-mt-20" id="real-world-example-remove-whitespace-from-lines-"&gt;&lt;/span&gt;
&lt;a href="#real-world-example-remove-whitespace-from-lines-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Suppose you have a list of strings with extra spaces:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34; hello&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34; world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34; python&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;python&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Quickly cleans up every line!&lt;/em&gt;&lt;sup id="fnref3:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;List Comprehension vs. For Loop ⚔️&lt;span class="hx-absolute -hx-mt-20" id="list-comprehension-vs-for-loop-"&gt;&lt;/span&gt;
&lt;a href="#list-comprehension-vs-for-loop-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left"&gt;For Loop Example&lt;/th&gt;
&lt;th style="text-align: left"&gt;List Comprehension Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Squares of 0–4&lt;/td&gt;
&lt;td style="text-align: left"&gt;squares = []&lt;br&gt;for x in range(5):&lt;br&gt; squares.append(x**2)&lt;/td&gt;
&lt;td style="text-align: left"&gt;squares = [x**2 for x in range(5)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Filter evens from 0–9&lt;/td&gt;
&lt;td style="text-align: left"&gt;evens = []&lt;br&gt;for x in range(10):&lt;br&gt;if x % 2 == 0:&lt;br&gt;evens.append(x)&lt;/td&gt;
&lt;td style="text-align: left"&gt;evens = [x for x in range(10) if x % 2 == 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;List comprehensions are more concise and often faster!&lt;/em&gt;&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref4:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;Advanced: Nested Comprehensions &amp;amp; Conditions 🌟&lt;span class="hx-absolute -hx-mt-20" id="advanced-nested-comprehensions--conditions-"&gt;&lt;/span&gt;
&lt;a href="#advanced-nested-comprehensions--conditions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can combine multiple for loops and if conditions:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [2, 3, 2, 3, 4, 6]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;All products of x and y, except when x equals y.&lt;/em&gt;&lt;sup id="fnref5:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Create a list of cubes for numbers 0 to 5.&lt;span class="hx-absolute -hx-mt-20" id="1-create-a-list-of-cubes-for-numbers-0-to-5"&gt;&lt;/span&gt;
&lt;a href="#1-create-a-list-of-cubes-for-numbers-0-to-5" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cubes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [0, 1, 8, 27, 64, 125]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Make a list of all vowels in the string &lt;code&gt;&amp;quot;hello world&amp;quot;&lt;/code&gt;.&lt;span class="hx-absolute -hx-mt-20" id="2-make-a-list-of-all-vowels-in-the-string-hello-world"&gt;&lt;/span&gt;
&lt;a href="#2-make-a-list-of-all-vowels-in-the-string-hello-world" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;aeiou&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;e&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;o&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ From the list &lt;code&gt;[2, -3, 5, -7, 8]&lt;/code&gt;, create a new list with only the positive numbers.&lt;span class="hx-absolute -hx-mt-20" id="3-from-the-list-2--3-5--7-8-create-a-new-list-with-only-the-positive-numbers"&gt;&lt;/span&gt;
&lt;a href="#3-from-the-list-2--3-5--7-8-create-a-new-list-with-only-the-positive-numbers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;positives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positives&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [2, 5, 8]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ Create a list of all pairs &lt;code&gt;(x, y)&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is from &lt;code&gt;1-3&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is from &lt;code&gt;a-c&lt;/code&gt;.&lt;span class="hx-absolute -hx-mt-20" id="4-create-a-list-of-all-pairs-x-y-where-x-is-from-1-3-and-y-is-from-a-c"&gt;&lt;/span&gt;
&lt;a href="#4-create-a-list-of-all-pairs-x-y-where-x-is-from-1-3-and-y-is-from-a-c" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: [(1, &amp;#39;a&amp;#39;), (1, &amp;#39;b&amp;#39;), (1, &amp;#39;c&amp;#39;), (2, &amp;#39;a&amp;#39;), (2, &amp;#39;b&amp;#39;), (2, &amp;#39;c&amp;#39;), (3, &amp;#39;a&amp;#39;), (3, &amp;#39;b&amp;#39;), (3, &amp;#39;c&amp;#39;)]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ Given a list of words, create a new list with only words longer than 3 letters.&lt;span class="hx-absolute -hx-mt-20" id="5-given-a-list-of-words-create-a-new-list-with-only-words-longer-than-3-letters"&gt;&lt;/span&gt;
&lt;a href="#5-given-a-list-of-words-create-a-new-list-with-only-words-longer-than-3-letters" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;sun&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;long_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;long_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;hello&amp;#39;, &amp;#39;python&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;List comprehensions&lt;/strong&gt; are a compact, readable way to build lists 🏗️&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;if&lt;/strong&gt; for filtering 🧹&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;multiple for&lt;/strong&gt; for nested loops 🔄&lt;/li&gt;
&lt;li&gt;Faster and cleaner than regular for loops ⚡&lt;/li&gt;
&lt;li&gt;Can be used with any iterable (lists, strings, files, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to know about &lt;strong&gt;set comprehensions&lt;/strong&gt; or &lt;strong&gt;dictionary comprehensions&lt;/strong&gt;, just ask! 😃&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
List comprehensions provide a concise syntax for creating lists and can include filtering and nested loops. They are often faster and more readable than traditional for loops&lt;sup id="fnref1:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref6:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;python-handbook.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Learning_Python.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref6:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Introduction_to_Python_Programming_-_WEB.pdf&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Introduction to Functions</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec8-introduction-to-functions/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec8-introduction-to-functions/</guid><description>
&lt;p&gt;Let’s get started with an &lt;strong&gt;introduction to functions in Python&lt;/strong&gt;! 🚀🐍&lt;/p&gt;
&lt;h2&gt;What is a Function? 🤔&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-function-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-function-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a named block of code that performs a specific task.
You can use a function whenever you need to repeat the same action multiple times in your program, or to organize your code into smaller, manageable pieces.
Functions help make your code &lt;strong&gt;reusable&lt;/strong&gt;, &lt;strong&gt;modular&lt;/strong&gt;, and &lt;strong&gt;easier to read&lt;/strong&gt;!&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Why Use Functions? 🎯&lt;span class="hx-absolute -hx-mt-20" id="why-use-functions-"&gt;&lt;/span&gt;
&lt;a href="#why-use-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid repetition:&lt;/strong&gt; Write code once, use it many times.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organize code:&lt;/strong&gt; Break big problems into smaller, logical steps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make code reusable:&lt;/strong&gt; Use the same function in different places.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easier to test and debug:&lt;/strong&gt; Fix issues in one place.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Defining a Function 🛠️&lt;span class="hx-absolute -hx-mt-20" id="defining-a-function-"&gt;&lt;/span&gt;
&lt;a href="#defining-a-function-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You define a function using the &lt;strong&gt;def&lt;/strong&gt; keyword:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;def&lt;/strong&gt;: Tells Python you’re defining a function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;greet&lt;/strong&gt;: The function’s name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;()&lt;/strong&gt;: Parentheses (can hold parameters).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;: (colon)&lt;/strong&gt;: Start of the function’s code block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indented code&lt;/strong&gt;: The body of the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Calling (Using) a Function 📞&lt;span class="hx-absolute -hx-mt-20" id="calling-using-a-function-"&gt;&lt;/span&gt;
&lt;a href="#calling-using-a-function-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To use (call) the function, just write its name followed by parentheses:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello, world!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Functions with Parameters and Return Values 🎁&lt;span class="hx-absolute -hx-mt-20" id="functions-with-parameters-and-return-values-"&gt;&lt;/span&gt;
&lt;a href="#functions-with-parameters-and-return-values-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can pass information to a function using &lt;strong&gt;parameters&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello, Alice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A function can also &lt;strong&gt;return&lt;/strong&gt; a value:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;return&lt;/strong&gt; sends a value back to where the function was called.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Built-in vs. User-defined Functions 🏗️&lt;span class="hx-absolute -hx-mt-20" id="built-in-vs-user-defined-functions-"&gt;&lt;/span&gt;
&lt;a href="#built-in-vs-user-defined-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Built-in functions&lt;/strong&gt;: Already provided by Python (like &lt;code&gt;print()&lt;/code&gt;, &lt;code&gt;len()&lt;/code&gt;, &lt;code&gt;sum()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User-defined functions&lt;/strong&gt;: You create them for your own needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Anatomy of a Function 🧩&lt;span class="hx-absolute -hx-mt-20" id="anatomy-of-a-function-"&gt;&lt;/span&gt;
&lt;a href="#anatomy-of-a-function-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Part&lt;/th&gt;
&lt;th style="text-align: left"&gt;Example&lt;/th&gt;
&lt;th style="text-align: left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Name&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;def greet():&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;How you call the function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Parameters&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;(name)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Data you give to the function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Body&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;print(&amp;quot;Hello&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;The code that runs when called&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Return value&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;return x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;What the function gives back (optional)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Write a function that prints &amp;ldquo;Python is fun!&amp;rdquo;&lt;span class="hx-absolute -hx-mt-20" id="1-write-a-function-that-prints-python-is-fun"&gt;&lt;/span&gt;
&lt;a href="#1-write-a-function-that-prints-python-is-fun" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_fun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Python is fun!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;say_fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Write a function that takes a number and returns its square.&lt;span class="hx-absolute -hx-mt-20" id="2-write-a-function-that-takes-a-number-and-returns-its-square"&gt;&lt;/span&gt;
&lt;a href="#2-write-a-function-that-takes-a-number-and-returns-its-square" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Write a function that takes two numbers and prints their sum.&lt;span class="hx-absolute -hx-mt-20" id="3-write-a-function-that-takes-two-numbers-and-prints-their-sum"&gt;&lt;/span&gt;
&lt;a href="#3-write-a-function-that-takes-two-numbers-and-prints-their-sum" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;print_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ What happens if you call a function without parentheses?&lt;span class="hx-absolute -hx-mt-20" id="4-what-happens-if-you-call-a-function-without-parentheses"&gt;&lt;/span&gt;
&lt;a href="#4-what-happens-if-you-call-a-function-without-parentheses" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;p&gt;You get a reference to the function object, not its result!&lt;br&gt;
Example:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hi!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: &amp;lt;function greet at ...&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ Write a function that returns both the sum and product of two numbers.&lt;span class="hx-absolute -hx-mt-20" id="5-write-a-function-that-returns-both-the-sum-and-product-of-two-numbers"&gt;&lt;/span&gt;
&lt;a href="#5-write-a-function-that-returns-both-the-sum-and-product-of-two-numbers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_and_product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_and_product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 7 10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt; = reusable blocks of code 🧱&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;def&lt;/strong&gt; to define, &lt;strong&gt;()&lt;/strong&gt; to call&lt;/li&gt;
&lt;li&gt;Can take &lt;strong&gt;parameters&lt;/strong&gt; and &lt;strong&gt;return&lt;/strong&gt; values&lt;/li&gt;
&lt;li&gt;Make code cleaner, shorter, and easier to manage!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to learn about &lt;strong&gt;default values&lt;/strong&gt;, &lt;strong&gt;keyword arguments&lt;/strong&gt;, &lt;strong&gt;recursion&lt;/strong&gt;, or &lt;strong&gt;lambda (anonymous) functions&lt;/strong&gt;, just ask! 😃&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
Functions are named blocks of code that can take parameters, may return values, and help organize, reuse, and structure your programs&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.
You define them with &lt;code&gt;def&lt;/code&gt;, call them with &lt;code&gt;()&lt;/code&gt;, and use them to make your code modular and efficient.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;OER-202301_Wang_2023-Introduction-to-Computer-Programming-with-Python.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;itpacs_cafiero.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>More Examples of Functions</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec9-more-examples-of-functions/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec9-more-examples-of-functions/</guid><description>
&lt;p&gt;Here are &lt;strong&gt;more examples of functions in Python&lt;/strong&gt; with clear explanations, step-by-step code, emojis, and practice questions! 🚀&lt;/p&gt;
&lt;h2&gt;1. Function to Calculate the Square of a Number 🟦&lt;span class="hx-absolute -hx-mt-20" id="1-function-to-calculate-the-square-of-a-number-"&gt;&lt;/span&gt;
&lt;a href="#1-function-to-calculate-the-square-of-a-number-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 49&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;You can call &lt;code&gt;square()&lt;/code&gt; with any number, and it returns the square!&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Function to Cube a Number 🟩&lt;span class="hx-absolute -hx-mt-20" id="2-function-to-cube-a-number-"&gt;&lt;/span&gt;
&lt;a href="#2-function-to-cube-a-number-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 1000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This function raises the input to the power of 3!&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Function with Multiple Parameters ➕&lt;span class="hx-absolute -hx-mt-20" id="3-function-with-multiple-parameters-"&gt;&lt;/span&gt;
&lt;a href="#3-function-with-multiple-parameters-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;You can pass two numbers, and it returns their sum!&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Function Returning Multiple Values 🧑‍🤝‍🧑&lt;span class="hx-absolute -hx-mt-20" id="4-function-returning-multiple-values-"&gt;&lt;/span&gt;
&lt;a href="#4-function-returning-multiple-values-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min_and_max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_and_max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Smallest:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Smallest: 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Largest:&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Largest: 8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Functions can return more than one value as a tuple!&lt;sup id="fnref3:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. Function with No Return (Just Prints) 📢&lt;span class="hx-absolute -hx-mt-20" id="5-function-with-no-return-just-prints-"&gt;&lt;/span&gt;
&lt;a href="#5-function-with-no-return-just-prints-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello, Alice!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If there is no &lt;code&gt;return&lt;/code&gt;, Python returns &lt;code&gt;None&lt;/code&gt; by default!&lt;sup id="fnref4:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. Function with a Default Parameter Value 🧑‍💻&lt;span class="hx-absolute -hx-mt-20" id="6-function-with-a-default-parameter-value-"&gt;&lt;/span&gt;
&lt;a href="#6-function-with-a-default-parameter-value-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 9 (3 squared)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 27 (3 cubed)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t provide the second argument, it uses the default!&lt;sup id="fnref5:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7. Function That Modifies a List (Mutable Argument) 📝&lt;span class="hx-absolute -hx-mt-20" id="7-function-that-modifies-a-list-mutable-argument-"&gt;&lt;/span&gt;
&lt;a href="#7-function-that-modifies-a-list-mutable-argument-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append_waffles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Waffles&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;breakfast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Oatmeal&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Eggs&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Pancakes&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;append_waffles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;breakfast&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: [&amp;#39;Oatmeal&amp;#39;, &amp;#39;Eggs&amp;#39;, &amp;#39;Pancakes&amp;#39;, &amp;#39;Waffles&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The original list is changed because lists are mutable!&lt;sup id="fnref6:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8. Recursive Function (Factorial) 🔁&lt;span class="hx-absolute -hx-mt-20" id="8-recursive-function-factorial-"&gt;&lt;/span&gt;
&lt;a href="#8-recursive-function-factorial-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 120&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The function calls itself to compute the factorial!&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;9. Lambda (Anonymous) Function ⚡&lt;span class="hx-absolute -hx-mt-20" id="9-lambda-anonymous-function-"&gt;&lt;/span&gt;
&lt;a href="#9-lambda-anonymous-function-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Quick, unnamed function for simple operations!&lt;sup id="fnref2:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;10. Function for User Input and Conversion 🧑‍💻&lt;span class="hx-absolute -hx-mt-20" id="10-function-for-user-input-and-conversion-"&gt;&lt;/span&gt;
&lt;a href="#10-function-for-user-input-and-conversion-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Enter an integer: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Example usage:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# num = get_integer()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# print(num)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Useful for safely getting numbers from users!&lt;sup id="fnref3:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Write a function that returns the successor of any integer.&lt;span class="hx-absolute -hx-mt-20" id="1-write-a-function-that-returns-the-successor-of-any-integer"&gt;&lt;/span&gt;
&lt;a href="#1-write-a-function-that-returns-the-successor-of-any-integer" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;successor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;successor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 11&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Write a function that checks if a number is even.&lt;span class="hx-absolute -hx-mt-20" id="2-write-a-function-that-checks-if-a-number-is-even"&gt;&lt;/span&gt;
&lt;a href="#2-write-a-function-that-checks-if-a-number-is-even" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: False&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Write a function that takes a list and returns True if it has an even number of elements.&lt;span class="hx-absolute -hx-mt-20" id="3-write-a-function-that-takes-a-list-and-returns-true-if-it-has-an-even-number-of-elements"&gt;&lt;/span&gt;
&lt;a href="#3-write-a-function-that-takes-a-list-and-returns-true-if-it-has-an-even-number-of-elements" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_even_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_even_length&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# Output: True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_even_length&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# Output: False&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ Write a function that takes two numbers and prints their sum (no return).&lt;span class="hx-absolute -hx-mt-20" id="4-write-a-function-that-takes-two-numbers-and-prints-their-sum-no-return"&gt;&lt;/span&gt;
&lt;a href="#4-write-a-function-that-takes-two-numbers-and-prints-their-sum-no-return" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;print_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 15&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ Write a function that returns the product of all odd numbers between 1 and n.&lt;span class="hx-absolute -hx-mt-20" id="5-write-a-function-that-returns-the-product-of-all-odd-numbers-between-1-and-n"&gt;&lt;/span&gt;
&lt;a href="#5-write-a-function-that-returns-the-product-of-all-odd-numbers-between-1-and-n" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product_of_odds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_of_odds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 105 (1*3*5*7)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Functions can have &lt;strong&gt;parameters&lt;/strong&gt;, &lt;strong&gt;return values&lt;/strong&gt;, or &lt;strong&gt;side effects&lt;/strong&gt; (like printing).&lt;/li&gt;
&lt;li&gt;Functions can return &lt;strong&gt;multiple values&lt;/strong&gt; as tuples.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;default arguments&lt;/strong&gt; to make parameters optional.&lt;/li&gt;
&lt;li&gt;Functions can be &lt;strong&gt;recursive&lt;/strong&gt; (call themselves).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lambda functions&lt;/strong&gt; are quick, unnamed functions for simple tasks.&lt;/li&gt;
&lt;li&gt;Functions help you &lt;strong&gt;organize&lt;/strong&gt;, &lt;strong&gt;reuse&lt;/strong&gt;, and &lt;strong&gt;test&lt;/strong&gt; your code easily!&lt;sup id="fnref7:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref4:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want more advanced examples (like generators, decorators, or closures), just ask! 😃&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
Functions can take arguments, return values, modify mutable objects, be recursive, and can be anonymous (lambda). They are essential for organizing and reusing code efficiently in Python&lt;sup id="fnref8:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref5:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;itpacs_cafiero.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref6:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref7:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref8:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;OER-202301_Wang_2023-Introduction-to-Computer-Programming-with-Python.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Types of Functions Arguments</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec10-types-of-functions-arguments/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec10-types-of-functions-arguments/</guid><description>
&lt;p&gt;Great question! In Python, there are &lt;strong&gt;several types of function arguments&lt;/strong&gt; you can use to make your functions flexible and powerful. Let’s go through them step by step with clear explanations, emojis, code examples, and practice questions! 🚀&lt;/p&gt;
&lt;h2&gt;1. &lt;strong&gt;Positional Arguments&lt;/strong&gt; 📍&lt;span class="hx-absolute -hx-mt-20" id="1-positional-arguments-"&gt;&lt;/span&gt;
&lt;a href="#1-positional-arguments-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These are the most common. Values are assigned to parameters based on their position in the function call.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you are &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello Alice, you are 25 years old.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;2. &lt;strong&gt;Keyword Arguments&lt;/strong&gt; 🏷️&lt;span class="hx-absolute -hx-mt-20" id="2-keyword-arguments-"&gt;&lt;/span&gt;
&lt;a href="#2-keyword-arguments-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can specify which parameter gets which value by using the parameter name in the call. This makes the order unimportant.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello Alice, you are 25 years old.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Order doesn’t matter when using keywords![1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. &lt;strong&gt;Default Arguments&lt;/strong&gt; 🛡️&lt;span class="hx-absolute -hx-mt-20" id="3-default-arguments-"&gt;&lt;/span&gt;
&lt;a href="#3-default-arguments-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can give a parameter a default value. If you don’t provide a value when calling, the default is used.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you are &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello Bob, you are 18 years old.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Carol&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello Carol, you are 30 years old.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Parameters with default values must come &lt;strong&gt;after&lt;/strong&gt; those without defaults![1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. &lt;strong&gt;Variable-Length Positional Arguments (&lt;code&gt;*args&lt;/code&gt;)&lt;/strong&gt; 🌟&lt;span class="hx-absolute -hx-mt-20" id="4-variable-length-positional-arguments--"&gt;&lt;/span&gt;
&lt;a href="#4-variable-length-positional-arguments--" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Use &lt;code&gt;*args&lt;/code&gt; to accept any number of positional arguments. They are collected as a tuple.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: (1, 2, 3) \n 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: (5, 10, 15, 20) \n 50&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Use when you don’t know how many arguments will be passed![1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. &lt;strong&gt;Variable-Length Keyword Arguments (&lt;code&gt;**kwargs&lt;/code&gt;)&lt;/strong&gt; 🧩&lt;span class="hx-absolute -hx-mt-20" id="5-variable-length-keyword-arguments--"&gt;&lt;/span&gt;
&lt;a href="#5-variable-length-keyword-arguments--" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Use &lt;code&gt;**kwargs&lt;/code&gt; to accept any number of keyword arguments. They are collected as a dictionary.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;describe_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;describe_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Delhi&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: {&amp;#39;name&amp;#39;: &amp;#39;Alice&amp;#39;, &amp;#39;age&amp;#39;: 25, &amp;#39;city&amp;#39;: &amp;#39;Delhi&amp;#39;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Use for flexible, named options![1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. &lt;strong&gt;Keyword-Only Arguments&lt;/strong&gt; 🔑&lt;span class="hx-absolute -hx-mt-20" id="6-keyword-only-arguments-"&gt;&lt;/span&gt;
&lt;a href="#6-keyword-only-arguments-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Arguments that must be specified by name (after a &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;*args&lt;/code&gt; in the function definition).&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# example(1, 2) # ❌ Error: b must be specified as a keyword!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Useful for clarity and to avoid mistakes![1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7. &lt;strong&gt;Combining Argument Types&lt;/strong&gt; 🧙&lt;span class="hx-absolute -hx-mt-20" id="7-combining-argument-types-"&gt;&lt;/span&gt;
&lt;a href="#7-combining-argument-types-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can combine these types for very flexible functions, but follow this order in your function definition:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;pre&gt;&lt;code&gt;def func(positional, default=val, *args, kwonly, **kwargs):
pass&lt;/code&gt;&lt;/pre&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Positional → Default → *args → Keyword-only → **kwargs[1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Write a function that takes any number of numbers and returns their product.&lt;span class="hx-absolute -hx-mt-20" id="1-write-a-function-that-takes-any-number-of-numbers-and-returns-their-product"&gt;&lt;/span&gt;
&lt;a href="#1-write-a-function-that-takes-any-number-of-numbers-and-returns-their-product" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiply_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 24&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Write a function that prints a greeting. If no name is given, it should greet &amp;ldquo;World&amp;rdquo;.&lt;span class="hx-absolute -hx-mt-20" id="2-write-a-function-that-prints-a-greeting-if-no-name-is-given-it-should-greet-world"&gt;&lt;/span&gt;
&lt;a href="#2-write-a-function-that-prints-a-greeting-if-no-name-is-given-it-should-greet-world" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello, World!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello, Python!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Write a function that accepts any number of keyword arguments and prints them.&lt;span class="hx-absolute -hx-mt-20" id="3-write-a-function-that-accepts-any-number-of-keyword-arguments-and-prints-them"&gt;&lt;/span&gt;
&lt;a href="#3-write-a-function-that-accepts-any-number-of-keyword-arguments-and-prints-them" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;print_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ Write a function that takes two required arguments and one keyword-only argument.&lt;span class="hx-absolute -hx-mt-20" id="4-write-a-function-that-takes-two-required-arguments-and-one-keyword-only-argument"&gt;&lt;/span&gt;
&lt;a href="#4-write-a-function-that-takes-two-required-arguments-and-one-keyword-only-argument" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Positional&lt;/strong&gt;: Order matters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyword&lt;/strong&gt;: Specify by name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default&lt;/strong&gt;: Optional values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*args&lt;/strong&gt;: Any number of positional arguments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;**kwargs&lt;/strong&gt;: Any number of keyword arguments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyword-only&lt;/strong&gt;: Must be named in the call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want more examples or want to practice, just ask! 😃&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Positional, keyword, default, variable-length (&lt;code&gt;*args&lt;/code&gt;, &lt;code&gt;**kwargs&lt;/code&gt;), and keyword-only arguments are all supported in Python, allowing flexible and powerful function definitions[1][2].&lt;/li&gt;
&lt;li&gt;You can combine these for maximum flexibility, but must follow the proper order in the function header[1].&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Types of Functions</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec11-types-of-functions/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-4/lec11-types-of-functions/</guid><description>
&lt;p&gt;Here’s a clear and friendly guide to the &lt;strong&gt;types of functions in Python&lt;/strong&gt;, with examples, emojis, and practice questions! 🚀&lt;/p&gt;
&lt;h2&gt;1. &lt;strong&gt;Built-in Functions&lt;/strong&gt; 🏗️&lt;span class="hx-absolute -hx-mt-20" id="1-built-in-functions-"&gt;&lt;/span&gt;
&lt;a href="#1-built-in-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These are functions that Python provides by default—no need to define them yourself!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Prints to the screen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Returns length of a list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Returns the largest value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;2. &lt;strong&gt;User-defined Functions&lt;/strong&gt; ✍️&lt;span class="hx-absolute -hx-mt-20" id="2-user-defined-functions-"&gt;&lt;/span&gt;
&lt;a href="#2-user-defined-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These are functions you create using the &lt;code&gt;def&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello, Alice!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;3. &lt;strong&gt;Fruitful Functions (Return a Value)&lt;/strong&gt; 🍎&lt;span class="hx-absolute -hx-mt-20" id="3-fruitful-functions-return-a-value-"&gt;&lt;/span&gt;
&lt;a href="#3-fruitful-functions-return-a-value-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These functions &lt;strong&gt;return&lt;/strong&gt; a value using the &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Also called &lt;strong&gt;non-void functions&lt;/strong&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. &lt;strong&gt;Void Functions (No Return Value)&lt;/strong&gt; 🚫&lt;span class="hx-absolute -hx-mt-20" id="4-void-functions-no-return-value-"&gt;&lt;/span&gt;
&lt;a href="#4-void-functions-no-return-value-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These functions &lt;strong&gt;do not return a value&lt;/strong&gt;. They might print something or perform an action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Output: Hello!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: None&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The special value &lt;code&gt;None&lt;/code&gt; is returned automatically&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. &lt;strong&gt;Anonymous (Lambda) Functions&lt;/strong&gt; ⚡&lt;span class="hx-absolute -hx-mt-20" id="5-anonymous-lambda-functions-"&gt;&lt;/span&gt;
&lt;a href="#5-anonymous-lambda-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Quick, unnamed functions defined with the &lt;code&gt;lambda&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;6. &lt;strong&gt;Recursive Functions&lt;/strong&gt; 🔁&lt;span class="hx-absolute -hx-mt-20" id="6-recursive-functions-"&gt;&lt;/span&gt;
&lt;a href="#6-recursive-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Functions that &lt;strong&gt;call themselves&lt;/strong&gt; to solve a problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 120&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;7. &lt;strong&gt;Module Functions&lt;/strong&gt; 📦&lt;span class="hx-absolute -hx-mt-20" id="7-module-functions-"&gt;&lt;/span&gt;
&lt;a href="#7-module-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Functions defined &lt;strong&gt;inside a module&lt;/strong&gt; (a separate Python file) and imported for use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 4.0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sqrt()&lt;/code&gt; is a function in the &lt;code&gt;math&lt;/code&gt; module&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8. &lt;strong&gt;Methods&lt;/strong&gt; 🛠️&lt;span class="hx-absolute -hx-mt-20" id="8-methods-"&gt;&lt;/span&gt;
&lt;a href="#8-methods-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Functions that &lt;strong&gt;belong to objects&lt;/strong&gt; (like lists, strings, etc.).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# append() is a list method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Methods are called with a dot, like &lt;code&gt;object.method()&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practice Questions &amp;amp; Solutions 📝&lt;span class="hx-absolute -hx-mt-20" id="practice-questions--solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions--solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1️⃣ Write a fruitful function that returns the square of a number.&lt;span class="hx-absolute -hx-mt-20" id="1-write-a-fruitful-function-that-returns-the-square-of-a-number"&gt;&lt;/span&gt;
&lt;a href="#1-write-a-fruitful-function-that-returns-the-square-of-a-number" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 36&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;2️⃣ Write a void function that prints &amp;ldquo;Good morning!&amp;rdquo;.&lt;span class="hx-absolute -hx-mt-20" id="2-write-a-void-function-that-prints-good-morning"&gt;&lt;/span&gt;
&lt;a href="#2-write-a-void-function-that-prints-good-morning" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_morning&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Good morning!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;say_morning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Output: Good morning!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;3️⃣ Use a lambda function to triple a number.&lt;span class="hx-absolute -hx-mt-20" id="3-use-a-lambda-function-to-triple-a-number"&gt;&lt;/span&gt;
&lt;a href="#3-use-a-lambda-function-to-triple-a-number" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;triple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;4️⃣ What type of function is &lt;code&gt;math.sin()&lt;/code&gt;? How do you use it?&lt;span class="hx-absolute -hx-mt-20" id="4-what-type-of-function-is-mathsin-how-do-you-use-it"&gt;&lt;/span&gt;
&lt;a href="#4-what-type-of-function-is-mathsin-how-do-you-use-it" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;p&gt;It is a &lt;strong&gt;module function&lt;/strong&gt; from the &lt;code&gt;math&lt;/code&gt; module.&lt;br&gt;
Example:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 0.0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;5️⃣ Write a recursive function to sum all numbers from 1 to n.&lt;span class="hx-absolute -hx-mt-20" id="5-write-a-recursive-function-to-sum-all-numbers-from-1-to-n"&gt;&lt;/span&gt;
&lt;a href="#5-write-a-recursive-function-to-sum-all-numbers-from-1-to-n" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;details&gt;
&lt;summary&gt;Show Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_to_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum_to_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_to_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 15&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;Key Points with Emojis 🎯&lt;span class="hx-absolute -hx-mt-20" id="key-points-with-emojis-"&gt;&lt;/span&gt;
&lt;a href="#key-points-with-emojis-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Built-in&lt;/strong&gt;: Provided by Python 🏗️&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User-defined&lt;/strong&gt;: You create them ✍️&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fruitful&lt;/strong&gt;: Return a value 🍎&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Void&lt;/strong&gt;: No return 🚫&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lambda&lt;/strong&gt;: Anonymous, quick ⚡&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive&lt;/strong&gt;: Call themselves 🔁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module&lt;/strong&gt;: From imported files 📦&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methods&lt;/strong&gt;: Belong to objects 🛠️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want more details or examples for any type, just ask! 😃&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fruitful (returning value) and void (no return) functions are common distinctions in Python&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Module functions are imported from modules like &lt;code&gt;math&lt;/code&gt;&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Methods are functions bound to objects, such as strings and lists&lt;sup id="fnref1:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;thinkpython2.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;python_tutorial.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;itpacs_cafiero.pdf&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Dictionaries</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-5/lec1-dictionaries/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-5/lec1-dictionaries/</guid><description>
&lt;p&gt;Let’s dive into &lt;strong&gt;Dictionaries in Python&lt;/strong&gt; 🗝️📚 with clear explanations, emojis, and practice questions (with solutions)!&lt;/p&gt;
&lt;h2&gt;What is a Dictionary? 🤔&lt;span class="hx-absolute -hx-mt-20" id="what-is-a-dictionary-"&gt;&lt;/span&gt;
&lt;a href="#what-is-a-dictionary-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;dictionary&lt;/strong&gt; in Python is a &lt;strong&gt;mutable&lt;/strong&gt; (changeable) data structure that stores data as &lt;strong&gt;key-value pairs&lt;/strong&gt;. Think of it like a real dictionary: you look up a word (key) to get its definition (value)&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keys&lt;/strong&gt;: Must be unique and hashable (like strings, numbers, or tuples of immutables).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Values&lt;/strong&gt;: Can be any data type (even lists or other dictionaries).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt;: Curly braces &lt;code&gt;{}&lt;/code&gt; and colon &lt;code&gt;:&lt;/code&gt; separate keys and values.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Example dictionary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;major&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;CS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;📝 &lt;em&gt;Here, &amp;ldquo;name&amp;rdquo;, &amp;ldquo;age&amp;rdquo;, and &amp;ldquo;major&amp;rdquo; are keys; &amp;ldquo;Alice&amp;rdquo;, 20, and &amp;ldquo;CS&amp;rdquo; are values.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Key Features of Dictionaries 🏆&lt;span class="hx-absolute -hx-mt-20" id="key-features-of-dictionaries-"&gt;&lt;/span&gt;
&lt;a href="#key-features-of-dictionaries-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unordered&lt;/strong&gt;: Items are not stored in a specific order (though Python 3.7+ preserves insertion order).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutable&lt;/strong&gt;: You can add, change, or remove items after creation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Duplicate Keys&lt;/strong&gt;: Each key must be unique. If you assign a value to an existing key, it will overwrite the old value&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast Lookups&lt;/strong&gt;: Accessing a value by key is very quick.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Creating Dictionaries 🛠️&lt;span class="hx-absolute -hx-mt-20" id="creating-dictionaries-"&gt;&lt;/span&gt;
&lt;a href="#creating-dictionaries-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Empty dictionary:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;With initial values:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;From a list of tuples:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Accessing Items 🔎&lt;span class="hx-absolute -hx-mt-20" id="accessing-items-"&gt;&lt;/span&gt;
&lt;a href="#accessing-items-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;By key:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Output: Bob&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If the key doesn’t exist, you get a &lt;code&gt;KeyError&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using &lt;code&gt;.get()&lt;/code&gt; method:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 0 (default value)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Safer, as it returns &lt;code&gt;None&lt;/code&gt; or a default value if the key is missing&lt;sup id="fnref2:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Modifying Dictionaries ✏️&lt;span class="hx-absolute -hx-mt-20" id="modifying-dictionaries-"&gt;&lt;/span&gt;
&lt;a href="#modifying-dictionaries-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Add or update a key-value pair:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;city&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Delhi&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# Adds a new key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="c1"&gt;# Updates existing key&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Remove an item:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;city&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Removes key &amp;#39;city&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Removes &amp;#39;age&amp;#39; and returns its value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Dictionary Methods 🛠️&lt;span class="hx-absolute -hx-mt-20" id="dictionary-methods-"&gt;&lt;/span&gt;
&lt;a href="#dictionary-methods-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Method&lt;/th&gt;
&lt;th style="text-align: left"&gt;Description&lt;/th&gt;
&lt;th style="text-align: left"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;.keys()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Returns all keys&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;person.keys()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;.values()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Returns all values&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;person.values()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;.items()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Returns all key-value pairs (tuples)&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;person.items()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;.update()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Updates dictionary with another dict&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;person.update({&amp;quot;age&amp;quot;: 27})&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;.get()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Gets value for key (safe)&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;person.get(&amp;quot;age&amp;quot;, 0)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;.pop()&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Removes key and returns its value&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;person.pop(&amp;quot;age&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Looping Through Dictionaries 🔄&lt;span class="hx-absolute -hx-mt-20" id="looping-through-dictionaries-"&gt;&lt;/span&gt;
&lt;a href="#looping-through-dictionaries-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Loop through keys:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Loop through values:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Loop through key-value pairs:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Practice Questions with Solutions 🏋️‍♂️&lt;span class="hx-absolute -hx-mt-20" id="practice-questions-with-solutions-"&gt;&lt;/span&gt;
&lt;a href="#practice-questions-with-solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1. Create a dictionary with your name, age, and city. Print each value.&lt;span class="hx-absolute -hx-mt-20" id="1-create-a-dictionary-with-your-name-age-and-city-print-each-value"&gt;&lt;/span&gt;
&lt;a href="#1-create-a-dictionary-with-your-name-age-and-city-print-each-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Rahul&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;city&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Mumbai&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Rahul&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 21&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;city&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Mumbai&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;2. Add a new key &amp;ldquo;country&amp;rdquo; with value &amp;ldquo;India&amp;rdquo; to your dictionary. Then, remove the &amp;ldquo;city&amp;rdquo; key.&lt;span class="hx-absolute -hx-mt-20" id="2-add-a-new-key-country-with-value-india-to-your-dictionary-then-remove-the-city-key"&gt;&lt;/span&gt;
&lt;a href="#2-add-a-new-key-country-with-value-india-to-your-dictionary-then-remove-the-city-key" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;my_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;India&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;my_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;city&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {&amp;#39;name&amp;#39;: &amp;#39;Rahul&amp;#39;, &amp;#39;age&amp;#39;: 21, &amp;#39;country&amp;#39;: &amp;#39;India&amp;#39;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;3. Given the dictionary: &lt;code&gt;fruits = {&amp;quot;apple&amp;quot;: 2, &amp;quot;banana&amp;quot;: 3, &amp;quot;orange&amp;quot;: 1}&lt;/code&gt;&lt;span class="hx-absolute -hx-mt-20" id="3-given-the-dictionary-fruits--apple-2-banana-3-orange-1"&gt;&lt;/span&gt;
&lt;a href="#3-given-the-dictionary-fruits--apple-2-banana-3-orange-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Write code to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print all keys&lt;/li&gt;
&lt;li&gt;Print all values&lt;/li&gt;
&lt;li&gt;Print all key-value pairs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# dict_keys([&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;orange&amp;#39;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# dict_values([2, 3, 1])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# dict_items([(&amp;#39;apple&amp;#39;, 2), (&amp;#39;banana&amp;#39;, 3), (&amp;#39;orange&amp;#39;, 1)])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;4. Write a function that counts the frequency of each letter in a string and returns a dictionary.&lt;span class="hx-absolute -hx-mt-20" id="4-write-a-function-that-counts-the-frequency-of-each-letter-in-a-string-and-returns-a-dictionary"&gt;&lt;/span&gt;
&lt;a href="#4-write-a-function-that-counts-the-frequency-of-each-letter-in-a-string-and-returns-a-dictionary" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# {&amp;#39;b&amp;#39;: 1, &amp;#39;a&amp;#39;: 3, &amp;#39;n&amp;#39;: 2}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;5. Check if &amp;ldquo;apple&amp;rdquo; is a key in the &lt;code&gt;fruits&lt;/code&gt; dictionary.&lt;span class="hx-absolute -hx-mt-20" id="5-check-if-apple-is-a-key-in-the-fruits-dictionary"&gt;&lt;/span&gt;
&lt;a href="#5-check-if-apple-is-a-key-in-the-fruits-dictionary" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Yes, apple is in the dictionary!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;No, apple is not found.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Step-by-Step Example: Counting Unique Characters&lt;span class="hx-absolute -hx-mt-20" id="step-by-step-example-counting-unique-characters"&gt;&lt;/span&gt;
&lt;a href="#step-by-step-example-counting-unique-characters" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Count the number of unique characters in a string using a dictionary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create an empty dictionary
&lt;strong&gt;Step 2:&lt;/strong&gt; Loop through each character in the string
&lt;strong&gt;Step 3:&lt;/strong&gt; If character is not in dictionary, add it
&lt;strong&gt;Step 4:&lt;/strong&gt; Print the length of the dictionary (number of unique characters)&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;unique_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;unique_chars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Value doesn&amp;#39;t matter here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_chars&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Output: 8 (h, e, l, o, , w, r, d)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Common Pitfalls ⚠️&lt;span class="hx-absolute -hx-mt-20" id="common-pitfalls-"&gt;&lt;/span&gt;
&lt;a href="#common-pitfalls-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keys must be hashable&lt;/strong&gt;: You can&amp;rsquo;t use lists or other dictionaries as keys.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessing a missing key with &lt;code&gt;[]&lt;/code&gt; raises KeyError&lt;/strong&gt;: Use &lt;code&gt;.get()&lt;/code&gt; to avoid errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duplicate keys are not allowed&lt;/strong&gt;: The last value assigned to a key will overwrite previous ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dictionary Comprehensions 🧠&lt;span class="hx-absolute -hx-mt-20" id="dictionary-comprehensions-"&gt;&lt;/span&gt;
&lt;a href="#dictionary-comprehensions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can create dictionaries in a single line using a comprehension:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Summary Table: Lists vs Dictionaries&lt;span class="hx-absolute -hx-mt-20" id="summary-table-lists-vs-dictionaries"&gt;&lt;/span&gt;
&lt;a href="#summary-table-lists-vs-dictionaries" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Feature&lt;/th&gt;
&lt;th style="text-align: left"&gt;List&lt;/th&gt;
&lt;th style="text-align: left"&gt;Dictionary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Access by&lt;/td&gt;
&lt;td style="text-align: left"&gt;Index (position)&lt;/td&gt;
&lt;td style="text-align: left"&gt;Key (any hashable object)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Syntax&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;[^1][^3][^2]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Mutable&lt;/td&gt;
&lt;td style="text-align: left"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: left"&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Ordered&lt;/td&gt;
&lt;td style="text-align: left"&gt;Yes (since Python 3.7)&lt;/td&gt;
&lt;td style="text-align: left"&gt;Yes (since Python 3.7)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Duplicate keys?&lt;/td&gt;
&lt;td style="text-align: left"&gt;N/A&lt;/td&gt;
&lt;td style="text-align: left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Try It Yourself! 🚀&lt;span class="hx-absolute -hx-mt-20" id="try-it-yourself-"&gt;&lt;/span&gt;
&lt;a href="#try-it-yourself-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Create a dictionary for three students with their names as keys and their grades as values. Then, print the average grade.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Anil&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Bina&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Chetan&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grades&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Average grade: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt; are super useful for organizing and accessing data quickly by a unique key! Practice using them in your projects and you&amp;rsquo;ll master them in no time! 😃🔑&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref3:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;itpacs_cafiero.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Introduction_to_Python_Programming_-_WEB.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Learning_Python.pdf&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>More on Dictionaries</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-5/lec2-more-on-dictionaries/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-5/lec2-more-on-dictionaries/</guid><description>
&lt;img src="https://r2cdn.perplexity.ai/pplx-full-logo-primary-dark%402x.png" class="logo" width="120"/&gt;
&lt;h1&gt;More on Dictionaries&lt;/h1&gt;&lt;p&gt;Let’s explore &lt;strong&gt;more advanced concepts and uses of Python dictionaries&lt;/strong&gt; 🗝️🚀, with clear explanations, step-by-step examples, and practice questions (with solutions)!&lt;/p&gt;
&lt;h2&gt;🧠 What Makes Dictionaries Powerful?&lt;span class="hx-absolute -hx-mt-20" id="-what-makes-dictionaries-powerful"&gt;&lt;/span&gt;
&lt;a href="#-what-makes-dictionaries-powerful" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dictionaries are mappings&lt;/strong&gt;: Each key maps to a value, allowing fast lookups without knowing the position/index&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keys must be hashable&lt;/strong&gt;: This means keys must be immutable (like strings, numbers, or tuples of immutables)&lt;sup id="fnref1:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Values can be anything&lt;/strong&gt;: Numbers, strings, lists, even other dictionaries!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🛠️ Advanced Dictionary Features&lt;span class="hx-absolute -hx-mt-20" id="-advanced-dictionary-features"&gt;&lt;/span&gt;
&lt;a href="#-advanced-dictionary-features" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1. &lt;strong&gt;Creating and Modifying Dictionaries&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="1-creating-and-modifying-dictionaries"&gt;&lt;/span&gt;
&lt;a href="#1-creating-and-modifying-dictionaries" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Creating a dictionary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;eng2sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;uno&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;dos&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;three&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;tres&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Adding or updating a key-value pair&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;eng2sp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;four&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;cuatro&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# adds new key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;eng2sp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;uno!&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# updates existing key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Deleting a key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;eng2sp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;four&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Using pop to remove and get a value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eng2sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# val = &amp;#34;dos&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;If you try to access a key that doesn&amp;rsquo;t exist, you&amp;rsquo;ll get a &lt;code&gt;KeyError&lt;/code&gt;!&lt;/em&gt;&lt;sup id="fnref2:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;2. &lt;strong&gt;Looping Through Dictionaries&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="2-looping-through-dictionaries"&gt;&lt;/span&gt;
&lt;a href="#2-looping-through-dictionaries" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Loop through keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Loop through values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Loop through key-value pairs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; =&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;.items()&lt;/code&gt; gives you both the key and value at once!&lt;/em&gt;&lt;sup id="fnref3:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;3. &lt;strong&gt;Dictionary as a Counter (Histogram)&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="3-dictionary-as-a-counter-histogram"&gt;&lt;/span&gt;
&lt;a href="#3-dictionary-as-a-counter-histogram" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Dictionaries are perfect for counting things, like letters in a word!&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# {&amp;#39;b&amp;#39;: 1, &amp;#39;a&amp;#39;: 3, &amp;#39;n&amp;#39;: 2}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;.get(key, default)&lt;/code&gt; method avoids KeyError and provides a default value if the key is missing.&lt;/em&gt;&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref4:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;4. &lt;strong&gt;Reverse Lookup&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="4-reverse-lookup"&gt;&lt;/span&gt;
&lt;a href="#4-reverse-lookup" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Find a key from a value (note: values may not be unique!):&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Value does not appear in the dictionary&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This will return the first key it finds with the given value, or raise an error if not found.&lt;/em&gt;&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;5. &lt;strong&gt;Dictionaries with Lists and Tuples&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="5-dictionaries-with-lists-and-tuples"&gt;&lt;/span&gt;
&lt;a href="#5-dictionaries-with-lists-and-tuples" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lists as values&lt;/strong&gt;: Useful for grouping multiple items under a key.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuples as keys&lt;/strong&gt;: Only if all elements are immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# List as a value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Rahul&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Anil&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Tuple as a key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Sharma&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Anil&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;9876543210&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;You can&amp;rsquo;t use lists or dictionaries as keys because they are mutable and not hashable!&lt;/em&gt;&lt;sup id="fnref3:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref5:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;6. &lt;strong&gt;Dictionary Comprehensions&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="6-dictionary-comprehensions"&gt;&lt;/span&gt;
&lt;a href="#6-dictionary-comprehensions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Quickly build a dictionary from a sequence:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Squares of numbers 1-5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;7. &lt;strong&gt;Membership Testing&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="7-membership-testing"&gt;&lt;/span&gt;
&lt;a href="#7-membership-testing" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Check if a key exists:&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;z&amp;#34;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Membership tests only check keys, not values!&lt;/em&gt;&lt;sup id="fnref4:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref6:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;⚠️ Common Dictionary Errors&lt;span class="hx-absolute -hx-mt-20" id="-common-dictionary-errors"&gt;&lt;/span&gt;
&lt;a href="#-common-dictionary-errors" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Error&lt;/th&gt;
&lt;th style="text-align: left"&gt;Cause &amp;amp; Example&lt;/th&gt;
&lt;th style="text-align: left"&gt;How to Avoid/Fix&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;KeyError&lt;/td&gt;
&lt;td style="text-align: left"&gt;Accessing a key that doesn&amp;rsquo;t exist&lt;/td&gt;
&lt;td style="text-align: left"&gt;Use &lt;code&gt;.get()&lt;/code&gt; or check with &lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;TypeError&lt;/td&gt;
&lt;td style="text-align: left"&gt;Using unhashable type (like list) as a key&lt;/td&gt;
&lt;td style="text-align: left"&gt;Only use immutable keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;ValueError&lt;/td&gt;
&lt;td style="text-align: left"&gt;Using wrong type/value in some methods&lt;/td&gt;
&lt;td style="text-align: left"&gt;Check your data types&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;📝 Practice Questions with Solutions&lt;span class="hx-absolute -hx-mt-20" id="-practice-questions-with-solutions"&gt;&lt;/span&gt;
&lt;a href="#-practice-questions-with-solutions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1. &lt;strong&gt;Count Word Frequency in a Sentence&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="1-count-word-frequency-in-a-sentence"&gt;&lt;/span&gt;
&lt;a href="#1-count-word-frequency-in-a-sentence" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;to be or not to be&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;word_histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# {&amp;#39;to&amp;#39;: 2, &amp;#39;be&amp;#39;: 2, &amp;#39;or&amp;#39;: 1, &amp;#39;not&amp;#39;: 1}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;2. &lt;strong&gt;Find All Keys with a Certain Value&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="2-find-all-keys-with-a-certain-value"&gt;&lt;/span&gt;
&lt;a href="#2-find-all-keys-with-a-certain-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;keys_with_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_with_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# [&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;3. &lt;strong&gt;Safe Value Access&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="3-safe-value-access"&gt;&lt;/span&gt;
&lt;a href="#3-safe-value-access" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;y&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;z&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Not found&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Not found&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;4. &lt;strong&gt;Using Tuples as Keys&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="4-using-tuples-as-keys"&gt;&lt;/span&gt;
&lt;a href="#4-using-tuples-as-keys" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="c1"&gt;# A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;5. &lt;strong&gt;Practice: Student Grades&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="5-practice-student-grades"&gt;&lt;/span&gt;
&lt;a href="#5-practice-student-grades" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Given a dictionary of students and their grades, print the names of all students who scored above 80.&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Anil&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Bina&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Chetan&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Deepa&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;grades&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Anil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Chetan&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;🏆 Step-by-Step: Inverting a Dictionary&lt;span class="hx-absolute -hx-mt-20" id="-step-by-step-inverting-a-dictionary"&gt;&lt;/span&gt;
&lt;a href="#-step-by-step-inverting-a-dictionary" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Swap keys and values (assume all values are unique).&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;inverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {1: &amp;#39;a&amp;#39;, 2: &amp;#39;b&amp;#39;, 3: &amp;#39;c&amp;#39;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;If values are not unique, store a list of keys for each value!&lt;/em&gt;&lt;sup id="fnref5:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;🧩 Try It Yourself!&lt;span class="hx-absolute -hx-mt-20" id="-try-it-yourself"&gt;&lt;/span&gt;
&lt;a href="#-try-it-yourself" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Write a function that takes a string and returns a dictionary with the count of each vowel.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vowel_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;aeiou&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowel_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# {&amp;#39;e&amp;#39;: 1, &amp;#39;o&amp;#39;: 2}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;🎯 Key Takeaways&lt;span class="hx-absolute -hx-mt-20" id="-key-takeaways"&gt;&lt;/span&gt;
&lt;a href="#-key-takeaways" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dictionaries are fast, flexible, and essential for real-world Python!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keys must be unique and hashable.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Values can be any type—even lists or other dictionaries!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use &lt;code&gt;.get()&lt;/code&gt;, &lt;code&gt;.items()&lt;/code&gt;, and comprehensions for powerful, safe, and concise code.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep experimenting and practicing—dictionaries are everywhere in Python programming! 🐍✨&lt;/p&gt;
&lt;p&gt;If you want more challenges or explanations, just ask!&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;thinkpython2.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;itpacs_cafiero.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref6:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Sorting Using Functions</title><link>/notes/iit-madras/data-science-and-application/foundational-level/python/week-5/lec3-sorting-using-functions/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>/notes/iit-madras/data-science-and-application/foundational-level/python/week-5/lec3-sorting-using-functions/</guid><description>
&lt;p&gt;Let’s explore &lt;strong&gt;sorting using functions in Python&lt;/strong&gt; 🏅🔢—with easy explanations, step-by-step examples, and practice questions (with solutions)! 🚦&lt;/p&gt;
&lt;h2&gt;Why Sort? 🤔&lt;span class="hx-absolute -hx-mt-20" id="why-sort-"&gt;&lt;/span&gt;
&lt;a href="#why-sort-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sorting helps you organize data—like arranging numbers from smallest to largest, or names alphabetically. Python has built-in ways to sort, but you can also write your own functions for custom sorting!&lt;/p&gt;
&lt;h2&gt;1️⃣ Basic Sorting with Built-in Functions&lt;span class="hx-absolute -hx-mt-20" id="1-basic-sorting-with-built-in-functions"&gt;&lt;/span&gt;
&lt;a href="#1-basic-sorting-with-built-in-functions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;strong&gt;Using &lt;code&gt;sorted()&lt;/code&gt; and &lt;code&gt;.sort()&lt;/code&gt;&lt;/strong&gt;&lt;span class="hx-absolute -hx-mt-20" id="using"&gt;&lt;/span&gt;
&lt;a href="#using" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sorted(sequence)&lt;/code&gt; returns a new sorted list from any sequence (list, tuple, etc.).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sort()&lt;/code&gt; sorts a list in place (modifies the original list).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# [1, 2, 4, 7]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [1, 2, 4, 7]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;You can use &lt;code&gt;sorted()&lt;/code&gt; with any sequence, but &lt;code&gt;.sort()&lt;/code&gt; is only for lists!&lt;/em&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;2️⃣ Sorting with Functions ✨&lt;span class="hx-absolute -hx-mt-20" id="2-sorting-with-functions-"&gt;&lt;/span&gt;
&lt;a href="#2-sorting-with-functions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can write your own &lt;strong&gt;sorting function&lt;/strong&gt; for special needs!&lt;/p&gt;
&lt;h3&gt;Example: Selection Sort (Custom Function)&lt;span class="hx-absolute -hx-mt-20" id="example-selection-sort-custom-function"&gt;&lt;/span&gt;
&lt;a href="#example-selection-sort-custom-function" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;min_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# [6, 24, 24, 32, 78, 84]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This function finds the smallest item, adds it to a new list, and removes it from the original—repeating until sorted.&lt;/em&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;3️⃣ Sorting Dictionaries by Key or Value&lt;span class="hx-absolute -hx-mt-20" id="3-sorting-dictionaries-by-key-or-value"&gt;&lt;/span&gt;
&lt;a href="#3-sorting-dictionaries-by-key-or-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Dictionaries are &lt;strong&gt;unordered&lt;/strong&gt;, but you can sort them for display!&lt;/p&gt;
&lt;h3&gt;Sort by Key&lt;span class="hx-absolute -hx-mt-20" id="sort-by-key"&gt;&lt;/span&gt;
&lt;a href="#sort-by-key" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# b 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# c 22&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This loops through keys in sorted order.&lt;/em&gt;&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref1:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;Sort by Value&lt;span class="hx-absolute -hx-mt-20" id="sort-by-value"&gt;&lt;/span&gt;
&lt;a href="#sort-by-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# (value, key) tuples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# c 22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# b 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;By making (value, key) tuples, you can sort by value easily!&lt;/em&gt;&lt;sup id="fnref2:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;4️⃣ Sorting with &lt;code&gt;key&lt;/code&gt; Functions&lt;span class="hx-absolute -hx-mt-20" id="4-sorting-with-key-functions"&gt;&lt;/span&gt;
&lt;a href="#4-sorting-with-key-functions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;sorted()&lt;/code&gt; function can take a &lt;code&gt;key&lt;/code&gt; argument—a function that tells Python how to sort.&lt;/p&gt;
&lt;h3&gt;Example: Sort Words by Length&lt;span class="hx-absolute -hx-mt-20" id="example-sort-words-by-length"&gt;&lt;/span&gt;
&lt;a href="#example-sort-words-by-length" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kiwi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;sorted_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sorted_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [&amp;#39;kiwi&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;cherry&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Here, &lt;code&gt;key=len&lt;/code&gt; tells Python to sort by word length.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Example: Sort Tuples by Second Element&lt;span class="hx-absolute -hx-mt-20" id="example-sort-tuples-by-second-element"&gt;&lt;/span&gt;
&lt;a href="#example-sort-tuples-by-second-element" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;sorted_pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sorted_pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [(3, &amp;#39;a&amp;#39;), (1, &amp;#39;b&amp;#39;), (2, &amp;#39;c&amp;#39;)]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Lambda functions are great for custom sorting!&lt;/em&gt;&lt;sup id="fnref3:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;5️⃣ Practice Questions with Solutions 💡&lt;span class="hx-absolute -hx-mt-20" id="5-practice-questions-with-solutions-"&gt;&lt;/span&gt;
&lt;a href="#5-practice-questions-with-solutions-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Q1. Sort a list of numbers in descending order using a function.&lt;span class="hx-absolute -hx-mt-20" id="q1-sort-a-list-of-numbers-in-descending-order-using-a-function"&gt;&lt;/span&gt;
&lt;a href="#q1-sort-a-list-of-numbers-in-descending-order-using-a-function" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# [4, 3, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Q2. Given a dictionary of students and marks, print names sorted by marks (highest first).&lt;span class="hx-absolute -hx-mt-20" id="q2-given-a-dictionary-of-students-and-marks-print-names-sorted-by-marks-highest-first"&gt;&lt;/span&gt;
&lt;a href="#q2-given-a-dictionary-of-students-and-marks-print-names-sorted-by-marks-highest-first" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Anil&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bina&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Chetan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Deepa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Chetan 92&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Anil 85&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Bina 78&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Deepa 67&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This uses the decorate-sort-undecorate (DSU) pattern!&lt;/em&gt;&lt;sup id="fnref4:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;Q3. Sort a list of words by their last letter using a function.&lt;span class="hx-absolute -hx-mt-20" id="q3-sort-a-list-of-words-by-their-last-letter-using-a-function"&gt;&lt;/span&gt;
&lt;a href="#q3-sort-a-list-of-words-by-their-last-letter-using-a-function" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_by_last_letter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kiwi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_by_last_letter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# [&amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;kiwi&amp;#39;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;6️⃣ Step-by-Step: Sorting Dictionary by Value&lt;span class="hx-absolute -hx-mt-20" id="6-step-by-step-sorting-dictionary-by-value"&gt;&lt;/span&gt;
&lt;a href="#6-step-by-step-sorting-dictionary-by-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Print dictionary items sorted by value (highest to lowest).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Make a list of (value, key) tuples
&lt;strong&gt;Step 2:&lt;/strong&gt; Sort the list in reverse order
&lt;strong&gt;Step 3:&lt;/strong&gt; Print key and value&lt;/p&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Output: c 22, a 10, b 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;sup id="fnref5:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;🧩 Try It Yourself!&lt;span class="hx-absolute -hx-mt-20" id="-try-it-yourself"&gt;&lt;/span&gt;
&lt;a href="#-try-it-yourself" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Write a function to sort a list of tuples by the second element.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Solution&lt;/summary&gt;
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_by_second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_by_second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# [(4, 1), (5, 2), (1, 3)]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
&gt;
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2&gt;⭐ Key Takeaways&lt;span class="hx-absolute -hx-mt-20" id="-key-takeaways"&gt;&lt;/span&gt;
&lt;a href="#-key-takeaways" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/strong&gt; for any sequence, &lt;strong&gt;&lt;code&gt;.sort()&lt;/code&gt;&lt;/strong&gt; for lists.&lt;/li&gt;
&lt;li&gt;For custom sorting, use the &lt;strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;/strong&gt; argument with a function or lambda.&lt;/li&gt;
&lt;li&gt;To sort dictionaries, convert items to a list of tuples, then sort.&lt;/li&gt;
&lt;li&gt;Writing your own sorting function helps you learn how sorting works!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep practicing and try sorting different types of data—it&amp;rsquo;s a super useful skill! 🥇🧑‍💻&lt;/p&gt;
&lt;div style="text-align: center"&gt;⁂&lt;/div&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;pythonlearn.pdf&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref3:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref4:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href="#fnref5:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Python-IITM-Foundational-Course.pdf&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Learning_Python.pdf&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item></channel></rss>